<?php
/**
 * TransfersApi
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Functions;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Cyclos\Api\ApiException;
use Cyclos\Api\Configuration;
use Cyclos\Api\HeaderSelector;
use Cyclos\Api\ObjectSerializer;

/**
 * TransfersApi Class Doc Comment
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransfersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation chargebackTransfer
     *
     * Perform the chargeback of a transfer
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string $confirmation_password The password used to confirm this action, if needed. The actual password type, if any, depends on the Cyclos configuration for the current channel. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function chargebackTransfer($key, $confirmation_password = null)
    {
        list($response) = $this->chargebackTransferWithHttpInfo($key, $confirmation_password);
        return $response;
    }

    /**
     * Operation chargebackTransferWithHttpInfo
     *
     * Perform the chargeback of a transfer
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string $confirmation_password The password used to confirm this action, if needed. The actual password type, if any, depends on the Cyclos configuration for the current channel. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function chargebackTransferWithHttpInfo($key, $confirmation_password = null)
    {
        $returnType = 'string';
        $request = $this->chargebackTransferRequest($key, $confirmation_password);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\PaymentError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chargebackTransferAsync
     *
     * Perform the chargeback of a transfer
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string $confirmation_password The password used to confirm this action, if needed. The actual password type, if any, depends on the Cyclos configuration for the current channel. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chargebackTransferAsync($key, $confirmation_password = null)
    {
        return $this->chargebackTransferAsyncWithHttpInfo($key, $confirmation_password)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chargebackTransferAsyncWithHttpInfo
     *
     * Perform the chargeback of a transfer
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string $confirmation_password The password used to confirm this action, if needed. The actual password type, if any, depends on the Cyclos configuration for the current channel. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chargebackTransferAsyncWithHttpInfo($key, $confirmation_password = null)
    {
        $returnType = 'string';
        $request = $this->chargebackTransferRequest($key, $confirmation_password);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chargebackTransfer'
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string $confirmation_password The password used to confirm this action, if needed. The actual password type, if any, depends on the Cyclos configuration for the current channel. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function chargebackTransferRequest($key, $confirmation_password = null)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling chargebackTransfer'
            );
        }

        $resourcePath = '/transfers/{key}/chargeback';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($confirmation_password !== null) {
            $headerParams['confirmationPassword'] = ObjectSerializer::toHeaderValue($confirmation_password);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransferDataForSearch
     *
     * Returns configuration data for searching transfers over multiple accounts.
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cyclos\Api\Model\TransferDataForSearch
     */
    public function getTransferDataForSearch($fields = null)
    {
        list($response) = $this->getTransferDataForSearchWithHttpInfo($fields);
        return $response;
    }

    /**
     * Operation getTransferDataForSearchWithHttpInfo
     *
     * Returns configuration data for searching transfers over multiple accounts.
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cyclos\Api\Model\TransferDataForSearch, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransferDataForSearchWithHttpInfo($fields = null)
    {
        $returnType = '\Cyclos\Api\Model\TransferDataForSearch';
        $request = $this->getTransferDataForSearchRequest($fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\TransferDataForSearch',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransferDataForSearchAsync
     *
     * Returns configuration data for searching transfers over multiple accounts.
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransferDataForSearchAsync($fields = null)
    {
        return $this->getTransferDataForSearchAsyncWithHttpInfo($fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransferDataForSearchAsyncWithHttpInfo
     *
     * Returns configuration data for searching transfers over multiple accounts.
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransferDataForSearchAsyncWithHttpInfo($fields = null)
    {
        $returnType = '\Cyclos\Api\Model\TransferDataForSearch';
        $request = $this->getTransferDataForSearchRequest($fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransferDataForSearch'
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTransferDataForSearchRequest($fields = null)
    {

        $resourcePath = '/transfers/data-for-search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchTransfers
     *
     * Searches for transfers over multiple accounts.
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $broker DEPRECATED: Use &#x60;brokers&#x60; instead. Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $charged_back When set to either &#x60;true&#x60; will only return transfers that were charged-back. When set to &#x60;false&#x60;, will only return transfers that were not charged-back. When left blank will not filter by this creterion. (optional)
     * @param  string[] $currencies Either ids or internal names of the currency (optional)
     * @param  string $currency DEPRECATED: Use &#x60;currencies&#x60; instead. Either id or internal name of the currency (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  string $from_account_type DEPRECATED: Use &#x60;fromAccountTypes&#x60; instead. Either ids or internal names of the origin account type (optional)
     * @param  string[] $from_account_types Either ids or internal names of the origin account type (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \Cyclos\Api\Model\TransferKind[] $kinds The kind of transfers to return (optional)
     * @param  \Cyclos\Api\Model\TransOrderByEnum $order_by order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#x27;t need it, setting this to true can increase performance a bit. (optional)
     * @param  string[] $statuses Transfer statuses used as search criteria. Each array element should be either the identifier or the status qualified internal name, composed by flow internal name, a dot, and the status internal name. For example, &#x60;loan.open&#x60; would be a valid internal name. (optional)
     * @param  string $to_account_type DEPRECATED: Use &#x60;toAccountTypes&#x60; instead. Either ids or internal names of the destination account type (optional)
     * @param  string[] $to_account_types Either ids or internal names of the destination account type (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  \Cyclos\Api\Model\TransferKind[] $transfer_kinds DEPRECATED: Use &#x60;kinds&#x60; instead (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cyclos\Api\Model\TransferResult[]
     */
    public function searchTransfers($fields = null, $access_clients = null, $amount_range = null, $broker = null, $brokers = null, $by = null, $channels = null, $charged_back = null, $currencies = null, $currency = null, $date_period = null, $excluded_ids = null, $from_account_type = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $skip_total_count = null, $statuses = null, $to_account_type = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_kinds = null, $transfer_types = null, $user = null)
    {
        list($response) = $this->searchTransfersWithHttpInfo($fields, $access_clients, $amount_range, $broker, $brokers, $by, $channels, $charged_back, $currencies, $currency, $date_period, $excluded_ids, $from_account_type, $from_account_types, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $skip_total_count, $statuses, $to_account_type, $to_account_types, $transaction_number, $transfer_filters, $transfer_kinds, $transfer_types, $user);
        return $response;
    }

    /**
     * Operation searchTransfersWithHttpInfo
     *
     * Searches for transfers over multiple accounts.
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $broker DEPRECATED: Use &#x60;brokers&#x60; instead. Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $charged_back When set to either &#x60;true&#x60; will only return transfers that were charged-back. When set to &#x60;false&#x60;, will only return transfers that were not charged-back. When left blank will not filter by this creterion. (optional)
     * @param  string[] $currencies Either ids or internal names of the currency (optional)
     * @param  string $currency DEPRECATED: Use &#x60;currencies&#x60; instead. Either id or internal name of the currency (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  string $from_account_type DEPRECATED: Use &#x60;fromAccountTypes&#x60; instead. Either ids or internal names of the origin account type (optional)
     * @param  string[] $from_account_types Either ids or internal names of the origin account type (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \Cyclos\Api\Model\TransferKind[] $kinds The kind of transfers to return (optional)
     * @param  \Cyclos\Api\Model\TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#x27;t need it, setting this to true can increase performance a bit. (optional)
     * @param  string[] $statuses Transfer statuses used as search criteria. Each array element should be either the identifier or the status qualified internal name, composed by flow internal name, a dot, and the status internal name. For example, &#x60;loan.open&#x60; would be a valid internal name. (optional)
     * @param  string $to_account_type DEPRECATED: Use &#x60;toAccountTypes&#x60; instead. Either ids or internal names of the destination account type (optional)
     * @param  string[] $to_account_types Either ids or internal names of the destination account type (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  \Cyclos\Api\Model\TransferKind[] $transfer_kinds DEPRECATED: Use &#x60;kinds&#x60; instead (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cyclos\Api\Model\TransferResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function searchTransfersWithHttpInfo($fields = null, $access_clients = null, $amount_range = null, $broker = null, $brokers = null, $by = null, $channels = null, $charged_back = null, $currencies = null, $currency = null, $date_period = null, $excluded_ids = null, $from_account_type = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $skip_total_count = null, $statuses = null, $to_account_type = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_kinds = null, $transfer_types = null, $user = null)
    {
        $returnType = '\Cyclos\Api\Model\TransferResult[]';
        $request = $this->searchTransfersRequest($fields, $access_clients, $amount_range, $broker, $brokers, $by, $channels, $charged_back, $currencies, $currency, $date_period, $excluded_ids, $from_account_type, $from_account_types, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $skip_total_count, $statuses, $to_account_type, $to_account_types, $transaction_number, $transfer_filters, $transfer_kinds, $transfer_types, $user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\TransferResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchTransfersAsync
     *
     * Searches for transfers over multiple accounts.
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $broker DEPRECATED: Use &#x60;brokers&#x60; instead. Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $charged_back When set to either &#x60;true&#x60; will only return transfers that were charged-back. When set to &#x60;false&#x60;, will only return transfers that were not charged-back. When left blank will not filter by this creterion. (optional)
     * @param  string[] $currencies Either ids or internal names of the currency (optional)
     * @param  string $currency DEPRECATED: Use &#x60;currencies&#x60; instead. Either id or internal name of the currency (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  string $from_account_type DEPRECATED: Use &#x60;fromAccountTypes&#x60; instead. Either ids or internal names of the origin account type (optional)
     * @param  string[] $from_account_types Either ids or internal names of the origin account type (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \Cyclos\Api\Model\TransferKind[] $kinds The kind of transfers to return (optional)
     * @param  \Cyclos\Api\Model\TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#x27;t need it, setting this to true can increase performance a bit. (optional)
     * @param  string[] $statuses Transfer statuses used as search criteria. Each array element should be either the identifier or the status qualified internal name, composed by flow internal name, a dot, and the status internal name. For example, &#x60;loan.open&#x60; would be a valid internal name. (optional)
     * @param  string $to_account_type DEPRECATED: Use &#x60;toAccountTypes&#x60; instead. Either ids or internal names of the destination account type (optional)
     * @param  string[] $to_account_types Either ids or internal names of the destination account type (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  \Cyclos\Api\Model\TransferKind[] $transfer_kinds DEPRECATED: Use &#x60;kinds&#x60; instead (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTransfersAsync($fields = null, $access_clients = null, $amount_range = null, $broker = null, $brokers = null, $by = null, $channels = null, $charged_back = null, $currencies = null, $currency = null, $date_period = null, $excluded_ids = null, $from_account_type = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $skip_total_count = null, $statuses = null, $to_account_type = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_kinds = null, $transfer_types = null, $user = null)
    {
        return $this->searchTransfersAsyncWithHttpInfo($fields, $access_clients, $amount_range, $broker, $brokers, $by, $channels, $charged_back, $currencies, $currency, $date_period, $excluded_ids, $from_account_type, $from_account_types, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $skip_total_count, $statuses, $to_account_type, $to_account_types, $transaction_number, $transfer_filters, $transfer_kinds, $transfer_types, $user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchTransfersAsyncWithHttpInfo
     *
     * Searches for transfers over multiple accounts.
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $broker DEPRECATED: Use &#x60;brokers&#x60; instead. Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $charged_back When set to either &#x60;true&#x60; will only return transfers that were charged-back. When set to &#x60;false&#x60;, will only return transfers that were not charged-back. When left blank will not filter by this creterion. (optional)
     * @param  string[] $currencies Either ids or internal names of the currency (optional)
     * @param  string $currency DEPRECATED: Use &#x60;currencies&#x60; instead. Either id or internal name of the currency (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  string $from_account_type DEPRECATED: Use &#x60;fromAccountTypes&#x60; instead. Either ids or internal names of the origin account type (optional)
     * @param  string[] $from_account_types Either ids or internal names of the origin account type (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \Cyclos\Api\Model\TransferKind[] $kinds The kind of transfers to return (optional)
     * @param  \Cyclos\Api\Model\TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#x27;t need it, setting this to true can increase performance a bit. (optional)
     * @param  string[] $statuses Transfer statuses used as search criteria. Each array element should be either the identifier or the status qualified internal name, composed by flow internal name, a dot, and the status internal name. For example, &#x60;loan.open&#x60; would be a valid internal name. (optional)
     * @param  string $to_account_type DEPRECATED: Use &#x60;toAccountTypes&#x60; instead. Either ids or internal names of the destination account type (optional)
     * @param  string[] $to_account_types Either ids or internal names of the destination account type (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  \Cyclos\Api\Model\TransferKind[] $transfer_kinds DEPRECATED: Use &#x60;kinds&#x60; instead (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTransfersAsyncWithHttpInfo($fields = null, $access_clients = null, $amount_range = null, $broker = null, $brokers = null, $by = null, $channels = null, $charged_back = null, $currencies = null, $currency = null, $date_period = null, $excluded_ids = null, $from_account_type = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $skip_total_count = null, $statuses = null, $to_account_type = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_kinds = null, $transfer_types = null, $user = null)
    {
        $returnType = '\Cyclos\Api\Model\TransferResult[]';
        $request = $this->searchTransfersRequest($fields, $access_clients, $amount_range, $broker, $brokers, $by, $channels, $charged_back, $currencies, $currency, $date_period, $excluded_ids, $from_account_type, $from_account_types, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $skip_total_count, $statuses, $to_account_type, $to_account_types, $transaction_number, $transfer_filters, $transfer_kinds, $transfer_types, $user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchTransfers'
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $broker DEPRECATED: Use &#x60;brokers&#x60; instead. Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $charged_back When set to either &#x60;true&#x60; will only return transfers that were charged-back. When set to &#x60;false&#x60;, will only return transfers that were not charged-back. When left blank will not filter by this creterion. (optional)
     * @param  string[] $currencies Either ids or internal names of the currency (optional)
     * @param  string $currency DEPRECATED: Use &#x60;currencies&#x60; instead. Either id or internal name of the currency (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  string $from_account_type DEPRECATED: Use &#x60;fromAccountTypes&#x60; instead. Either ids or internal names of the origin account type (optional)
     * @param  string[] $from_account_types Either ids or internal names of the origin account type (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \Cyclos\Api\Model\TransferKind[] $kinds The kind of transfers to return (optional)
     * @param  \Cyclos\Api\Model\TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#x27;t need it, setting this to true can increase performance a bit. (optional)
     * @param  string[] $statuses Transfer statuses used as search criteria. Each array element should be either the identifier or the status qualified internal name, composed by flow internal name, a dot, and the status internal name. For example, &#x60;loan.open&#x60; would be a valid internal name. (optional)
     * @param  string $to_account_type DEPRECATED: Use &#x60;toAccountTypes&#x60; instead. Either ids or internal names of the destination account type (optional)
     * @param  string[] $to_account_types Either ids or internal names of the destination account type (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  \Cyclos\Api\Model\TransferKind[] $transfer_kinds DEPRECATED: Use &#x60;kinds&#x60; instead (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchTransfersRequest($fields = null, $access_clients = null, $amount_range = null, $broker = null, $brokers = null, $by = null, $channels = null, $charged_back = null, $currencies = null, $currency = null, $date_period = null, $excluded_ids = null, $from_account_type = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $skip_total_count = null, $statuses = null, $to_account_type = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_kinds = null, $transfer_types = null, $user = null)
    {

        $resourcePath = '/transfers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($access_clients !== null) {
            $queryParams['accessClients'] = ObjectSerializer::toQueryValue($access_clients);
        }
        // query params
        if ($amount_range !== null) {
            $queryParams['amountRange'] = ObjectSerializer::toQueryValue($amount_range);
        }
        // query params
        if ($broker !== null) {
            $queryParams['broker'] = ObjectSerializer::toQueryValue($broker);
        }
        // query params
        if ($brokers !== null) {
            $queryParams['brokers'] = ObjectSerializer::toQueryValue($brokers);
        }
        // query params
        if ($by !== null) {
            $queryParams['by'] = ObjectSerializer::toQueryValue($by);
        }
        // query params
        if ($channels !== null) {
            $queryParams['channels'] = ObjectSerializer::toQueryValue($channels);
        }
        // query params
        if ($charged_back !== null) {
            $queryParams['chargedBack'] = ObjectSerializer::toQueryValue($charged_back);
        }
        // query params
        if ($currencies !== null) {
            $queryParams['currencies'] = ObjectSerializer::toQueryValue($currencies);
        }
        // query params
        if ($currency !== null) {
            $queryParams['currency'] = ObjectSerializer::toQueryValue($currency);
        }
        // query params
        if ($date_period !== null) {
            $queryParams['datePeriod'] = ObjectSerializer::toQueryValue($date_period);
        }
        // query params
        if ($excluded_ids !== null) {
            $queryParams['excludedIds'] = ObjectSerializer::toQueryValue($excluded_ids);
        }
        // query params
        if ($from_account_type !== null) {
            $queryParams['fromAccountType'] = ObjectSerializer::toQueryValue($from_account_type);
        }
        // query params
        if ($from_account_types !== null) {
            $queryParams['fromAccountTypes'] = ObjectSerializer::toQueryValue($from_account_types);
        }
        // query params
        if ($from_current_access_client !== null) {
            $queryParams['fromCurrentAccessClient'] = ObjectSerializer::toQueryValue($from_current_access_client);
        }
        // query params
        if ($groups !== null) {
            $queryParams['groups'] = ObjectSerializer::toQueryValue($groups);
        }
        // query params
        if ($include_generated_by_access_client !== null) {
            $queryParams['includeGeneratedByAccessClient'] = ObjectSerializer::toQueryValue($include_generated_by_access_client);
        }
        // query params
        if ($kinds !== null) {
            $queryParams['kinds'] = ObjectSerializer::toQueryValue($kinds);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['orderBy'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($skip_total_count !== null) {
            $queryParams['skipTotalCount'] = ObjectSerializer::toQueryValue($skip_total_count);
        }
        // query params
        if ($statuses !== null) {
            $queryParams['statuses'] = ObjectSerializer::toQueryValue($statuses);
        }
        // query params
        if ($to_account_type !== null) {
            $queryParams['toAccountType'] = ObjectSerializer::toQueryValue($to_account_type);
        }
        // query params
        if ($to_account_types !== null) {
            $queryParams['toAccountTypes'] = ObjectSerializer::toQueryValue($to_account_types);
        }
        // query params
        if ($transaction_number !== null) {
            $queryParams['transactionNumber'] = ObjectSerializer::toQueryValue($transaction_number);
        }
        // query params
        if ($transfer_filters !== null) {
            $queryParams['transferFilters'] = ObjectSerializer::toQueryValue($transfer_filters);
        }
        // query params
        if ($transfer_kinds !== null) {
            $queryParams['transferKinds'] = ObjectSerializer::toQueryValue($transfer_kinds);
        }
        // query params
        if ($transfer_types !== null) {
            $queryParams['transferTypes'] = ObjectSerializer::toQueryValue($transfer_types);
        }
        // query params
        if ($user !== null) {
            $queryParams['user'] = ObjectSerializer::toQueryValue($user);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewTransfer
     *
     * Returns details about a transfer
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cyclos\Api\Model\TransferView
     */
    public function viewTransfer($key, $fields = null)
    {
        list($response) = $this->viewTransferWithHttpInfo($key, $fields);
        return $response;
    }

    /**
     * Operation viewTransferWithHttpInfo
     *
     * Returns details about a transfer
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cyclos\Api\Model\TransferView, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewTransferWithHttpInfo($key, $fields = null)
    {
        $returnType = '\Cyclos\Api\Model\TransferView';
        $request = $this->viewTransferRequest($key, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\TransferView',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewTransferAsync
     *
     * Returns details about a transfer
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewTransferAsync($key, $fields = null)
    {
        return $this->viewTransferAsyncWithHttpInfo($key, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewTransferAsyncWithHttpInfo
     *
     * Returns details about a transfer
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewTransferAsyncWithHttpInfo($key, $fields = null)
    {
        $returnType = '\Cyclos\Api\Model\TransferView';
        $request = $this->viewTransferRequest($key, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewTransfer'
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function viewTransferRequest($key, $fields = null)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling viewTransfer'
            );
        }

        $resourcePath = '/transfers/{key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
