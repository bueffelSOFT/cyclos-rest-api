<?php
/**
 * AuthApi
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Functions;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Cyclos\Api\ApiException;
use Cyclos\Api\Configuration;
use Cyclos\Api\HeaderSelector;
use Cyclos\Api\ObjectSerializer;

/**
 * AuthApi Class Doc Comment
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuthApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation changeForgottenPassword
     *
     * Changes the a forgotten password after have completed the request
     *
     * @param  \Cyclos\Api\Model\ChangeForgottenPassword $body The parameters for changing the password (required)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function changeForgottenPassword($body)
    {
        $this->changeForgottenPasswordWithHttpInfo($body);
    }

    /**
     * Operation changeForgottenPasswordWithHttpInfo
     *
     * Changes the a forgotten password after have completed the request
     *
     * @param  \Cyclos\Api\Model\ChangeForgottenPassword $body The parameters for changing the password (required)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function changeForgottenPasswordWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->changeForgottenPasswordRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\ForgottenPasswordError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation changeForgottenPasswordAsync
     *
     * Changes the a forgotten password after have completed the request
     *
     * @param  \Cyclos\Api\Model\ChangeForgottenPassword $body The parameters for changing the password (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changeForgottenPasswordAsync($body)
    {
        return $this->changeForgottenPasswordAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation changeForgottenPasswordAsyncWithHttpInfo
     *
     * Changes the a forgotten password after have completed the request
     *
     * @param  \Cyclos\Api\Model\ChangeForgottenPassword $body The parameters for changing the password (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changeForgottenPasswordAsyncWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->changeForgottenPasswordRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'changeForgottenPassword'
     *
     * @param  \Cyclos\Api\Model\ChangeForgottenPassword $body The parameters for changing the password (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function changeForgottenPasswordRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling changeForgottenPassword'
            );
        }

        $resourcePath = '/auth/forgotten-password';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation disconnectCurrentClient
     *
     * Disconnect the current access client
     *
     * @param  string $confirmation_password The password used to confirm this action, if needed. The actual password type, if any, depends on the Cyclos configuration for the current channel. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function disconnectCurrentClient($confirmation_password = null)
    {
        $this->disconnectCurrentClientWithHttpInfo($confirmation_password);
    }

    /**
     * Operation disconnectCurrentClientWithHttpInfo
     *
     * Disconnect the current access client
     *
     * @param  string $confirmation_password The password used to confirm this action, if needed. The actual password type, if any, depends on the Cyclos configuration for the current channel. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function disconnectCurrentClientWithHttpInfo($confirmation_password = null)
    {
        $returnType = '';
        $request = $this->disconnectCurrentClientRequest($confirmation_password);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\ConflictError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation disconnectCurrentClientAsync
     *
     * Disconnect the current access client
     *
     * @param  string $confirmation_password The password used to confirm this action, if needed. The actual password type, if any, depends on the Cyclos configuration for the current channel. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function disconnectCurrentClientAsync($confirmation_password = null)
    {
        return $this->disconnectCurrentClientAsyncWithHttpInfo($confirmation_password)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation disconnectCurrentClientAsyncWithHttpInfo
     *
     * Disconnect the current access client
     *
     * @param  string $confirmation_password The password used to confirm this action, if needed. The actual password type, if any, depends on the Cyclos configuration for the current channel. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function disconnectCurrentClientAsyncWithHttpInfo($confirmation_password = null)
    {
        $returnType = '';
        $request = $this->disconnectCurrentClientRequest($confirmation_password);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'disconnectCurrentClient'
     *
     * @param  string $confirmation_password The password used to confirm this action, if needed. The actual password type, if any, depends on the Cyclos configuration for the current channel. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function disconnectCurrentClientRequest($confirmation_password = null)
    {

        $resourcePath = '/auth/access-client';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($confirmation_password !== null) {
            $headerParams['confirmationPassword'] = ObjectSerializer::toHeaderValue($confirmation_password);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation forgottenPasswordRequest
     *
     * Requests a forgotten password, notifying the user with instructions to reset it
     *
     * @param  \Cyclos\Api\Model\ForgottenPasswordRequest $body The parameters for requesting a forgotten password reset (required)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function forgottenPasswordRequest($body)
    {
        $this->forgottenPasswordRequestWithHttpInfo($body);
    }

    /**
     * Operation forgottenPasswordRequestWithHttpInfo
     *
     * Requests a forgotten password, notifying the user with instructions to reset it
     *
     * @param  \Cyclos\Api\Model\ForgottenPasswordRequest $body The parameters for requesting a forgotten password reset (required)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function forgottenPasswordRequestWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->forgottenPasswordRequestRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation forgottenPasswordRequestAsync
     *
     * Requests a forgotten password, notifying the user with instructions to reset it
     *
     * @param  \Cyclos\Api\Model\ForgottenPasswordRequest $body The parameters for requesting a forgotten password reset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forgottenPasswordRequestAsync($body)
    {
        return $this->forgottenPasswordRequestAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation forgottenPasswordRequestAsyncWithHttpInfo
     *
     * Requests a forgotten password, notifying the user with instructions to reset it
     *
     * @param  \Cyclos\Api\Model\ForgottenPasswordRequest $body The parameters for requesting a forgotten password reset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function forgottenPasswordRequestAsyncWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->forgottenPasswordRequestRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'forgottenPasswordRequest'
     *
     * @param  \Cyclos\Api\Model\ForgottenPasswordRequest $body The parameters for requesting a forgotten password reset (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function forgottenPasswordRequestRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling forgottenPasswordRequest'
            );
        }

        $resourcePath = '/auth/forgotten-password/request';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCurrentAuth
     *
     * Returns data about the currently authenticated user
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cyclos\Api\Model\Auth
     */
    public function getCurrentAuth($fields = null)
    {
        list($response) = $this->getCurrentAuthWithHttpInfo($fields);
        return $response;
    }

    /**
     * Operation getCurrentAuthWithHttpInfo
     *
     * Returns data about the currently authenticated user
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cyclos\Api\Model\Auth, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCurrentAuthWithHttpInfo($fields = null)
    {
        $returnType = '\Cyclos\Api\Model\Auth';
        $request = $this->getCurrentAuthRequest($fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\Auth',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCurrentAuthAsync
     *
     * Returns data about the currently authenticated user
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCurrentAuthAsync($fields = null)
    {
        return $this->getCurrentAuthAsyncWithHttpInfo($fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCurrentAuthAsyncWithHttpInfo
     *
     * Returns data about the currently authenticated user
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCurrentAuthAsyncWithHttpInfo($fields = null)
    {
        $returnType = '\Cyclos\Api\Model\Auth';
        $request = $this->getCurrentAuthRequest($fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCurrentAuth'
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCurrentAuthRequest($fields = null)
    {

        $resourcePath = '/auth';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDataForChangeForgottenPassword
     *
     * Returns configuration data used to change a forgotten password after the initial request
     *
     * @param  string $key The validation key which was sent by e-mail to the user (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cyclos\Api\Model\DataForChangeForgottenPassword
     */
    public function getDataForChangeForgottenPassword($key, $fields = null)
    {
        list($response) = $this->getDataForChangeForgottenPasswordWithHttpInfo($key, $fields);
        return $response;
    }

    /**
     * Operation getDataForChangeForgottenPasswordWithHttpInfo
     *
     * Returns configuration data used to change a forgotten password after the initial request
     *
     * @param  string $key The validation key which was sent by e-mail to the user (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cyclos\Api\Model\DataForChangeForgottenPassword, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDataForChangeForgottenPasswordWithHttpInfo($key, $fields = null)
    {
        $returnType = '\Cyclos\Api\Model\DataForChangeForgottenPassword';
        $request = $this->getDataForChangeForgottenPasswordRequest($key, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\DataForChangeForgottenPassword',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDataForChangeForgottenPasswordAsync
     *
     * Returns configuration data used to change a forgotten password after the initial request
     *
     * @param  string $key The validation key which was sent by e-mail to the user (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDataForChangeForgottenPasswordAsync($key, $fields = null)
    {
        return $this->getDataForChangeForgottenPasswordAsyncWithHttpInfo($key, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDataForChangeForgottenPasswordAsyncWithHttpInfo
     *
     * Returns configuration data used to change a forgotten password after the initial request
     *
     * @param  string $key The validation key which was sent by e-mail to the user (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDataForChangeForgottenPasswordAsyncWithHttpInfo($key, $fields = null)
    {
        $returnType = '\Cyclos\Api\Model\DataForChangeForgottenPassword';
        $request = $this->getDataForChangeForgottenPasswordRequest($key, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDataForChangeForgottenPassword'
     *
     * @param  string $key The validation key which was sent by e-mail to the user (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDataForChangeForgottenPasswordRequest($key, $fields = null)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling getDataForChangeForgottenPassword'
            );
        }

        $resourcePath = '/auth/forgotten-password/data-for-change';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($key !== null) {
            $queryParams['key'] = ObjectSerializer::toQueryValue($key);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDataForLogin
     *
     * Returns data containing the configuration for logging-in
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $device_id Trusted device identification. If given and the device is active then a pending device confirmation will be created that will be validated after the user logs-in. If the validation passes then no confirmation password will be used only for that session. (optional)
     * @param  string $pin_id Device PIN identification. If given then the information about whether it is active or not will be given in the returned &#x60;dataForLogin&#x60;. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cyclos\Api\Model\DataForLogin
     */
    public function getDataForLogin($fields = null, $device_id = null, $pin_id = null)
    {
        list($response) = $this->getDataForLoginWithHttpInfo($fields, $device_id, $pin_id);
        return $response;
    }

    /**
     * Operation getDataForLoginWithHttpInfo
     *
     * Returns data containing the configuration for logging-in
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $device_id Trusted device identification. If given and the device is active then a pending device confirmation will be created that will be validated after the user logs-in. If the validation passes then no confirmation password will be used only for that session. (optional)
     * @param  string $pin_id Device PIN identification. If given then the information about whether it is active or not will be given in the returned &#x60;dataForLogin&#x60;. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cyclos\Api\Model\DataForLogin, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDataForLoginWithHttpInfo($fields = null, $device_id = null, $pin_id = null)
    {
        $returnType = '\Cyclos\Api\Model\DataForLogin';
        $request = $this->getDataForLoginRequest($fields, $device_id, $pin_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\DataForLogin',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDataForLoginAsync
     *
     * Returns data containing the configuration for logging-in
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $device_id Trusted device identification. If given and the device is active then a pending device confirmation will be created that will be validated after the user logs-in. If the validation passes then no confirmation password will be used only for that session. (optional)
     * @param  string $pin_id Device PIN identification. If given then the information about whether it is active or not will be given in the returned &#x60;dataForLogin&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDataForLoginAsync($fields = null, $device_id = null, $pin_id = null)
    {
        return $this->getDataForLoginAsyncWithHttpInfo($fields, $device_id, $pin_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDataForLoginAsyncWithHttpInfo
     *
     * Returns data containing the configuration for logging-in
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $device_id Trusted device identification. If given and the device is active then a pending device confirmation will be created that will be validated after the user logs-in. If the validation passes then no confirmation password will be used only for that session. (optional)
     * @param  string $pin_id Device PIN identification. If given then the information about whether it is active or not will be given in the returned &#x60;dataForLogin&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDataForLoginAsyncWithHttpInfo($fields = null, $device_id = null, $pin_id = null)
    {
        $returnType = '\Cyclos\Api\Model\DataForLogin';
        $request = $this->getDataForLoginRequest($fields, $device_id, $pin_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDataForLogin'
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $device_id Trusted device identification. If given and the device is active then a pending device confirmation will be created that will be validated after the user logs-in. If the validation passes then no confirmation password will be used only for that session. (optional)
     * @param  string $pin_id Device PIN identification. If given then the information about whether it is active or not will be given in the returned &#x60;dataForLogin&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDataForLoginRequest($fields = null, $device_id = null, $pin_id = null)
    {

        $resourcePath = '/auth/data-for-login';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($device_id !== null) {
            $queryParams['deviceId'] = ObjectSerializer::toQueryValue($device_id);
        }
        // query params
        if ($pin_id !== null) {
            $queryParams['pinId'] = ObjectSerializer::toQueryValue($pin_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSecondaryPasswordInput
     *
     * Returns the data for a secondary access password input
     *
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cyclos\Api\Model\PasswordInput
     */
    public function getSecondaryPasswordInput()
    {
        list($response) = $this->getSecondaryPasswordInputWithHttpInfo();
        return $response;
    }

    /**
     * Operation getSecondaryPasswordInputWithHttpInfo
     *
     * Returns the data for a secondary access password input
     *
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cyclos\Api\Model\PasswordInput, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSecondaryPasswordInputWithHttpInfo()
    {
        $returnType = '\Cyclos\Api\Model\PasswordInput';
        $request = $this->getSecondaryPasswordInputRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\PasswordInput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSecondaryPasswordInputAsync
     *
     * Returns the data for a secondary access password input
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSecondaryPasswordInputAsync()
    {
        return $this->getSecondaryPasswordInputAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSecondaryPasswordInputAsyncWithHttpInfo
     *
     * Returns the data for a secondary access password input
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSecondaryPasswordInputAsyncWithHttpInfo()
    {
        $returnType = '\Cyclos\Api\Model\PasswordInput';
        $request = $this->getSecondaryPasswordInputRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSecondaryPasswordInput'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSecondaryPasswordInputRequest()
    {

        $resourcePath = '/auth/session/secondary-password';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation login
     *
     * Logs-in the currently authenticated user
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  bool $cookie If true then the server adds the &#x60;Session-Token&#x60; cookie to the response containing only the second half of the session token. The returned &#x60;sessionToken&#x60; field will contain the first half. (optional)
     * @param  int $timeout_in_seconds The timeout in seconds for the created session. If this value is not given or it is greater than that for the channel then the timeout for the channel will be used. (optional)
     * @param  string $device_confirmation_id The id of the confirmation (returned in the DataForLogin) (optional)
     * @param  string $device_id The id of the device used to confirm the session as trusted. (optional)
     * @param  string $hmac The HMAC-SHA256 calculated for the QR-code of the confirmation using the secret key stored in the device. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cyclos\Api\Model\Auth
     */
    public function login($fields = null, $cookie = null, $timeout_in_seconds = null, $device_confirmation_id = null, $device_id = null, $hmac = null)
    {
        list($response) = $this->loginWithHttpInfo($fields, $cookie, $timeout_in_seconds, $device_confirmation_id, $device_id, $hmac);
        return $response;
    }

    /**
     * Operation loginWithHttpInfo
     *
     * Logs-in the currently authenticated user
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  bool $cookie If true then the server adds the &#x60;Session-Token&#x60; cookie to the response containing only the second half of the session token. The returned &#x60;sessionToken&#x60; field will contain the first half. (optional)
     * @param  int $timeout_in_seconds The timeout in seconds for the created session. If this value is not given or it is greater than that for the channel then the timeout for the channel will be used. (optional)
     * @param  string $device_confirmation_id The id of the confirmation (returned in the DataForLogin) (optional)
     * @param  string $device_id The id of the device used to confirm the session as trusted. (optional)
     * @param  string $hmac The HMAC-SHA256 calculated for the QR-code of the confirmation using the secret key stored in the device. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cyclos\Api\Model\Auth, HTTP status code, HTTP response headers (array of strings)
     */
    public function loginWithHttpInfo($fields = null, $cookie = null, $timeout_in_seconds = null, $device_confirmation_id = null, $device_id = null, $hmac = null)
    {
        $returnType = '\Cyclos\Api\Model\Auth';
        $request = $this->loginRequest($fields, $cookie, $timeout_in_seconds, $device_confirmation_id, $device_id, $hmac);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\Auth',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation loginAsync
     *
     * Logs-in the currently authenticated user
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  bool $cookie If true then the server adds the &#x60;Session-Token&#x60; cookie to the response containing only the second half of the session token. The returned &#x60;sessionToken&#x60; field will contain the first half. (optional)
     * @param  int $timeout_in_seconds The timeout in seconds for the created session. If this value is not given or it is greater than that for the channel then the timeout for the channel will be used. (optional)
     * @param  string $device_confirmation_id The id of the confirmation (returned in the DataForLogin) (optional)
     * @param  string $device_id The id of the device used to confirm the session as trusted. (optional)
     * @param  string $hmac The HMAC-SHA256 calculated for the QR-code of the confirmation using the secret key stored in the device. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loginAsync($fields = null, $cookie = null, $timeout_in_seconds = null, $device_confirmation_id = null, $device_id = null, $hmac = null)
    {
        return $this->loginAsyncWithHttpInfo($fields, $cookie, $timeout_in_seconds, $device_confirmation_id, $device_id, $hmac)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation loginAsyncWithHttpInfo
     *
     * Logs-in the currently authenticated user
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  bool $cookie If true then the server adds the &#x60;Session-Token&#x60; cookie to the response containing only the second half of the session token. The returned &#x60;sessionToken&#x60; field will contain the first half. (optional)
     * @param  int $timeout_in_seconds The timeout in seconds for the created session. If this value is not given or it is greater than that for the channel then the timeout for the channel will be used. (optional)
     * @param  string $device_confirmation_id The id of the confirmation (returned in the DataForLogin) (optional)
     * @param  string $device_id The id of the device used to confirm the session as trusted. (optional)
     * @param  string $hmac The HMAC-SHA256 calculated for the QR-code of the confirmation using the secret key stored in the device. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loginAsyncWithHttpInfo($fields = null, $cookie = null, $timeout_in_seconds = null, $device_confirmation_id = null, $device_id = null, $hmac = null)
    {
        $returnType = '\Cyclos\Api\Model\Auth';
        $request = $this->loginRequest($fields, $cookie, $timeout_in_seconds, $device_confirmation_id, $device_id, $hmac);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'login'
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  bool $cookie If true then the server adds the &#x60;Session-Token&#x60; cookie to the response containing only the second half of the session token. The returned &#x60;sessionToken&#x60; field will contain the first half. (optional)
     * @param  int $timeout_in_seconds The timeout in seconds for the created session. If this value is not given or it is greater than that for the channel then the timeout for the channel will be used. (optional)
     * @param  string $device_confirmation_id The id of the confirmation (returned in the DataForLogin) (optional)
     * @param  string $device_id The id of the device used to confirm the session as trusted. (optional)
     * @param  string $hmac The HMAC-SHA256 calculated for the QR-code of the confirmation using the secret key stored in the device. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function loginRequest($fields = null, $cookie = null, $timeout_in_seconds = null, $device_confirmation_id = null, $device_id = null, $hmac = null)
    {

        $resourcePath = '/auth/session';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($cookie !== null) {
            $queryParams['cookie'] = ObjectSerializer::toQueryValue($cookie);
        }
        // query params
        if ($timeout_in_seconds !== null) {
            $queryParams['timeoutInSeconds'] = ObjectSerializer::toQueryValue($timeout_in_seconds);
        }
        // query params
        if ($device_confirmation_id !== null) {
            $queryParams['deviceConfirmationId'] = ObjectSerializer::toQueryValue($device_confirmation_id);
        }
        // query params
        if ($device_id !== null) {
            $queryParams['deviceId'] = ObjectSerializer::toQueryValue($device_id);
        }
        // query params
        if ($hmac !== null) {
            $queryParams['hmac'] = ObjectSerializer::toQueryValue($hmac);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation logout
     *
     * Log-out the current session
     *
     * @param  bool $cookie If true then the server adds the &#x60;Session-Token&#x60; cookie to the response containing only the second half of the session token. The returned &#x60;sessionToken&#x60; field will contain the first half. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function logout($cookie = null)
    {
        $this->logoutWithHttpInfo($cookie);
    }

    /**
     * Operation logoutWithHttpInfo
     *
     * Log-out the current session
     *
     * @param  bool $cookie If true then the server adds the &#x60;Session-Token&#x60; cookie to the response containing only the second half of the session token. The returned &#x60;sessionToken&#x60; field will contain the first half. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function logoutWithHttpInfo($cookie = null)
    {
        $returnType = '';
        $request = $this->logoutRequest($cookie);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\ConflictError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation logoutAsync
     *
     * Log-out the current session
     *
     * @param  bool $cookie If true then the server adds the &#x60;Session-Token&#x60; cookie to the response containing only the second half of the session token. The returned &#x60;sessionToken&#x60; field will contain the first half. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function logoutAsync($cookie = null)
    {
        return $this->logoutAsyncWithHttpInfo($cookie)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation logoutAsyncWithHttpInfo
     *
     * Log-out the current session
     *
     * @param  bool $cookie If true then the server adds the &#x60;Session-Token&#x60; cookie to the response containing only the second half of the session token. The returned &#x60;sessionToken&#x60; field will contain the first half. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function logoutAsyncWithHttpInfo($cookie = null)
    {
        $returnType = '';
        $request = $this->logoutRequest($cookie);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'logout'
     *
     * @param  bool $cookie If true then the server adds the &#x60;Session-Token&#x60; cookie to the response containing only the second half of the session token. The returned &#x60;sessionToken&#x60; field will contain the first half. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function logoutRequest($cookie = null)
    {

        $resourcePath = '/auth/session';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cookie !== null) {
            $queryParams['cookie'] = ObjectSerializer::toQueryValue($cookie);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation newOtp
     *
     * Generates a new One-Time-Password (OTP) for the authenticated user
     *
     * @param  \Cyclos\Api\Model\SendMediumEnum $medium The medium the user wants to receive the OTP (required)
     * @param  string $otp_channel The channel name in which the OTP will be used to confirm the operation. Please do not confuse with the parameter used to specify the channel through the client is connecting with Cyclos. The configuration for the given channel will be used to validate the request. E.g. when confirming an easy invoice / ticket through a custom front using a channel other than &#x60;easyInvoice&#x60; / &#x60;ticket&#x60; then the channel &#x60;easyInvoice&#x60; / &#x60;ticket&#x60; must be set at the moment of requesting an OTP. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function newOtp($medium, $otp_channel = null)
    {
        list($response) = $this->newOtpWithHttpInfo($medium, $otp_channel);
        return $response;
    }

    /**
     * Operation newOtpWithHttpInfo
     *
     * Generates a new One-Time-Password (OTP) for the authenticated user
     *
     * @param  \Cyclos\Api\Model\SendMediumEnum $medium The medium the user wants to receive the OTP (required)
     * @param  string $otp_channel The channel name in which the OTP will be used to confirm the operation. Please do not confuse with the parameter used to specify the channel through the client is connecting with Cyclos. The configuration for the given channel will be used to validate the request. E.g. when confirming an easy invoice / ticket through a custom front using a channel other than &#x60;easyInvoice&#x60; / &#x60;ticket&#x60; then the channel &#x60;easyInvoice&#x60; / &#x60;ticket&#x60; must be set at the moment of requesting an OTP. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function newOtpWithHttpInfo($medium, $otp_channel = null)
    {
        $returnType = 'string[]';
        $request = $this->newOtpRequest($medium, $otp_channel);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\InputError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\OtpError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation newOtpAsync
     *
     * Generates a new One-Time-Password (OTP) for the authenticated user
     *
     * @param  \Cyclos\Api\Model\SendMediumEnum $medium The medium the user wants to receive the OTP (required)
     * @param  string $otp_channel The channel name in which the OTP will be used to confirm the operation. Please do not confuse with the parameter used to specify the channel through the client is connecting with Cyclos. The configuration for the given channel will be used to validate the request. E.g. when confirming an easy invoice / ticket through a custom front using a channel other than &#x60;easyInvoice&#x60; / &#x60;ticket&#x60; then the channel &#x60;easyInvoice&#x60; / &#x60;ticket&#x60; must be set at the moment of requesting an OTP. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function newOtpAsync($medium, $otp_channel = null)
    {
        return $this->newOtpAsyncWithHttpInfo($medium, $otp_channel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation newOtpAsyncWithHttpInfo
     *
     * Generates a new One-Time-Password (OTP) for the authenticated user
     *
     * @param  \Cyclos\Api\Model\SendMediumEnum $medium The medium the user wants to receive the OTP (required)
     * @param  string $otp_channel The channel name in which the OTP will be used to confirm the operation. Please do not confuse with the parameter used to specify the channel through the client is connecting with Cyclos. The configuration for the given channel will be used to validate the request. E.g. when confirming an easy invoice / ticket through a custom front using a channel other than &#x60;easyInvoice&#x60; / &#x60;ticket&#x60; then the channel &#x60;easyInvoice&#x60; / &#x60;ticket&#x60; must be set at the moment of requesting an OTP. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function newOtpAsyncWithHttpInfo($medium, $otp_channel = null)
    {
        $returnType = 'string[]';
        $request = $this->newOtpRequest($medium, $otp_channel);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'newOtp'
     *
     * @param  \Cyclos\Api\Model\SendMediumEnum $medium The medium the user wants to receive the OTP (required)
     * @param  string $otp_channel The channel name in which the OTP will be used to confirm the operation. Please do not confuse with the parameter used to specify the channel through the client is connecting with Cyclos. The configuration for the given channel will be used to validate the request. E.g. when confirming an easy invoice / ticket through a custom front using a channel other than &#x60;easyInvoice&#x60; / &#x60;ticket&#x60; then the channel &#x60;easyInvoice&#x60; / &#x60;ticket&#x60; must be set at the moment of requesting an OTP. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function newOtpRequest($medium, $otp_channel = null)
    {
        // verify the required parameter 'medium' is set
        if ($medium === null || (is_array($medium) && count($medium) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $medium when calling newOtp'
            );
        }

        $resourcePath = '/auth/otp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($otp_channel !== null) {
            $queryParams['otpChannel'] = ObjectSerializer::toQueryValue($otp_channel);
        }
        // query params
        if ($medium !== null) {
            $queryParams['medium'] = ObjectSerializer::toQueryValue($medium);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation replaceSession
     *
     * Replaces a session token previously obtained
     *
     * @param  string $session_token The full session token obtained externally (required)
     * @param  bool $cookie If true then the server adds the &#x60;Session-Token&#x60; cookie to the response containing only the second half of the session token. The returned &#x60;sessionToken&#x60; field will contain the first half. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function replaceSession($session_token, $cookie = null)
    {
        list($response) = $this->replaceSessionWithHttpInfo($session_token, $cookie);
        return $response;
    }

    /**
     * Operation replaceSessionWithHttpInfo
     *
     * Replaces a session token previously obtained
     *
     * @param  string $session_token The full session token obtained externally (required)
     * @param  bool $cookie If true then the server adds the &#x60;Session-Token&#x60; cookie to the response containing only the second half of the session token. The returned &#x60;sessionToken&#x60; field will contain the first half. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceSessionWithHttpInfo($session_token, $cookie = null)
    {
        $returnType = 'string';
        $request = $this->replaceSessionRequest($session_token, $cookie);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation replaceSessionAsync
     *
     * Replaces a session token previously obtained
     *
     * @param  string $session_token The full session token obtained externally (required)
     * @param  bool $cookie If true then the server adds the &#x60;Session-Token&#x60; cookie to the response containing only the second half of the session token. The returned &#x60;sessionToken&#x60; field will contain the first half. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceSessionAsync($session_token, $cookie = null)
    {
        return $this->replaceSessionAsyncWithHttpInfo($session_token, $cookie)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation replaceSessionAsyncWithHttpInfo
     *
     * Replaces a session token previously obtained
     *
     * @param  string $session_token The full session token obtained externally (required)
     * @param  bool $cookie If true then the server adds the &#x60;Session-Token&#x60; cookie to the response containing only the second half of the session token. The returned &#x60;sessionToken&#x60; field will contain the first half. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceSessionAsyncWithHttpInfo($session_token, $cookie = null)
    {
        $returnType = 'string';
        $request = $this->replaceSessionRequest($session_token, $cookie);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'replaceSession'
     *
     * @param  string $session_token The full session token obtained externally (required)
     * @param  bool $cookie If true then the server adds the &#x60;Session-Token&#x60; cookie to the response containing only the second half of the session token. The returned &#x60;sessionToken&#x60; field will contain the first half. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function replaceSessionRequest($session_token, $cookie = null)
    {
        // verify the required parameter 'session_token' is set
        if ($session_token === null || (is_array($session_token) && count($session_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_token when calling replaceSession'
            );
        }

        $resourcePath = '/auth/session/replace/{sessionToken}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cookie !== null) {
            $queryParams['cookie'] = ObjectSerializer::toQueryValue($cookie);
        }

        // path params
        if ($session_token !== null) {
            $resourcePath = str_replace(
                '{' . 'sessionToken' . '}',
                ObjectSerializer::toPathValue($session_token),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation validateSecondaryPassword
     *
     * Validates the current pending session
     *
     * @param  string $body The secondary access password (required)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function validateSecondaryPassword($body)
    {
        $this->validateSecondaryPasswordWithHttpInfo($body);
    }

    /**
     * Operation validateSecondaryPasswordWithHttpInfo
     *
     * Validates the current pending session
     *
     * @param  string $body The secondary access password (required)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function validateSecondaryPasswordWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->validateSecondaryPasswordRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation validateSecondaryPasswordAsync
     *
     * Validates the current pending session
     *
     * @param  string $body The secondary access password (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateSecondaryPasswordAsync($body)
    {
        return $this->validateSecondaryPasswordAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation validateSecondaryPasswordAsyncWithHttpInfo
     *
     * Validates the current pending session
     *
     * @param  string $body The secondary access password (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateSecondaryPasswordAsyncWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->validateSecondaryPasswordRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'validateSecondaryPassword'
     *
     * @param  string $body The secondary access password (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function validateSecondaryPasswordRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling validateSecondaryPassword'
            );
        }

        $resourcePath = '/auth/session/secondary-password';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['text/plain']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
