<?php
/**
 * TransactionsApi
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Functions;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Cyclos\Api\ApiException;
use Cyclos\Api\Configuration;
use Cyclos\Api\HeaderSelector;
use Cyclos\Api\ObjectSerializer;

/**
 * TransactionsApi Class Doc Comment
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getTransactionsDataForSearch
     *
     * Returns data for searching transactions of an account owner
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cyclos\Api\Model\TransactionDataForSearch
     */
    public function getTransactionsDataForSearch($owner, $fields = null)
    {
        list($response) = $this->getTransactionsDataForSearchWithHttpInfo($owner, $fields);
        return $response;
    }

    /**
     * Operation getTransactionsDataForSearchWithHttpInfo
     *
     * Returns data for searching transactions of an account owner
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cyclos\Api\Model\TransactionDataForSearch, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionsDataForSearchWithHttpInfo($owner, $fields = null)
    {
        $returnType = '\Cyclos\Api\Model\TransactionDataForSearch';
        $request = $this->getTransactionsDataForSearchRequest($owner, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\TransactionDataForSearch',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionsDataForSearchAsync
     *
     * Returns data for searching transactions of an account owner
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsDataForSearchAsync($owner, $fields = null)
    {
        return $this->getTransactionsDataForSearchAsyncWithHttpInfo($owner, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionsDataForSearchAsyncWithHttpInfo
     *
     * Returns data for searching transactions of an account owner
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsDataForSearchAsyncWithHttpInfo($owner, $fields = null)
    {
        $returnType = '\Cyclos\Api\Model\TransactionDataForSearch';
        $request = $this->getTransactionsDataForSearchRequest($owner, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionsDataForSearch'
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTransactionsDataForSearchRequest($owner, $fields = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling getTransactionsDataForSearch'
            );
        }

        $resourcePath = '/{owner}/transactions/data-for-search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionsOverviewDataForSearch
     *
     * Returns data for searching transactions regardless of a owner
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  bool $pending_my_authorization When set to true will search for transactions which are currently pending authorization, and the authenticated user can authorize. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cyclos\Api\Model\TransactionOverviewDataForSearch
     */
    public function getTransactionsOverviewDataForSearch($fields = null, $pending_my_authorization = null)
    {
        list($response) = $this->getTransactionsOverviewDataForSearchWithHttpInfo($fields, $pending_my_authorization);
        return $response;
    }

    /**
     * Operation getTransactionsOverviewDataForSearchWithHttpInfo
     *
     * Returns data for searching transactions regardless of a owner
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  bool $pending_my_authorization When set to true will search for transactions which are currently pending authorization, and the authenticated user can authorize. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cyclos\Api\Model\TransactionOverviewDataForSearch, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionsOverviewDataForSearchWithHttpInfo($fields = null, $pending_my_authorization = null)
    {
        $returnType = '\Cyclos\Api\Model\TransactionOverviewDataForSearch';
        $request = $this->getTransactionsOverviewDataForSearchRequest($fields, $pending_my_authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\TransactionOverviewDataForSearch',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionsOverviewDataForSearchAsync
     *
     * Returns data for searching transactions regardless of a owner
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  bool $pending_my_authorization When set to true will search for transactions which are currently pending authorization, and the authenticated user can authorize. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsOverviewDataForSearchAsync($fields = null, $pending_my_authorization = null)
    {
        return $this->getTransactionsOverviewDataForSearchAsyncWithHttpInfo($fields, $pending_my_authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionsOverviewDataForSearchAsyncWithHttpInfo
     *
     * Returns data for searching transactions regardless of a owner
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  bool $pending_my_authorization When set to true will search for transactions which are currently pending authorization, and the authenticated user can authorize. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsOverviewDataForSearchAsyncWithHttpInfo($fields = null, $pending_my_authorization = null)
    {
        $returnType = '\Cyclos\Api\Model\TransactionOverviewDataForSearch';
        $request = $this->getTransactionsOverviewDataForSearchRequest($fields, $pending_my_authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionsOverviewDataForSearch'
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  bool $pending_my_authorization When set to true will search for transactions which are currently pending authorization, and the authenticated user can authorize. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTransactionsOverviewDataForSearchRequest($fields = null, $pending_my_authorization = null)
    {

        $resourcePath = '/transactions/data-for-search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($pending_my_authorization !== null) {
            $queryParams['pendingMyAuthorization'] = ObjectSerializer::toQueryValue($pending_my_authorization);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchTransactions
     *
     * Searches transactions of an account owner
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  string[] $account_types The account types (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \Cyclos\Api\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string $broker DEPRECATED: Use &#x60;brokers&#x60; instead. Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \Cyclos\Api\Model\TransferDirectionEnum $direction direction (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \Cyclos\Api\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \Cyclos\Api\Model\TransactionKind[] $kinds kinds (optional)
     * @param  \Cyclos\Api\Model\TransOrderByEnum $order_by order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \Cyclos\Api\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  \Cyclos\Api\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \Cyclos\Api\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#x27;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \Cyclos\Api\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cyclos\Api\Model\TransactionResult[]
     */
    public function searchTransactions($owner, $fields = null, $access_clients = null, $account_types = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $broker = null, $brokers = null, $by = null, $channels = null, $date_period = null, $direction = null, $excluded_ids = null, $external_payment_statuses = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_statuses = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null)
    {
        list($response) = $this->searchTransactionsWithHttpInfo($owner, $fields, $access_clients, $account_types, $amount_range, $authorization_performed_by, $authorization_statuses, $authorized, $broker, $brokers, $by, $channels, $date_period, $direction, $excluded_ids, $external_payment_statuses, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $payment_request_expiration, $payment_request_statuses, $recurring_payment_statuses, $scheduled_payment_statuses, $skip_total_count, $ticket_statuses, $transaction_number, $transfer_filters, $transfer_types, $user);
        return $response;
    }

    /**
     * Operation searchTransactionsWithHttpInfo
     *
     * Searches transactions of an account owner
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  string[] $account_types The account types (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \Cyclos\Api\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string $broker DEPRECATED: Use &#x60;brokers&#x60; instead. Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \Cyclos\Api\Model\TransferDirectionEnum $direction (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \Cyclos\Api\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \Cyclos\Api\Model\TransactionKind[] $kinds (optional)
     * @param  \Cyclos\Api\Model\TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \Cyclos\Api\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  \Cyclos\Api\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \Cyclos\Api\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#x27;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \Cyclos\Api\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cyclos\Api\Model\TransactionResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function searchTransactionsWithHttpInfo($owner, $fields = null, $access_clients = null, $account_types = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $broker = null, $brokers = null, $by = null, $channels = null, $date_period = null, $direction = null, $excluded_ids = null, $external_payment_statuses = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_statuses = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null)
    {
        $returnType = '\Cyclos\Api\Model\TransactionResult[]';
        $request = $this->searchTransactionsRequest($owner, $fields, $access_clients, $account_types, $amount_range, $authorization_performed_by, $authorization_statuses, $authorized, $broker, $brokers, $by, $channels, $date_period, $direction, $excluded_ids, $external_payment_statuses, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $payment_request_expiration, $payment_request_statuses, $recurring_payment_statuses, $scheduled_payment_statuses, $skip_total_count, $ticket_statuses, $transaction_number, $transfer_filters, $transfer_types, $user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\TransactionResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchTransactionsAsync
     *
     * Searches transactions of an account owner
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  string[] $account_types The account types (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \Cyclos\Api\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string $broker DEPRECATED: Use &#x60;brokers&#x60; instead. Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \Cyclos\Api\Model\TransferDirectionEnum $direction (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \Cyclos\Api\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \Cyclos\Api\Model\TransactionKind[] $kinds (optional)
     * @param  \Cyclos\Api\Model\TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \Cyclos\Api\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  \Cyclos\Api\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \Cyclos\Api\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#x27;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \Cyclos\Api\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTransactionsAsync($owner, $fields = null, $access_clients = null, $account_types = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $broker = null, $brokers = null, $by = null, $channels = null, $date_period = null, $direction = null, $excluded_ids = null, $external_payment_statuses = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_statuses = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null)
    {
        return $this->searchTransactionsAsyncWithHttpInfo($owner, $fields, $access_clients, $account_types, $amount_range, $authorization_performed_by, $authorization_statuses, $authorized, $broker, $brokers, $by, $channels, $date_period, $direction, $excluded_ids, $external_payment_statuses, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $payment_request_expiration, $payment_request_statuses, $recurring_payment_statuses, $scheduled_payment_statuses, $skip_total_count, $ticket_statuses, $transaction_number, $transfer_filters, $transfer_types, $user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchTransactionsAsyncWithHttpInfo
     *
     * Searches transactions of an account owner
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  string[] $account_types The account types (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \Cyclos\Api\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string $broker DEPRECATED: Use &#x60;brokers&#x60; instead. Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \Cyclos\Api\Model\TransferDirectionEnum $direction (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \Cyclos\Api\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \Cyclos\Api\Model\TransactionKind[] $kinds (optional)
     * @param  \Cyclos\Api\Model\TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \Cyclos\Api\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  \Cyclos\Api\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \Cyclos\Api\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#x27;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \Cyclos\Api\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTransactionsAsyncWithHttpInfo($owner, $fields = null, $access_clients = null, $account_types = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $broker = null, $brokers = null, $by = null, $channels = null, $date_period = null, $direction = null, $excluded_ids = null, $external_payment_statuses = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_statuses = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null)
    {
        $returnType = '\Cyclos\Api\Model\TransactionResult[]';
        $request = $this->searchTransactionsRequest($owner, $fields, $access_clients, $account_types, $amount_range, $authorization_performed_by, $authorization_statuses, $authorized, $broker, $brokers, $by, $channels, $date_period, $direction, $excluded_ids, $external_payment_statuses, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $payment_request_expiration, $payment_request_statuses, $recurring_payment_statuses, $scheduled_payment_statuses, $skip_total_count, $ticket_statuses, $transaction_number, $transfer_filters, $transfer_types, $user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchTransactions'
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  string[] $account_types The account types (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \Cyclos\Api\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string $broker DEPRECATED: Use &#x60;brokers&#x60; instead. Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \Cyclos\Api\Model\TransferDirectionEnum $direction (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \Cyclos\Api\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \Cyclos\Api\Model\TransactionKind[] $kinds (optional)
     * @param  \Cyclos\Api\Model\TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \Cyclos\Api\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  \Cyclos\Api\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \Cyclos\Api\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#x27;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \Cyclos\Api\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchTransactionsRequest($owner, $fields = null, $access_clients = null, $account_types = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $broker = null, $brokers = null, $by = null, $channels = null, $date_period = null, $direction = null, $excluded_ids = null, $external_payment_statuses = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_statuses = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling searchTransactions'
            );
        }

        $resourcePath = '/{owner}/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($access_clients !== null) {
            $queryParams['accessClients'] = ObjectSerializer::toQueryValue($access_clients);
        }
        // query params
        if ($account_types !== null) {
            $queryParams['accountTypes'] = ObjectSerializer::toQueryValue($account_types);
        }
        // query params
        if ($amount_range !== null) {
            $queryParams['amountRange'] = ObjectSerializer::toQueryValue($amount_range);
        }
        // query params
        if ($authorization_performed_by !== null) {
            $queryParams['authorizationPerformedBy'] = ObjectSerializer::toQueryValue($authorization_performed_by);
        }
        // query params
        if ($authorization_statuses !== null) {
            $queryParams['authorizationStatuses'] = ObjectSerializer::toQueryValue($authorization_statuses);
        }
        // query params
        if ($authorized !== null) {
            $queryParams['authorized'] = ObjectSerializer::toQueryValue($authorized);
        }
        // query params
        if ($broker !== null) {
            $queryParams['broker'] = ObjectSerializer::toQueryValue($broker);
        }
        // query params
        if ($brokers !== null) {
            $queryParams['brokers'] = ObjectSerializer::toQueryValue($brokers);
        }
        // query params
        if ($by !== null) {
            $queryParams['by'] = ObjectSerializer::toQueryValue($by);
        }
        // query params
        if ($channels !== null) {
            $queryParams['channels'] = ObjectSerializer::toQueryValue($channels);
        }
        // query params
        if ($date_period !== null) {
            $queryParams['datePeriod'] = ObjectSerializer::toQueryValue($date_period);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($excluded_ids !== null) {
            $queryParams['excludedIds'] = ObjectSerializer::toQueryValue($excluded_ids);
        }
        // query params
        if ($external_payment_statuses !== null) {
            $queryParams['externalPaymentStatuses'] = ObjectSerializer::toQueryValue($external_payment_statuses);
        }
        // query params
        if ($from_current_access_client !== null) {
            $queryParams['fromCurrentAccessClient'] = ObjectSerializer::toQueryValue($from_current_access_client);
        }
        // query params
        if ($groups !== null) {
            $queryParams['groups'] = ObjectSerializer::toQueryValue($groups);
        }
        // query params
        if ($include_generated_by_access_client !== null) {
            $queryParams['includeGeneratedByAccessClient'] = ObjectSerializer::toQueryValue($include_generated_by_access_client);
        }
        // query params
        if ($kinds !== null) {
            $queryParams['kinds'] = ObjectSerializer::toQueryValue($kinds);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['orderBy'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($payment_request_expiration !== null) {
            $queryParams['paymentRequestExpiration'] = ObjectSerializer::toQueryValue($payment_request_expiration);
        }
        // query params
        if ($payment_request_statuses !== null) {
            $queryParams['paymentRequestStatuses'] = ObjectSerializer::toQueryValue($payment_request_statuses);
        }
        // query params
        if ($recurring_payment_statuses !== null) {
            $queryParams['recurringPaymentStatuses'] = ObjectSerializer::toQueryValue($recurring_payment_statuses);
        }
        // query params
        if ($scheduled_payment_statuses !== null) {
            $queryParams['scheduledPaymentStatuses'] = ObjectSerializer::toQueryValue($scheduled_payment_statuses);
        }
        // query params
        if ($skip_total_count !== null) {
            $queryParams['skipTotalCount'] = ObjectSerializer::toQueryValue($skip_total_count);
        }
        // query params
        if ($ticket_statuses !== null) {
            $queryParams['ticketStatuses'] = ObjectSerializer::toQueryValue($ticket_statuses);
        }
        // query params
        if ($transaction_number !== null) {
            $queryParams['transactionNumber'] = ObjectSerializer::toQueryValue($transaction_number);
        }
        // query params
        if ($transfer_filters !== null) {
            $queryParams['transferFilters'] = ObjectSerializer::toQueryValue($transfer_filters);
        }
        // query params
        if ($transfer_types !== null) {
            $queryParams['transferTypes'] = ObjectSerializer::toQueryValue($transfer_types);
        }
        // query params
        if ($user !== null) {
            $queryParams['user'] = ObjectSerializer::toQueryValue($user);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchTransactionsOverview
     *
     * Searches transactions regardless of a owner
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \Cyclos\Api\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string $broker DEPRECATED: Use &#x60;brokers&#x60; instead. Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  string[] $currencies The currencies internal names or ids. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \Cyclos\Api\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  string[] $from_account_types The source account types internal names or ids. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \Cyclos\Api\Model\TransactionKind[] $kinds kinds (optional)
     * @param  \Cyclos\Api\Model\TransOrderByEnum $order_by order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \Cyclos\Api\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  bool $pending_my_authorization When set to true will only return transactions (&#x60;payment&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;) in pending authorization state that the logged user can authorize (optional)
     * @param  \Cyclos\Api\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \Cyclos\Api\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#x27;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \Cyclos\Api\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string[] $to_account_types The source account types internal names or ids. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cyclos\Api\Model\TransactionOverviewResult[]
     */
    public function searchTransactionsOverview($fields = null, $access_clients = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $broker = null, $brokers = null, $by = null, $channels = null, $currencies = null, $date_period = null, $excluded_ids = null, $external_payment_statuses = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $pending_my_authorization = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_statuses = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null)
    {
        list($response) = $this->searchTransactionsOverviewWithHttpInfo($fields, $access_clients, $amount_range, $authorization_performed_by, $authorization_statuses, $authorized, $broker, $brokers, $by, $channels, $currencies, $date_period, $excluded_ids, $external_payment_statuses, $from_account_types, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $payment_request_expiration, $payment_request_statuses, $pending_my_authorization, $recurring_payment_statuses, $scheduled_payment_statuses, $skip_total_count, $ticket_statuses, $to_account_types, $transaction_number, $transfer_filters, $transfer_types, $user);
        return $response;
    }

    /**
     * Operation searchTransactionsOverviewWithHttpInfo
     *
     * Searches transactions regardless of a owner
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \Cyclos\Api\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string $broker DEPRECATED: Use &#x60;brokers&#x60; instead. Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  string[] $currencies The currencies internal names or ids. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \Cyclos\Api\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  string[] $from_account_types The source account types internal names or ids. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \Cyclos\Api\Model\TransactionKind[] $kinds (optional)
     * @param  \Cyclos\Api\Model\TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \Cyclos\Api\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  bool $pending_my_authorization When set to true will only return transactions (&#x60;payment&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;) in pending authorization state that the logged user can authorize (optional)
     * @param  \Cyclos\Api\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \Cyclos\Api\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#x27;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \Cyclos\Api\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string[] $to_account_types The source account types internal names or ids. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cyclos\Api\Model\TransactionOverviewResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function searchTransactionsOverviewWithHttpInfo($fields = null, $access_clients = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $broker = null, $brokers = null, $by = null, $channels = null, $currencies = null, $date_period = null, $excluded_ids = null, $external_payment_statuses = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $pending_my_authorization = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_statuses = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null)
    {
        $returnType = '\Cyclos\Api\Model\TransactionOverviewResult[]';
        $request = $this->searchTransactionsOverviewRequest($fields, $access_clients, $amount_range, $authorization_performed_by, $authorization_statuses, $authorized, $broker, $brokers, $by, $channels, $currencies, $date_period, $excluded_ids, $external_payment_statuses, $from_account_types, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $payment_request_expiration, $payment_request_statuses, $pending_my_authorization, $recurring_payment_statuses, $scheduled_payment_statuses, $skip_total_count, $ticket_statuses, $to_account_types, $transaction_number, $transfer_filters, $transfer_types, $user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\TransactionOverviewResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchTransactionsOverviewAsync
     *
     * Searches transactions regardless of a owner
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \Cyclos\Api\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string $broker DEPRECATED: Use &#x60;brokers&#x60; instead. Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  string[] $currencies The currencies internal names or ids. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \Cyclos\Api\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  string[] $from_account_types The source account types internal names or ids. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \Cyclos\Api\Model\TransactionKind[] $kinds (optional)
     * @param  \Cyclos\Api\Model\TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \Cyclos\Api\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  bool $pending_my_authorization When set to true will only return transactions (&#x60;payment&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;) in pending authorization state that the logged user can authorize (optional)
     * @param  \Cyclos\Api\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \Cyclos\Api\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#x27;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \Cyclos\Api\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string[] $to_account_types The source account types internal names or ids. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTransactionsOverviewAsync($fields = null, $access_clients = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $broker = null, $brokers = null, $by = null, $channels = null, $currencies = null, $date_period = null, $excluded_ids = null, $external_payment_statuses = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $pending_my_authorization = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_statuses = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null)
    {
        return $this->searchTransactionsOverviewAsyncWithHttpInfo($fields, $access_clients, $amount_range, $authorization_performed_by, $authorization_statuses, $authorized, $broker, $brokers, $by, $channels, $currencies, $date_period, $excluded_ids, $external_payment_statuses, $from_account_types, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $payment_request_expiration, $payment_request_statuses, $pending_my_authorization, $recurring_payment_statuses, $scheduled_payment_statuses, $skip_total_count, $ticket_statuses, $to_account_types, $transaction_number, $transfer_filters, $transfer_types, $user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchTransactionsOverviewAsyncWithHttpInfo
     *
     * Searches transactions regardless of a owner
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \Cyclos\Api\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string $broker DEPRECATED: Use &#x60;brokers&#x60; instead. Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  string[] $currencies The currencies internal names or ids. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \Cyclos\Api\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  string[] $from_account_types The source account types internal names or ids. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \Cyclos\Api\Model\TransactionKind[] $kinds (optional)
     * @param  \Cyclos\Api\Model\TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \Cyclos\Api\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  bool $pending_my_authorization When set to true will only return transactions (&#x60;payment&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;) in pending authorization state that the logged user can authorize (optional)
     * @param  \Cyclos\Api\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \Cyclos\Api\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#x27;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \Cyclos\Api\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string[] $to_account_types The source account types internal names or ids. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTransactionsOverviewAsyncWithHttpInfo($fields = null, $access_clients = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $broker = null, $brokers = null, $by = null, $channels = null, $currencies = null, $date_period = null, $excluded_ids = null, $external_payment_statuses = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $pending_my_authorization = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_statuses = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null)
    {
        $returnType = '\Cyclos\Api\Model\TransactionOverviewResult[]';
        $request = $this->searchTransactionsOverviewRequest($fields, $access_clients, $amount_range, $authorization_performed_by, $authorization_statuses, $authorized, $broker, $brokers, $by, $channels, $currencies, $date_period, $excluded_ids, $external_payment_statuses, $from_account_types, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $payment_request_expiration, $payment_request_statuses, $pending_my_authorization, $recurring_payment_statuses, $scheduled_payment_statuses, $skip_total_count, $ticket_statuses, $to_account_types, $transaction_number, $transfer_filters, $transfer_types, $user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchTransactionsOverview'
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \Cyclos\Api\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string $broker DEPRECATED: Use &#x60;brokers&#x60; instead. Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  string[] $currencies The currencies internal names or ids. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \Cyclos\Api\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  string[] $from_account_types The source account types internal names or ids. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \Cyclos\Api\Model\TransactionKind[] $kinds (optional)
     * @param  \Cyclos\Api\Model\TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \Cyclos\Api\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  bool $pending_my_authorization When set to true will only return transactions (&#x60;payment&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;) in pending authorization state that the logged user can authorize (optional)
     * @param  \Cyclos\Api\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \Cyclos\Api\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#x27;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \Cyclos\Api\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string[] $to_account_types The source account types internal names or ids. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchTransactionsOverviewRequest($fields = null, $access_clients = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $broker = null, $brokers = null, $by = null, $channels = null, $currencies = null, $date_period = null, $excluded_ids = null, $external_payment_statuses = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $pending_my_authorization = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_statuses = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null)
    {

        $resourcePath = '/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($access_clients !== null) {
            $queryParams['accessClients'] = ObjectSerializer::toQueryValue($access_clients);
        }
        // query params
        if ($amount_range !== null) {
            $queryParams['amountRange'] = ObjectSerializer::toQueryValue($amount_range);
        }
        // query params
        if ($authorization_performed_by !== null) {
            $queryParams['authorizationPerformedBy'] = ObjectSerializer::toQueryValue($authorization_performed_by);
        }
        // query params
        if ($authorization_statuses !== null) {
            $queryParams['authorizationStatuses'] = ObjectSerializer::toQueryValue($authorization_statuses);
        }
        // query params
        if ($authorized !== null) {
            $queryParams['authorized'] = ObjectSerializer::toQueryValue($authorized);
        }
        // query params
        if ($broker !== null) {
            $queryParams['broker'] = ObjectSerializer::toQueryValue($broker);
        }
        // query params
        if ($brokers !== null) {
            $queryParams['brokers'] = ObjectSerializer::toQueryValue($brokers);
        }
        // query params
        if ($by !== null) {
            $queryParams['by'] = ObjectSerializer::toQueryValue($by);
        }
        // query params
        if ($channels !== null) {
            $queryParams['channels'] = ObjectSerializer::toQueryValue($channels);
        }
        // query params
        if ($currencies !== null) {
            $queryParams['currencies'] = ObjectSerializer::toQueryValue($currencies);
        }
        // query params
        if ($date_period !== null) {
            $queryParams['datePeriod'] = ObjectSerializer::toQueryValue($date_period);
        }
        // query params
        if ($excluded_ids !== null) {
            $queryParams['excludedIds'] = ObjectSerializer::toQueryValue($excluded_ids);
        }
        // query params
        if ($external_payment_statuses !== null) {
            $queryParams['externalPaymentStatuses'] = ObjectSerializer::toQueryValue($external_payment_statuses);
        }
        // query params
        if ($from_account_types !== null) {
            $queryParams['fromAccountTypes'] = ObjectSerializer::toQueryValue($from_account_types);
        }
        // query params
        if ($from_current_access_client !== null) {
            $queryParams['fromCurrentAccessClient'] = ObjectSerializer::toQueryValue($from_current_access_client);
        }
        // query params
        if ($groups !== null) {
            $queryParams['groups'] = ObjectSerializer::toQueryValue($groups);
        }
        // query params
        if ($include_generated_by_access_client !== null) {
            $queryParams['includeGeneratedByAccessClient'] = ObjectSerializer::toQueryValue($include_generated_by_access_client);
        }
        // query params
        if ($kinds !== null) {
            $queryParams['kinds'] = ObjectSerializer::toQueryValue($kinds);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['orderBy'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($payment_request_expiration !== null) {
            $queryParams['paymentRequestExpiration'] = ObjectSerializer::toQueryValue($payment_request_expiration);
        }
        // query params
        if ($payment_request_statuses !== null) {
            $queryParams['paymentRequestStatuses'] = ObjectSerializer::toQueryValue($payment_request_statuses);
        }
        // query params
        if ($pending_my_authorization !== null) {
            $queryParams['pendingMyAuthorization'] = ObjectSerializer::toQueryValue($pending_my_authorization);
        }
        // query params
        if ($recurring_payment_statuses !== null) {
            $queryParams['recurringPaymentStatuses'] = ObjectSerializer::toQueryValue($recurring_payment_statuses);
        }
        // query params
        if ($scheduled_payment_statuses !== null) {
            $queryParams['scheduledPaymentStatuses'] = ObjectSerializer::toQueryValue($scheduled_payment_statuses);
        }
        // query params
        if ($skip_total_count !== null) {
            $queryParams['skipTotalCount'] = ObjectSerializer::toQueryValue($skip_total_count);
        }
        // query params
        if ($ticket_statuses !== null) {
            $queryParams['ticketStatuses'] = ObjectSerializer::toQueryValue($ticket_statuses);
        }
        // query params
        if ($to_account_types !== null) {
            $queryParams['toAccountTypes'] = ObjectSerializer::toQueryValue($to_account_types);
        }
        // query params
        if ($transaction_number !== null) {
            $queryParams['transactionNumber'] = ObjectSerializer::toQueryValue($transaction_number);
        }
        // query params
        if ($transfer_filters !== null) {
            $queryParams['transferFilters'] = ObjectSerializer::toQueryValue($transfer_filters);
        }
        // query params
        if ($transfer_types !== null) {
            $queryParams['transferTypes'] = ObjectSerializer::toQueryValue($transfer_types);
        }
        // query params
        if ($user !== null) {
            $queryParams['user'] = ObjectSerializer::toQueryValue($user);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewTransaction
     *
     * Returns details about a transaction
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Cyclos\Api\Model\TransactionView
     */
    public function viewTransaction($key, $fields = null)
    {
        list($response) = $this->viewTransactionWithHttpInfo($key, $fields);
        return $response;
    }

    /**
     * Operation viewTransactionWithHttpInfo
     *
     * Returns details about a transaction
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \Cyclos\Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Cyclos\Api\Model\TransactionView, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewTransactionWithHttpInfo($key, $fields = null)
    {
        $returnType = '\Cyclos\Api\Model\TransactionView';
        $request = $this->viewTransactionRequest($key, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\TransactionView',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cyclos\Api\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewTransactionAsync
     *
     * Returns details about a transaction
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewTransactionAsync($key, $fields = null)
    {
        return $this->viewTransactionAsyncWithHttpInfo($key, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewTransactionAsyncWithHttpInfo
     *
     * Returns details about a transaction
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewTransactionAsyncWithHttpInfo($key, $fields = null)
    {
        $returnType = '\Cyclos\Api\Model\TransactionView';
        $request = $this->viewTransactionRequest($key, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewTransaction'
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function viewTransactionRequest($key, $fields = null)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling viewTransaction'
            );
        }

        $resourcePath = '/transactions/{key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'multi', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
