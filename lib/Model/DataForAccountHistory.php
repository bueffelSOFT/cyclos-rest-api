<?php
/**
 * DataForAccountHistory
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;
use \Cyclos\Api\ObjectSerializer;

/**
 * DataForAccountHistory Class Doc Comment
 *
 * @category Class
 * @description Contains data used to search the history of a given account
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DataForAccountHistory extends BaseTransferDataForSearch 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForAccountHistory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account' => '\Cyclos\Api\Model\AccountWithOwnerAndCurrency',
'access_clients' => '\Cyclos\Api\Model\EntityReference[]',
'operators' => '\Cyclos\Api\Model\User[]',
'transaction_number_mask' => 'string',
'can_filter_by_direction' => 'bool',
'show_description_in_filters' => 'bool',
'show_description_in_list' => 'bool',
'custom_fields_in_search' => '\Cyclos\Api\Model\CustomFieldDetailed[]',
'custom_fields_in_list' => '\Cyclos\Api\Model\CustomField[]',
'query' => ''    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account' => null,
'access_clients' => null,
'operators' => null,
'transaction_number_mask' => null,
'can_filter_by_direction' => null,
'show_description_in_filters' => null,
'show_description_in_list' => null,
'custom_fields_in_search' => null,
'custom_fields_in_list' => null,
'query' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account' => 'account',
'access_clients' => 'accessClients',
'operators' => 'operators',
'transaction_number_mask' => 'transactionNumberMask',
'can_filter_by_direction' => 'canFilterByDirection',
'show_description_in_filters' => 'showDescriptionInFilters',
'show_description_in_list' => 'showDescriptionInList',
'custom_fields_in_search' => 'customFieldsInSearch',
'custom_fields_in_list' => 'customFieldsInList',
'query' => 'query'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account' => 'setAccount',
'access_clients' => 'setAccessClients',
'operators' => 'setOperators',
'transaction_number_mask' => 'setTransactionNumberMask',
'can_filter_by_direction' => 'setCanFilterByDirection',
'show_description_in_filters' => 'setShowDescriptionInFilters',
'show_description_in_list' => 'setShowDescriptionInList',
'custom_fields_in_search' => 'setCustomFieldsInSearch',
'custom_fields_in_list' => 'setCustomFieldsInList',
'query' => 'setQuery'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account' => 'getAccount',
'access_clients' => 'getAccessClients',
'operators' => 'getOperators',
'transaction_number_mask' => 'getTransactionNumberMask',
'can_filter_by_direction' => 'getCanFilterByDirection',
'show_description_in_filters' => 'getShowDescriptionInFilters',
'show_description_in_list' => 'getShowDescriptionInList',
'custom_fields_in_search' => 'getCustomFieldsInSearch',
'custom_fields_in_list' => 'getCustomFieldsInList',
'query' => 'getQuery'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['access_clients'] = isset($data['access_clients']) ? $data['access_clients'] : null;
        $this->container['operators'] = isset($data['operators']) ? $data['operators'] : null;
        $this->container['transaction_number_mask'] = isset($data['transaction_number_mask']) ? $data['transaction_number_mask'] : null;
        $this->container['can_filter_by_direction'] = isset($data['can_filter_by_direction']) ? $data['can_filter_by_direction'] : null;
        $this->container['show_description_in_filters'] = isset($data['show_description_in_filters']) ? $data['show_description_in_filters'] : null;
        $this->container['show_description_in_list'] = isset($data['show_description_in_list']) ? $data['show_description_in_list'] : null;
        $this->container['custom_fields_in_search'] = isset($data['custom_fields_in_search']) ? $data['custom_fields_in_search'] : null;
        $this->container['custom_fields_in_list'] = isset($data['custom_fields_in_list']) ? $data['custom_fields_in_list'] : null;
        $this->container['query'] = isset($data['query']) ? $data['query'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account
     *
     * @return \Cyclos\Api\Model\AccountWithOwnerAndCurrency
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \Cyclos\Api\Model\AccountWithOwnerAndCurrency $account account
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets access_clients
     *
     * @return \Cyclos\Api\Model\EntityReference[]
     */
    public function getAccessClients()
    {
        return $this->container['access_clients'];
    }

    /**
     * Sets access_clients
     *
     * @param \Cyclos\Api\Model\EntityReference[] $access_clients References for access clients which can be used to filter entries by transfers generated by a specific access client
     *
     * @return $this
     */
    public function setAccessClients($access_clients)
    {
        $this->container['access_clients'] = $access_clients;

        return $this;
    }

    /**
     * Gets operators
     *
     * @return \Cyclos\Api\Model\User[]
     */
    public function getOperators()
    {
        return $this->container['operators'];
    }

    /**
     * Sets operators
     *
     * @param \Cyclos\Api\Model\User[] $operators References for operators, which can be used to filter entries by transfers performed or received by that specific operator
     *
     * @return $this
     */
    public function setOperators($operators)
    {
        $this->container['operators'] = $operators;

        return $this;
    }

    /**
     * Gets transaction_number_mask
     *
     * @return string
     */
    public function getTransactionNumberMask()
    {
        return $this->container['transaction_number_mask'];
    }

    /**
     * Sets transaction_number_mask
     *
     * @param string $transaction_number_mask If a transaction number is used for this account, is a pattern that represent it.
     *
     * @return $this
     */
    public function setTransactionNumberMask($transaction_number_mask)
    {
        $this->container['transaction_number_mask'] = $transaction_number_mask;

        return $this;
    }

    /**
     * Gets can_filter_by_direction
     *
     * @return bool
     */
    public function getCanFilterByDirection()
    {
        return $this->container['can_filter_by_direction'];
    }

    /**
     * Sets can_filter_by_direction
     *
     * @param bool $can_filter_by_direction Whether the current user can use the direction filter by direction. In some cases, such as restricted operators that can only see incoming or outgoing payments, this flag will be `false`.
     *
     * @return $this
     */
    public function setCanFilterByDirection($can_filter_by_direction)
    {
        $this->container['can_filter_by_direction'] = $can_filter_by_direction;

        return $this;
    }

    /**
     * Gets show_description_in_filters
     *
     * @return bool
     */
    public function getShowDescriptionInFilters()
    {
        return $this->container['show_description_in_filters'];
    }

    /**
     * Sets show_description_in_filters
     *
     * @param bool $show_description_in_filters Whether to show the description as filter or not
     *
     * @return $this
     */
    public function setShowDescriptionInFilters($show_description_in_filters)
    {
        $this->container['show_description_in_filters'] = $show_description_in_filters;

        return $this;
    }

    /**
     * Gets show_description_in_list
     *
     * @return bool
     */
    public function getShowDescriptionInList()
    {
        return $this->container['show_description_in_list'];
    }

    /**
     * Sets show_description_in_list
     *
     * @param bool $show_description_in_list Whether to show the description in the result list or not
     *
     * @return $this
     */
    public function setShowDescriptionInList($show_description_in_list)
    {
        $this->container['show_description_in_list'] = $show_description_in_list;

        return $this;
    }

    /**
     * Gets custom_fields_in_search
     *
     * @return \Cyclos\Api\Model\CustomFieldDetailed[]
     */
    public function getCustomFieldsInSearch()
    {
        return $this->container['custom_fields_in_search'];
    }

    /**
     * Sets custom_fields_in_search
     *
     * @param \Cyclos\Api\Model\CustomFieldDetailed[] $custom_fields_in_search Detailed references for custom fields that are set to be used as search filters
     *
     * @return $this
     */
    public function setCustomFieldsInSearch($custom_fields_in_search)
    {
        $this->container['custom_fields_in_search'] = $custom_fields_in_search;

        return $this;
    }

    /**
     * Gets custom_fields_in_list
     *
     * @return \Cyclos\Api\Model\CustomField[]
     */
    public function getCustomFieldsInList()
    {
        return $this->container['custom_fields_in_list'];
    }

    /**
     * Sets custom_fields_in_list
     *
     * @param \Cyclos\Api\Model\CustomField[] $custom_fields_in_list Simple references for custom fields that are set to be used on the search result list
     *
     * @return $this
     */
    public function setCustomFieldsInList($custom_fields_in_list)
    {
        $this->container['custom_fields_in_list'] = $custom_fields_in_list;

        return $this;
    }

    /**
     * Gets query
     *
     * @return 
     */
    public function getQuery()
    {
        return $this->container['query'];
    }

    /**
     * Sets query
     *
     * @param  $query Default query filters for the account history
     *
     * @return $this
     */
    public function setQuery($query)
    {
        $this->container['query'] = $query;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
