<?php
/**
 * AdView
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;
use \Cyclos\Api\ObjectSerializer;

/**
 * AdView Class Doc Comment
 *
 * @category Class
 * @description Detailed information when viewing an advertisement
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdView extends AdDetailed 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AdView';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'categories' => '\Cyclos\Api\Model\AdCategoryWithParent[]',
'custom_values' => '\Cyclos\Api\Model\CustomFieldValue[]',
'currency' => '\Cyclos\Api\Model\Currency',
'promotional_price' => 'float',
'promotional_period' => '',
'promotional_period_active' => 'bool',
'can_manage' => 'bool',
'can_edit' => 'bool',
'can_remove' => 'bool',
'can_buy' => 'bool',
'can_ask' => 'bool',
'can_hide' => 'bool',
'can_unhide' => 'bool',
'can_set_as_draft' => 'bool',
'can_request_authorization' => 'bool',
'can_approve' => 'bool',
'can_reject' => 'bool',
'questions_enabled' => 'bool',
'last_authorization_comments' => 'string',
'additional_images' => '\Cyclos\Api\Model\Image[]',
'user_addresses' => '\Cyclos\Api\Model\Address[]',
'ad_addresses' => '\Cyclos\Api\Model\Address[]',
'questions' => '\Cyclos\Api\Model\AdQuestionView[]',
'allow_decimal' => 'bool',
'delivery_methods' => '\Cyclos\Api\Model\DeliveryMethod[]',
'product_number' => 'string',
'operations' => '\Cyclos\Api\Model\Operation[]',
'hide_price' => 'bool',
'hide_owner' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'categories' => null,
'custom_values' => null,
'currency' => null,
'promotional_price' => 'number',
'promotional_period' => null,
'promotional_period_active' => null,
'can_manage' => null,
'can_edit' => null,
'can_remove' => null,
'can_buy' => null,
'can_ask' => null,
'can_hide' => null,
'can_unhide' => null,
'can_set_as_draft' => null,
'can_request_authorization' => null,
'can_approve' => null,
'can_reject' => null,
'questions_enabled' => null,
'last_authorization_comments' => null,
'additional_images' => null,
'user_addresses' => null,
'ad_addresses' => null,
'questions' => null,
'allow_decimal' => null,
'delivery_methods' => null,
'product_number' => null,
'operations' => null,
'hide_price' => null,
'hide_owner' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'categories' => 'categories',
'custom_values' => 'customValues',
'currency' => 'currency',
'promotional_price' => 'promotionalPrice',
'promotional_period' => 'promotionalPeriod',
'promotional_period_active' => 'promotionalPeriodActive',
'can_manage' => 'canManage',
'can_edit' => 'canEdit',
'can_remove' => 'canRemove',
'can_buy' => 'canBuy',
'can_ask' => 'canAsk',
'can_hide' => 'canHide',
'can_unhide' => 'canUnhide',
'can_set_as_draft' => 'canSetAsDraft',
'can_request_authorization' => 'canRequestAuthorization',
'can_approve' => 'canApprove',
'can_reject' => 'canReject',
'questions_enabled' => 'questionsEnabled',
'last_authorization_comments' => 'lastAuthorizationComments',
'additional_images' => 'additionalImages',
'user_addresses' => 'userAddresses',
'ad_addresses' => 'adAddresses',
'questions' => 'questions',
'allow_decimal' => 'allowDecimal',
'delivery_methods' => 'deliveryMethods',
'product_number' => 'productNumber',
'operations' => 'operations',
'hide_price' => 'hidePrice',
'hide_owner' => 'hideOwner'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'categories' => 'setCategories',
'custom_values' => 'setCustomValues',
'currency' => 'setCurrency',
'promotional_price' => 'setPromotionalPrice',
'promotional_period' => 'setPromotionalPeriod',
'promotional_period_active' => 'setPromotionalPeriodActive',
'can_manage' => 'setCanManage',
'can_edit' => 'setCanEdit',
'can_remove' => 'setCanRemove',
'can_buy' => 'setCanBuy',
'can_ask' => 'setCanAsk',
'can_hide' => 'setCanHide',
'can_unhide' => 'setCanUnhide',
'can_set_as_draft' => 'setCanSetAsDraft',
'can_request_authorization' => 'setCanRequestAuthorization',
'can_approve' => 'setCanApprove',
'can_reject' => 'setCanReject',
'questions_enabled' => 'setQuestionsEnabled',
'last_authorization_comments' => 'setLastAuthorizationComments',
'additional_images' => 'setAdditionalImages',
'user_addresses' => 'setUserAddresses',
'ad_addresses' => 'setAdAddresses',
'questions' => 'setQuestions',
'allow_decimal' => 'setAllowDecimal',
'delivery_methods' => 'setDeliveryMethods',
'product_number' => 'setProductNumber',
'operations' => 'setOperations',
'hide_price' => 'setHidePrice',
'hide_owner' => 'setHideOwner'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'categories' => 'getCategories',
'custom_values' => 'getCustomValues',
'currency' => 'getCurrency',
'promotional_price' => 'getPromotionalPrice',
'promotional_period' => 'getPromotionalPeriod',
'promotional_period_active' => 'getPromotionalPeriodActive',
'can_manage' => 'getCanManage',
'can_edit' => 'getCanEdit',
'can_remove' => 'getCanRemove',
'can_buy' => 'getCanBuy',
'can_ask' => 'getCanAsk',
'can_hide' => 'getCanHide',
'can_unhide' => 'getCanUnhide',
'can_set_as_draft' => 'getCanSetAsDraft',
'can_request_authorization' => 'getCanRequestAuthorization',
'can_approve' => 'getCanApprove',
'can_reject' => 'getCanReject',
'questions_enabled' => 'getQuestionsEnabled',
'last_authorization_comments' => 'getLastAuthorizationComments',
'additional_images' => 'getAdditionalImages',
'user_addresses' => 'getUserAddresses',
'ad_addresses' => 'getAdAddresses',
'questions' => 'getQuestions',
'allow_decimal' => 'getAllowDecimal',
'delivery_methods' => 'getDeliveryMethods',
'product_number' => 'getProductNumber',
'operations' => 'getOperations',
'hide_price' => 'getHidePrice',
'hide_owner' => 'getHideOwner'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['custom_values'] = isset($data['custom_values']) ? $data['custom_values'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['promotional_price'] = isset($data['promotional_price']) ? $data['promotional_price'] : null;
        $this->container['promotional_period'] = isset($data['promotional_period']) ? $data['promotional_period'] : null;
        $this->container['promotional_period_active'] = isset($data['promotional_period_active']) ? $data['promotional_period_active'] : null;
        $this->container['can_manage'] = isset($data['can_manage']) ? $data['can_manage'] : null;
        $this->container['can_edit'] = isset($data['can_edit']) ? $data['can_edit'] : null;
        $this->container['can_remove'] = isset($data['can_remove']) ? $data['can_remove'] : null;
        $this->container['can_buy'] = isset($data['can_buy']) ? $data['can_buy'] : null;
        $this->container['can_ask'] = isset($data['can_ask']) ? $data['can_ask'] : null;
        $this->container['can_hide'] = isset($data['can_hide']) ? $data['can_hide'] : null;
        $this->container['can_unhide'] = isset($data['can_unhide']) ? $data['can_unhide'] : null;
        $this->container['can_set_as_draft'] = isset($data['can_set_as_draft']) ? $data['can_set_as_draft'] : null;
        $this->container['can_request_authorization'] = isset($data['can_request_authorization']) ? $data['can_request_authorization'] : null;
        $this->container['can_approve'] = isset($data['can_approve']) ? $data['can_approve'] : null;
        $this->container['can_reject'] = isset($data['can_reject']) ? $data['can_reject'] : null;
        $this->container['questions_enabled'] = isset($data['questions_enabled']) ? $data['questions_enabled'] : null;
        $this->container['last_authorization_comments'] = isset($data['last_authorization_comments']) ? $data['last_authorization_comments'] : null;
        $this->container['additional_images'] = isset($data['additional_images']) ? $data['additional_images'] : null;
        $this->container['user_addresses'] = isset($data['user_addresses']) ? $data['user_addresses'] : null;
        $this->container['ad_addresses'] = isset($data['ad_addresses']) ? $data['ad_addresses'] : null;
        $this->container['questions'] = isset($data['questions']) ? $data['questions'] : null;
        $this->container['allow_decimal'] = isset($data['allow_decimal']) ? $data['allow_decimal'] : null;
        $this->container['delivery_methods'] = isset($data['delivery_methods']) ? $data['delivery_methods'] : null;
        $this->container['product_number'] = isset($data['product_number']) ? $data['product_number'] : null;
        $this->container['operations'] = isset($data['operations']) ? $data['operations'] : null;
        $this->container['hide_price'] = isset($data['hide_price']) ? $data['hide_price'] : null;
        $this->container['hide_owner'] = isset($data['hide_owner']) ? $data['hide_owner'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets categories
     *
     * @return \Cyclos\Api\Model\AdCategoryWithParent[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \Cyclos\Api\Model\AdCategoryWithParent[] $categories Either internal name or id of categories this advertisement belongs to. In most cases an advertisement will have a single category, but this depends on the Cyclos configuration.
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets custom_values
     *
     * @return \Cyclos\Api\Model\CustomFieldValue[]
     */
    public function getCustomValues()
    {
        return $this->container['custom_values'];
    }

    /**
     * Sets custom_values
     *
     * @param \Cyclos\Api\Model\CustomFieldValue[] $custom_values The list of custom field values this advertisement has
     *
     * @return $this
     */
    public function setCustomValues($custom_values)
    {
        $this->container['custom_values'] = $custom_values;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \Cyclos\Api\Model\Currency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Cyclos\Api\Model\Currency $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets promotional_price
     *
     * @return float
     */
    public function getPromotionalPrice()
    {
        return $this->container['promotional_price'];
    }

    /**
     * Sets promotional_price
     *
     * @param float $promotional_price The promotional price, to be applied on the promotional period is active
     *
     * @return $this
     */
    public function setPromotionalPrice($promotional_price)
    {
        $this->container['promotional_price'] = $promotional_price;

        return $this;
    }

    /**
     * Gets promotional_period
     *
     * @return 
     */
    public function getPromotionalPeriod()
    {
        return $this->container['promotional_period'];
    }

    /**
     * Sets promotional_period
     *
     * @param  $promotional_period The promotional period, the one when `promotionalPrice` is valid
     *
     * @return $this
     */
    public function setPromotionalPeriod($promotional_period)
    {
        $this->container['promotional_period'] = $promotional_period;

        return $this;
    }

    /**
     * Gets promotional_period_active
     *
     * @return bool
     */
    public function getPromotionalPeriodActive()
    {
        return $this->container['promotional_period_active'];
    }

    /**
     * Sets promotional_period_active
     *
     * @param bool $promotional_period_active Indicates whether the promotional period is active at the moment this data is returned
     *
     * @return $this
     */
    public function setPromotionalPeriodActive($promotional_period_active)
    {
        $this->container['promotional_period_active'] = $promotional_period_active;

        return $this;
    }

    /**
     * Gets can_manage
     *
     * @return bool
     */
    public function getCanManage()
    {
        return $this->container['can_manage'];
    }

    /**
     * Sets can_manage
     *
     * @param bool $can_manage Use `canEdit` or `canRemove` instead.   Indicates if the authenticated user manage this advertisement
     *
     * @return $this
     */
    public function setCanManage($can_manage)
    {
        $this->container['can_manage'] = $can_manage;

        return $this;
    }

    /**
     * Gets can_edit
     *
     * @return bool
     */
    public function getCanEdit()
    {
        return $this->container['can_edit'];
    }

    /**
     * Sets can_edit
     *
     * @param bool $can_edit Indicates if the authenticated user can edit this advertisement
     *
     * @return $this
     */
    public function setCanEdit($can_edit)
    {
        $this->container['can_edit'] = $can_edit;

        return $this;
    }

    /**
     * Gets can_remove
     *
     * @return bool
     */
    public function getCanRemove()
    {
        return $this->container['can_remove'];
    }

    /**
     * Sets can_remove
     *
     * @param bool $can_remove Indicates if the authenticated user can remove this advertisement. The owner of the ad with manage permissions can remove the advertisement regardless the ad status.
     *
     * @return $this
     */
    public function setCanRemove($can_remove)
    {
        $this->container['can_remove'] = $can_remove;

        return $this;
    }

    /**
     * Gets can_buy
     *
     * @return bool
     */
    public function getCanBuy()
    {
        return $this->container['can_buy'];
    }

    /**
     * Sets can_buy
     *
     * @param bool $can_buy Indicates if the authenticated user can buy this webshop ad.
     *
     * @return $this
     */
    public function setCanBuy($can_buy)
    {
        $this->container['can_buy'] = $can_buy;

        return $this;
    }

    /**
     * Gets can_ask
     *
     * @return bool
     */
    public function getCanAsk()
    {
        return $this->container['can_ask'];
    }

    /**
     * Sets can_ask
     *
     * @param bool $can_ask Indicates if the authenticated user can ask questions about this advertisement.
     *
     * @return $this
     */
    public function setCanAsk($can_ask)
    {
        $this->container['can_ask'] = $can_ask;

        return $this;
    }

    /**
     * Gets can_hide
     *
     * @return bool
     */
    public function getCanHide()
    {
        return $this->container['can_hide'];
    }

    /**
     * Sets can_hide
     *
     * @param bool $can_hide Indicates if the authenticated user can hide this advertisement.
     *
     * @return $this
     */
    public function setCanHide($can_hide)
    {
        $this->container['can_hide'] = $can_hide;

        return $this;
    }

    /**
     * Gets can_unhide
     *
     * @return bool
     */
    public function getCanUnhide()
    {
        return $this->container['can_unhide'];
    }

    /**
     * Sets can_unhide
     *
     * @param bool $can_unhide Indicates if the authenticated user can unhide this advertisement.
     *
     * @return $this
     */
    public function setCanUnhide($can_unhide)
    {
        $this->container['can_unhide'] = $can_unhide;

        return $this;
    }

    /**
     * Gets can_set_as_draft
     *
     * @return bool
     */
    public function getCanSetAsDraft()
    {
        return $this->container['can_set_as_draft'];
    }

    /**
     * Sets can_set_as_draft
     *
     * @param bool $can_set_as_draft Indicates if the authenticated user can set as draft an already authorized (published) advertisement.
     *
     * @return $this
     */
    public function setCanSetAsDraft($can_set_as_draft)
    {
        $this->container['can_set_as_draft'] = $can_set_as_draft;

        return $this;
    }

    /**
     * Gets can_request_authorization
     *
     * @return bool
     */
    public function getCanRequestAuthorization()
    {
        return $this->container['can_request_authorization'];
    }

    /**
     * Sets can_request_authorization
     *
     * @param bool $can_request_authorization Indicates if the authenticated user can request for authorization for this advertisement.
     *
     * @return $this
     */
    public function setCanRequestAuthorization($can_request_authorization)
    {
        $this->container['can_request_authorization'] = $can_request_authorization;

        return $this;
    }

    /**
     * Gets can_approve
     *
     * @return bool
     */
    public function getCanApprove()
    {
        return $this->container['can_approve'];
    }

    /**
     * Sets can_approve
     *
     * @param bool $can_approve Indicates if the authenticated user can authorize this advertisement (user managers only).
     *
     * @return $this
     */
    public function setCanApprove($can_approve)
    {
        $this->container['can_approve'] = $can_approve;

        return $this;
    }

    /**
     * Gets can_reject
     *
     * @return bool
     */
    public function getCanReject()
    {
        return $this->container['can_reject'];
    }

    /**
     * Sets can_reject
     *
     * @param bool $can_reject Indicates if the authenticated user can reject this advertisement (user managers only).
     *
     * @return $this
     */
    public function setCanReject($can_reject)
    {
        $this->container['can_reject'] = $can_reject;

        return $this;
    }

    /**
     * Gets questions_enabled
     *
     * @return bool
     */
    public function getQuestionsEnabled()
    {
        return $this->container['questions_enabled'];
    }

    /**
     * Sets questions_enabled
     *
     * @param bool $questions_enabled Indicates if the questions are anabled for the given advertisement.
     *
     * @return $this
     */
    public function setQuestionsEnabled($questions_enabled)
    {
        $this->container['questions_enabled'] = $questions_enabled;

        return $this;
    }

    /**
     * Gets last_authorization_comments
     *
     * @return string
     */
    public function getLastAuthorizationComments()
    {
        return $this->container['last_authorization_comments'];
    }

    /**
     * Sets last_authorization_comments
     *
     * @param string $last_authorization_comments The last comments set by a manager when rejecting or set as draft this advertisement. Only send if the advertisement requires authorization and the authenticated user can view the comments.
     *
     * @return $this
     */
    public function setLastAuthorizationComments($last_authorization_comments)
    {
        $this->container['last_authorization_comments'] = $last_authorization_comments;

        return $this;
    }

    /**
     * Gets additional_images
     *
     * @return \Cyclos\Api\Model\Image[]
     */
    public function getAdditionalImages()
    {
        return $this->container['additional_images'];
    }

    /**
     * Sets additional_images
     *
     * @param \Cyclos\Api\Model\Image[] $additional_images Holds the images other than the primary image, which is returned in the `image` field
     *
     * @return $this
     */
    public function setAdditionalImages($additional_images)
    {
        $this->container['additional_images'] = $additional_images;

        return $this;
    }

    /**
     * Gets user_addresses
     *
     * @return \Cyclos\Api\Model\Address[]
     */
    public function getUserAddresses()
    {
        return $this->container['user_addresses'];
    }

    /**
     * Sets user_addresses
     *
     * @param \Cyclos\Api\Model\Address[] $user_addresses The addresses (belonging to the advertisement's owner) where this  advertisement is available.
     *
     * @return $this
     */
    public function setUserAddresses($user_addresses)
    {
        $this->container['user_addresses'] = $user_addresses;

        return $this;
    }

    /**
     * Gets ad_addresses
     *
     * @return \Cyclos\Api\Model\Address[]
     */
    public function getAdAddresses()
    {
        return $this->container['ad_addresses'];
    }

    /**
     * Sets ad_addresses
     *
     * @param \Cyclos\Api\Model\Address[] $ad_addresses The custom addresses where this advertisement is available.
     *
     * @return $this
     */
    public function setAdAddresses($ad_addresses)
    {
        $this->container['ad_addresses'] = $ad_addresses;

        return $this;
    }

    /**
     * Gets questions
     *
     * @return \Cyclos\Api\Model\AdQuestionView[]
     */
    public function getQuestions()
    {
        return $this->container['questions'];
    }

    /**
     * Sets questions
     *
     * @param \Cyclos\Api\Model\AdQuestionView[] $questions The list of questions this advertisement has.
     *
     * @return $this
     */
    public function setQuestions($questions)
    {
        $this->container['questions'] = $questions;

        return $this;
    }

    /**
     * Gets allow_decimal
     *
     * @return bool
     */
    public function getAllowDecimal()
    {
        return $this->container['allow_decimal'];
    }

    /**
     * Sets allow_decimal
     *
     * @param bool $allow_decimal if true then this webshop ad can be ordered specifying the quantity as a decimal number.
     *
     * @return $this
     */
    public function setAllowDecimal($allow_decimal)
    {
        $this->container['allow_decimal'] = $allow_decimal;

        return $this;
    }

    /**
     * Gets delivery_methods
     *
     * @return \Cyclos\Api\Model\DeliveryMethod[]
     */
    public function getDeliveryMethods()
    {
        return $this->container['delivery_methods'];
    }

    /**
     * Sets delivery_methods
     *
     * @param \Cyclos\Api\Model\DeliveryMethod[] $delivery_methods The available delivery methods for this webshop ad.
     *
     * @return $this
     */
    public function setDeliveryMethods($delivery_methods)
    {
        $this->container['delivery_methods'] = $delivery_methods;

        return $this;
    }

    /**
     * Gets product_number
     *
     * @return string
     */
    public function getProductNumber()
    {
        return $this->container['product_number'];
    }

    /**
     * Sets product_number
     *
     * @param string $product_number The product number according to the webshop settings.
     *
     * @return $this
     */
    public function setProductNumber($product_number)
    {
        $this->container['product_number'] = $product_number;

        return $this;
    }

    /**
     * Gets operations
     *
     * @return \Cyclos\Api\Model\Operation[]
     */
    public function getOperations()
    {
        return $this->container['operations'];
    }

    /**
     * Sets operations
     *
     * @param \Cyclos\Api\Model\Operation[] $operations List of runnable custom operations.
     *
     * @return $this
     */
    public function setOperations($operations)
    {
        $this->container['operations'] = $operations;

        return $this;
    }

    /**
     * Gets hide_price
     *
     * @return bool
     */
    public function getHidePrice()
    {
        return $this->container['hide_price'];
    }

    /**
     * Sets hide_price
     *
     * @param bool $hide_price Indicates whether show or not this advertisement price to guests
     *
     * @return $this
     */
    public function setHidePrice($hide_price)
    {
        $this->container['hide_price'] = $hide_price;

        return $this;
    }

    /**
     * Gets hide_owner
     *
     * @return bool
     */
    public function getHideOwner()
    {
        return $this->container['hide_owner'];
    }

    /**
     * Sets hide_owner
     *
     * @param bool $hide_owner Indicates whether show or not this advertisement owner to guests
     *
     * @return $this
     */
    public function setHideOwner($hide_owner)
    {
        $this->container['hide_owner'] = $hide_owner;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
