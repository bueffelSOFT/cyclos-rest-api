<?php
/**
 * UserDataForNew
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;
use \Cyclos\Api\ObjectSerializer;

/**
 * UserDataForNew Class Doc Comment
 *
 * @category Class
 * @description Contains data used to register a user
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserDataForNew extends BasicUserDataForNew 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserDataForNew';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'group' => '',
'broker' => '',
'address_configuration' => '\Cyclos\Api\Model\AddressConfigurationForUserProfile',
'contact_info_configuration' => '\Cyclos\Api\Model\ContactInfoConfigurationForUserProfile',
'image_configuration' => '\Cyclos\Api\Model\ImageConfigurationForUserProfile',
'user' => '',
'agreements' => '\Cyclos\Api\Model\AgreementContent[]',
'security_questions' => '\Cyclos\Api\Model\EntityReference[]',
'nfc_token_types' => '\Cyclos\Api\Model\EntityReference[]',
'captcha_type' => ''    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'group' => null,
'broker' => null,
'address_configuration' => null,
'contact_info_configuration' => null,
'image_configuration' => null,
'user' => null,
'agreements' => null,
'security_questions' => null,
'nfc_token_types' => null,
'captcha_type' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'group' => 'group',
'broker' => 'broker',
'address_configuration' => 'addressConfiguration',
'contact_info_configuration' => 'contactInfoConfiguration',
'image_configuration' => 'imageConfiguration',
'user' => 'user',
'agreements' => 'agreements',
'security_questions' => 'securityQuestions',
'nfc_token_types' => 'nfcTokenTypes',
'captcha_type' => 'captchaType'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'group' => 'setGroup',
'broker' => 'setBroker',
'address_configuration' => 'setAddressConfiguration',
'contact_info_configuration' => 'setContactInfoConfiguration',
'image_configuration' => 'setImageConfiguration',
'user' => 'setUser',
'agreements' => 'setAgreements',
'security_questions' => 'setSecurityQuestions',
'nfc_token_types' => 'setNfcTokenTypes',
'captcha_type' => 'setCaptchaType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'group' => 'getGroup',
'broker' => 'getBroker',
'address_configuration' => 'getAddressConfiguration',
'contact_info_configuration' => 'getContactInfoConfiguration',
'image_configuration' => 'getImageConfiguration',
'user' => 'getUser',
'agreements' => 'getAgreements',
'security_questions' => 'getSecurityQuestions',
'nfc_token_types' => 'getNfcTokenTypes',
'captcha_type' => 'getCaptchaType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['broker'] = isset($data['broker']) ? $data['broker'] : null;
        $this->container['address_configuration'] = isset($data['address_configuration']) ? $data['address_configuration'] : null;
        $this->container['contact_info_configuration'] = isset($data['contact_info_configuration']) ? $data['contact_info_configuration'] : null;
        $this->container['image_configuration'] = isset($data['image_configuration']) ? $data['image_configuration'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['agreements'] = isset($data['agreements']) ? $data['agreements'] : null;
        $this->container['security_questions'] = isset($data['security_questions']) ? $data['security_questions'] : null;
        $this->container['nfc_token_types'] = isset($data['nfc_token_types']) ? $data['nfc_token_types'] : null;
        $this->container['captcha_type'] = isset($data['captcha_type']) ? $data['captcha_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets group
     *
     * @return 
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param  $group Details of the registration group.
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets broker
     *
     * @return 
     */
    public function getBroker()
    {
        return $this->container['broker'];
    }

    /**
     * Sets broker
     *
     * @param  $broker When the user registration is requested with a broker, contains the broker details.
     *
     * @return $this
     */
    public function setBroker($broker)
    {
        $this->container['broker'] = $broker;

        return $this;
    }

    /**
     * Gets address_configuration
     *
     * @return \Cyclos\Api\Model\AddressConfigurationForUserProfile
     */
    public function getAddressConfiguration()
    {
        return $this->container['address_configuration'];
    }

    /**
     * Sets address_configuration
     *
     * @param \Cyclos\Api\Model\AddressConfigurationForUserProfile $address_configuration address_configuration
     *
     * @return $this
     */
    public function setAddressConfiguration($address_configuration)
    {
        $this->container['address_configuration'] = $address_configuration;

        return $this;
    }

    /**
     * Gets contact_info_configuration
     *
     * @return \Cyclos\Api\Model\ContactInfoConfigurationForUserProfile
     */
    public function getContactInfoConfiguration()
    {
        return $this->container['contact_info_configuration'];
    }

    /**
     * Sets contact_info_configuration
     *
     * @param \Cyclos\Api\Model\ContactInfoConfigurationForUserProfile $contact_info_configuration contact_info_configuration
     *
     * @return $this
     */
    public function setContactInfoConfiguration($contact_info_configuration)
    {
        $this->container['contact_info_configuration'] = $contact_info_configuration;

        return $this;
    }

    /**
     * Gets image_configuration
     *
     * @return \Cyclos\Api\Model\ImageConfigurationForUserProfile
     */
    public function getImageConfiguration()
    {
        return $this->container['image_configuration'];
    }

    /**
     * Sets image_configuration
     *
     * @param \Cyclos\Api\Model\ImageConfigurationForUserProfile $image_configuration image_configuration
     *
     * @return $this
     */
    public function setImageConfiguration($image_configuration)
    {
        $this->container['image_configuration'] = $image_configuration;

        return $this;
    }

    /**
     * Gets user
     *
     * @return 
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param  $user The object that can be altered and posted back to register the user
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets agreements
     *
     * @return \Cyclos\Api\Model\AgreementContent[]
     */
    public function getAgreements()
    {
        return $this->container['agreements'];
    }

    /**
     * Sets agreements
     *
     * @param \Cyclos\Api\Model\AgreementContent[] $agreements The agreements that needs to be accepted by the user to be able to register. Only returned for public registrations.
     *
     * @return $this
     */
    public function setAgreements($agreements)
    {
        $this->container['agreements'] = $agreements;

        return $this;
    }

    /**
     * Gets security_questions
     *
     * @return \Cyclos\Api\Model\EntityReference[]
     */
    public function getSecurityQuestions()
    {
        return $this->container['security_questions'];
    }

    /**
     * Sets security_questions
     *
     * @param \Cyclos\Api\Model\EntityReference[] $security_questions If enabled in the server, are the possible security questions the user can use to set the answer.
     *
     * @return $this
     */
    public function setSecurityQuestions($security_questions)
    {
        $this->container['security_questions'] = $security_questions;

        return $this;
    }

    /**
     * Gets nfc_token_types
     *
     * @return \Cyclos\Api\Model\EntityReference[]
     */
    public function getNfcTokenTypes()
    {
        return $this->container['nfc_token_types'];
    }

    /**
     * Sets nfc_token_types
     *
     * @param \Cyclos\Api\Model\EntityReference[] $nfc_token_types The NFC token types the authenticated user can parsonalize tags for the user being registered
     *
     * @return $this
     */
    public function setNfcTokenTypes($nfc_token_types)
    {
        $this->container['nfc_token_types'] = $nfc_token_types;

        return $this;
    }

    /**
     * Gets captcha_type
     *
     * @return 
     */
    public function getCaptchaType()
    {
        return $this->container['captcha_type'];
    }

    /**
     * Sets captcha_type
     *
     * @param  $captcha_type The captcha provider used to requested a captcha for registration, or null if no captcha is needed.
     *
     * @return $this
     */
    public function setCaptchaType($captcha_type)
    {
        $this->container['captcha_type'] = $captcha_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
