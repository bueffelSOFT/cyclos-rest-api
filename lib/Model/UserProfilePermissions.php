<?php
/**
 * UserProfilePermissions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;

use \ArrayAccess;
use \Cyclos\Api\ObjectSerializer;

/**
 * UserProfilePermissions Class Doc Comment
 *
 * @category Class
 * @description Permissions over a user profile
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserProfilePermissions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserProfilePermissions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'edit_profile' => 'bool',
'manage_addresses' => 'bool',
'manage_addresses_privacy' => 'bool',
'manage_phones' => 'bool',
'manage_phones_privacy' => 'bool',
'manage_images' => 'bool',
'manage_contact_infos' => 'bool',
'can_create_address' => 'bool',
'can_create_land_line' => 'bool',
'can_create_mobile' => 'bool',
'can_create_image' => 'bool',
'can_create_contact_info' => 'bool',
'max_addresses' => 'int',
'max_mobiles' => 'int',
'max_land_lines' => 'int',
'max_images' => 'int',
'max_contact_infos' => 'int',
'address_availability' => 'AllOfUserProfilePermissionsAddressAvailability',
'mobile_availability' => 'AllOfUserProfilePermissionsMobileAvailability',
'land_line_availability' => 'AllOfUserProfilePermissionsLandLineAvailability',
'profile_image_availability' => 'AllOfUserProfilePermissionsProfileImageAvailability',
'contact_info_availability' => 'AllOfUserProfilePermissionsContactInfoAvailability'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'edit_profile' => null,
'manage_addresses' => null,
'manage_addresses_privacy' => null,
'manage_phones' => null,
'manage_phones_privacy' => null,
'manage_images' => null,
'manage_contact_infos' => null,
'can_create_address' => null,
'can_create_land_line' => null,
'can_create_mobile' => null,
'can_create_image' => null,
'can_create_contact_info' => null,
'max_addresses' => null,
'max_mobiles' => null,
'max_land_lines' => null,
'max_images' => null,
'max_contact_infos' => null,
'address_availability' => null,
'mobile_availability' => null,
'land_line_availability' => null,
'profile_image_availability' => null,
'contact_info_availability' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'edit_profile' => 'editProfile',
'manage_addresses' => 'manageAddresses',
'manage_addresses_privacy' => 'manageAddressesPrivacy',
'manage_phones' => 'managePhones',
'manage_phones_privacy' => 'managePhonesPrivacy',
'manage_images' => 'manageImages',
'manage_contact_infos' => 'manageContactInfos',
'can_create_address' => 'canCreateAddress',
'can_create_land_line' => 'canCreateLandLine',
'can_create_mobile' => 'canCreateMobile',
'can_create_image' => 'canCreateImage',
'can_create_contact_info' => 'canCreateContactInfo',
'max_addresses' => 'maxAddresses',
'max_mobiles' => 'maxMobiles',
'max_land_lines' => 'maxLandLines',
'max_images' => 'maxImages',
'max_contact_infos' => 'maxContactInfos',
'address_availability' => 'addressAvailability',
'mobile_availability' => 'mobileAvailability',
'land_line_availability' => 'landLineAvailability',
'profile_image_availability' => 'profileImageAvailability',
'contact_info_availability' => 'contactInfoAvailability'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'edit_profile' => 'setEditProfile',
'manage_addresses' => 'setManageAddresses',
'manage_addresses_privacy' => 'setManageAddressesPrivacy',
'manage_phones' => 'setManagePhones',
'manage_phones_privacy' => 'setManagePhonesPrivacy',
'manage_images' => 'setManageImages',
'manage_contact_infos' => 'setManageContactInfos',
'can_create_address' => 'setCanCreateAddress',
'can_create_land_line' => 'setCanCreateLandLine',
'can_create_mobile' => 'setCanCreateMobile',
'can_create_image' => 'setCanCreateImage',
'can_create_contact_info' => 'setCanCreateContactInfo',
'max_addresses' => 'setMaxAddresses',
'max_mobiles' => 'setMaxMobiles',
'max_land_lines' => 'setMaxLandLines',
'max_images' => 'setMaxImages',
'max_contact_infos' => 'setMaxContactInfos',
'address_availability' => 'setAddressAvailability',
'mobile_availability' => 'setMobileAvailability',
'land_line_availability' => 'setLandLineAvailability',
'profile_image_availability' => 'setProfileImageAvailability',
'contact_info_availability' => 'setContactInfoAvailability'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'edit_profile' => 'getEditProfile',
'manage_addresses' => 'getManageAddresses',
'manage_addresses_privacy' => 'getManageAddressesPrivacy',
'manage_phones' => 'getManagePhones',
'manage_phones_privacy' => 'getManagePhonesPrivacy',
'manage_images' => 'getManageImages',
'manage_contact_infos' => 'getManageContactInfos',
'can_create_address' => 'getCanCreateAddress',
'can_create_land_line' => 'getCanCreateLandLine',
'can_create_mobile' => 'getCanCreateMobile',
'can_create_image' => 'getCanCreateImage',
'can_create_contact_info' => 'getCanCreateContactInfo',
'max_addresses' => 'getMaxAddresses',
'max_mobiles' => 'getMaxMobiles',
'max_land_lines' => 'getMaxLandLines',
'max_images' => 'getMaxImages',
'max_contact_infos' => 'getMaxContactInfos',
'address_availability' => 'getAddressAvailability',
'mobile_availability' => 'getMobileAvailability',
'land_line_availability' => 'getLandLineAvailability',
'profile_image_availability' => 'getProfileImageAvailability',
'contact_info_availability' => 'getContactInfoAvailability'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['edit_profile'] = isset($data['edit_profile']) ? $data['edit_profile'] : null;
        $this->container['manage_addresses'] = isset($data['manage_addresses']) ? $data['manage_addresses'] : null;
        $this->container['manage_addresses_privacy'] = isset($data['manage_addresses_privacy']) ? $data['manage_addresses_privacy'] : null;
        $this->container['manage_phones'] = isset($data['manage_phones']) ? $data['manage_phones'] : null;
        $this->container['manage_phones_privacy'] = isset($data['manage_phones_privacy']) ? $data['manage_phones_privacy'] : null;
        $this->container['manage_images'] = isset($data['manage_images']) ? $data['manage_images'] : null;
        $this->container['manage_contact_infos'] = isset($data['manage_contact_infos']) ? $data['manage_contact_infos'] : null;
        $this->container['can_create_address'] = isset($data['can_create_address']) ? $data['can_create_address'] : null;
        $this->container['can_create_land_line'] = isset($data['can_create_land_line']) ? $data['can_create_land_line'] : null;
        $this->container['can_create_mobile'] = isset($data['can_create_mobile']) ? $data['can_create_mobile'] : null;
        $this->container['can_create_image'] = isset($data['can_create_image']) ? $data['can_create_image'] : null;
        $this->container['can_create_contact_info'] = isset($data['can_create_contact_info']) ? $data['can_create_contact_info'] : null;
        $this->container['max_addresses'] = isset($data['max_addresses']) ? $data['max_addresses'] : null;
        $this->container['max_mobiles'] = isset($data['max_mobiles']) ? $data['max_mobiles'] : null;
        $this->container['max_land_lines'] = isset($data['max_land_lines']) ? $data['max_land_lines'] : null;
        $this->container['max_images'] = isset($data['max_images']) ? $data['max_images'] : null;
        $this->container['max_contact_infos'] = isset($data['max_contact_infos']) ? $data['max_contact_infos'] : null;
        $this->container['address_availability'] = isset($data['address_availability']) ? $data['address_availability'] : null;
        $this->container['mobile_availability'] = isset($data['mobile_availability']) ? $data['mobile_availability'] : null;
        $this->container['land_line_availability'] = isset($data['land_line_availability']) ? $data['land_line_availability'] : null;
        $this->container['profile_image_availability'] = isset($data['profile_image_availability']) ? $data['profile_image_availability'] : null;
        $this->container['contact_info_availability'] = isset($data['contact_info_availability']) ? $data['contact_info_availability'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets edit_profile
     *
     * @return bool
     */
    public function getEditProfile()
    {
        return $this->container['edit_profile'];
    }

    /**
     * Sets edit_profile
     *
     * @param bool $edit_profile Can edit the user profile?
     *
     * @return $this
     */
    public function setEditProfile($edit_profile)
    {
        $this->container['edit_profile'] = $edit_profile;

        return $this;
    }

    /**
     * Gets manage_addresses
     *
     * @return bool
     */
    public function getManageAddresses()
    {
        return $this->container['manage_addresses'];
    }

    /**
     * Sets manage_addresses
     *
     * @param bool $manage_addresses Can manage addresses?
     *
     * @return $this
     */
    public function setManageAddresses($manage_addresses)
    {
        $this->container['manage_addresses'] = $manage_addresses;

        return $this;
    }

    /**
     * Gets manage_addresses_privacy
     *
     * @return bool
     */
    public function getManageAddressesPrivacy()
    {
        return $this->container['manage_addresses_privacy'];
    }

    /**
     * Sets manage_addresses_privacy
     *
     * @param bool $manage_addresses_privacy Can manage the addresses privacy?
     *
     * @return $this
     */
    public function setManageAddressesPrivacy($manage_addresses_privacy)
    {
        $this->container['manage_addresses_privacy'] = $manage_addresses_privacy;

        return $this;
    }

    /**
     * Gets manage_phones
     *
     * @return bool
     */
    public function getManagePhones()
    {
        return $this->container['manage_phones'];
    }

    /**
     * Sets manage_phones
     *
     * @param bool $manage_phones Can manage phones?
     *
     * @return $this
     */
    public function setManagePhones($manage_phones)
    {
        $this->container['manage_phones'] = $manage_phones;

        return $this;
    }

    /**
     * Gets manage_phones_privacy
     *
     * @return bool
     */
    public function getManagePhonesPrivacy()
    {
        return $this->container['manage_phones_privacy'];
    }

    /**
     * Sets manage_phones_privacy
     *
     * @param bool $manage_phones_privacy Can manage the phones privacy?
     *
     * @return $this
     */
    public function setManagePhonesPrivacy($manage_phones_privacy)
    {
        $this->container['manage_phones_privacy'] = $manage_phones_privacy;

        return $this;
    }

    /**
     * Gets manage_images
     *
     * @return bool
     */
    public function getManageImages()
    {
        return $this->container['manage_images'];
    }

    /**
     * Sets manage_images
     *
     * @param bool $manage_images Can manage profile images?
     *
     * @return $this
     */
    public function setManageImages($manage_images)
    {
        $this->container['manage_images'] = $manage_images;

        return $this;
    }

    /**
     * Gets manage_contact_infos
     *
     * @return bool
     */
    public function getManageContactInfos()
    {
        return $this->container['manage_contact_infos'];
    }

    /**
     * Sets manage_contact_infos
     *
     * @param bool $manage_contact_infos Can manage additional contact informations?
     *
     * @return $this
     */
    public function setManageContactInfos($manage_contact_infos)
    {
        $this->container['manage_contact_infos'] = $manage_contact_infos;

        return $this;
    }

    /**
     * Gets can_create_address
     *
     * @return bool
     */
    public function getCanCreateAddress()
    {
        return $this->container['can_create_address'];
    }

    /**
     * Sets can_create_address
     *
     * @param bool $can_create_address Will be true if the authenticated user can manage addresses and the user for which we are viewing its profile has not reached the maximum allowed addresses. Only if `manageAddresses` is true.
     *
     * @return $this
     */
    public function setCanCreateAddress($can_create_address)
    {
        $this->container['can_create_address'] = $can_create_address;

        return $this;
    }

    /**
     * Gets can_create_land_line
     *
     * @return bool
     */
    public function getCanCreateLandLine()
    {
        return $this->container['can_create_land_line'];
    }

    /**
     * Sets can_create_land_line
     *
     * @param bool $can_create_land_line Will be true if the authenticated user can manage phones and the user for whom we are viewing its profile has not reached the maximum allowed landline phones. Only if `managePhones` is true.
     *
     * @return $this
     */
    public function setCanCreateLandLine($can_create_land_line)
    {
        $this->container['can_create_land_line'] = $can_create_land_line;

        return $this;
    }

    /**
     * Gets can_create_mobile
     *
     * @return bool
     */
    public function getCanCreateMobile()
    {
        return $this->container['can_create_mobile'];
    }

    /**
     * Sets can_create_mobile
     *
     * @param bool $can_create_mobile Will be true if the authenticated user can manage phones and the user for whom we are viewing its profile has not reached the maximum allowed mobile phones. Only if `managePhones` is true.
     *
     * @return $this
     */
    public function setCanCreateMobile($can_create_mobile)
    {
        $this->container['can_create_mobile'] = $can_create_mobile;

        return $this;
    }

    /**
     * Gets can_create_image
     *
     * @return bool
     */
    public function getCanCreateImage()
    {
        return $this->container['can_create_image'];
    }

    /**
     * Sets can_create_image
     *
     * @param bool $can_create_image Will be true if the authenticated user can manage images and the user for whom we are viewing its profile has not reached the maximum allowed profile images. Only if `manageImages` is true.
     *
     * @return $this
     */
    public function setCanCreateImage($can_create_image)
    {
        $this->container['can_create_image'] = $can_create_image;

        return $this;
    }

    /**
     * Gets can_create_contact_info
     *
     * @return bool
     */
    public function getCanCreateContactInfo()
    {
        return $this->container['can_create_contact_info'];
    }

    /**
     * Sets can_create_contact_info
     *
     * @param bool $can_create_contact_info Will be true if the authenticated user can manage additional contact informations and the user for whom we are viewing its profile has not reached the maximum allowed additional contact informations. Only if `manageContactInfos` is true.
     *
     * @return $this
     */
    public function setCanCreateContactInfo($can_create_contact_info)
    {
        $this->container['can_create_contact_info'] = $can_create_contact_info;

        return $this;
    }

    /**
     * Gets max_addresses
     *
     * @return int
     */
    public function getMaxAddresses()
    {
        return $this->container['max_addresses'];
    }

    /**
     * Sets max_addresses
     *
     * @param int $max_addresses The maximum number of addresses the user can own. Only if `manageAddresses` is true
     *
     * @return $this
     */
    public function setMaxAddresses($max_addresses)
    {
        $this->container['max_addresses'] = $max_addresses;

        return $this;
    }

    /**
     * Gets max_mobiles
     *
     * @return int
     */
    public function getMaxMobiles()
    {
        return $this->container['max_mobiles'];
    }

    /**
     * Sets max_mobiles
     *
     * @param int $max_mobiles The maximum number of mobile phones the user can own. Only if `managePhones` is true.
     *
     * @return $this
     */
    public function setMaxMobiles($max_mobiles)
    {
        $this->container['max_mobiles'] = $max_mobiles;

        return $this;
    }

    /**
     * Gets max_land_lines
     *
     * @return int
     */
    public function getMaxLandLines()
    {
        return $this->container['max_land_lines'];
    }

    /**
     * Sets max_land_lines
     *
     * @param int $max_land_lines The maximum number of land-line phones the user can own. Only if `managePhones` is true.
     *
     * @return $this
     */
    public function setMaxLandLines($max_land_lines)
    {
        $this->container['max_land_lines'] = $max_land_lines;

        return $this;
    }

    /**
     * Gets max_images
     *
     * @return int
     */
    public function getMaxImages()
    {
        return $this->container['max_images'];
    }

    /**
     * Sets max_images
     *
     * @param int $max_images The maximum number of profile images  the user can own. Only if `manageImages` is true.
     *
     * @return $this
     */
    public function setMaxImages($max_images)
    {
        $this->container['max_images'] = $max_images;

        return $this;
    }

    /**
     * Gets max_contact_infos
     *
     * @return int
     */
    public function getMaxContactInfos()
    {
        return $this->container['max_contact_infos'];
    }

    /**
     * Sets max_contact_infos
     *
     * @param int $max_contact_infos The maximum number of additional contacts the user can own.  Only if `manageContactInfos` is true.
     *
     * @return $this
     */
    public function setMaxContactInfos($max_contact_infos)
    {
        $this->container['max_contact_infos'] = $max_contact_infos;

        return $this;
    }

    /**
     * Gets address_availability
     *
     * @return AllOfUserProfilePermissionsAddressAvailability
     */
    public function getAddressAvailability()
    {
        return $this->container['address_availability'];
    }

    /**
     * Sets address_availability
     *
     * @param AllOfUserProfilePermissionsAddressAvailability $address_availability The availability for addresses. Only if `manageAddresses` is true
     *
     * @return $this
     */
    public function setAddressAvailability($address_availability)
    {
        $this->container['address_availability'] = $address_availability;

        return $this;
    }

    /**
     * Gets mobile_availability
     *
     * @return AllOfUserProfilePermissionsMobileAvailability
     */
    public function getMobileAvailability()
    {
        return $this->container['mobile_availability'];
    }

    /**
     * Sets mobile_availability
     *
     * @param AllOfUserProfilePermissionsMobileAvailability $mobile_availability The availability for mobile phones Only if `managePhones` is true
     *
     * @return $this
     */
    public function setMobileAvailability($mobile_availability)
    {
        $this->container['mobile_availability'] = $mobile_availability;

        return $this;
    }

    /**
     * Gets land_line_availability
     *
     * @return AllOfUserProfilePermissionsLandLineAvailability
     */
    public function getLandLineAvailability()
    {
        return $this->container['land_line_availability'];
    }

    /**
     * Sets land_line_availability
     *
     * @param AllOfUserProfilePermissionsLandLineAvailability $land_line_availability The availability for land-line phones Only if `managePhones` is true
     *
     * @return $this
     */
    public function setLandLineAvailability($land_line_availability)
    {
        $this->container['land_line_availability'] = $land_line_availability;

        return $this;
    }

    /**
     * Gets profile_image_availability
     *
     * @return AllOfUserProfilePermissionsProfileImageAvailability
     */
    public function getProfileImageAvailability()
    {
        return $this->container['profile_image_availability'];
    }

    /**
     * Sets profile_image_availability
     *
     * @param AllOfUserProfilePermissionsProfileImageAvailability $profile_image_availability The availability for profile images Only if `manageImages` is true
     *
     * @return $this
     */
    public function setProfileImageAvailability($profile_image_availability)
    {
        $this->container['profile_image_availability'] = $profile_image_availability;

        return $this;
    }

    /**
     * Gets contact_info_availability
     *
     * @return AllOfUserProfilePermissionsContactInfoAvailability
     */
    public function getContactInfoAvailability()
    {
        return $this->container['contact_info_availability'];
    }

    /**
     * Sets contact_info_availability
     *
     * @param AllOfUserProfilePermissionsContactInfoAvailability $contact_info_availability The availability for additional contacts Only if `manageContactInfos` is true
     *
     * @return $this
     */
    public function setContactInfoAvailability($contact_info_availability)
    {
        $this->container['contact_info_availability'] = $contact_info_availability;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
