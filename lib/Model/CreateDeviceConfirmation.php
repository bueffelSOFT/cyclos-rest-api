<?php
/**
 * CreateDeviceConfirmation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;

use \ArrayAccess;
use \Cyclos\Api\ObjectSerializer;

/**
 * CreateDeviceConfirmation Class Doc Comment
 *
 * @category Class
 * @description Contains data for create a pending device confirmation.
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateDeviceConfirmation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateDeviceConfirmation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'from' => 'string',
'to' => 'string',
'to_principal' => 'string',
'payment_type' => 'string',
'amount' => 'float',
'transaction' => 'string',
'transfer' => 'string',
'account' => 'string',
'installment' => 'string',
'failed_occurrence' => 'string',
'client' => 'string',
'name' => 'string',
'type' => '\Cyclos\Api\Model\DeviceConfirmationTypeEnum',
'external_payment_action' => 'AllOfCreateDeviceConfirmationExternalPaymentAction',
'scheduled_payment_action' => 'AllOfCreateDeviceConfirmationScheduledPaymentAction',
'recurring_payment_action' => 'AllOfCreateDeviceConfirmationRecurringPaymentAction',
'installment_action' => 'AllOfCreateDeviceConfirmationInstallmentAction',
'failed_occurrence_action' => 'AllOfCreateDeviceConfirmationFailedOccurrenceAction',
'authorization_action' => 'AllOfCreateDeviceConfirmationAuthorizationAction',
'payment_request_action' => 'AllOfCreateDeviceConfirmationPaymentRequestAction',
'client_action' => 'AllOfCreateDeviceConfirmationClientAction',
'operation' => 'string',
'password_type' => 'string',
'seller' => 'string',
'order' => 'string',
'voucher' => 'string',
'voucher_action' => 'AllOfCreateDeviceConfirmationVoucherAction',
'voucher_type' => 'string',
'number_of_vouchers' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'from' => null,
'to' => null,
'to_principal' => null,
'payment_type' => null,
'amount' => 'number',
'transaction' => null,
'transfer' => null,
'account' => null,
'installment' => null,
'failed_occurrence' => null,
'client' => null,
'name' => null,
'type' => null,
'external_payment_action' => null,
'scheduled_payment_action' => null,
'recurring_payment_action' => null,
'installment_action' => null,
'failed_occurrence_action' => null,
'authorization_action' => null,
'payment_request_action' => null,
'client_action' => null,
'operation' => null,
'password_type' => null,
'seller' => null,
'order' => null,
'voucher' => null,
'voucher_action' => null,
'voucher_type' => null,
'number_of_vouchers' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'from' => 'from',
'to' => 'to',
'to_principal' => 'toPrincipal',
'payment_type' => 'paymentType',
'amount' => 'amount',
'transaction' => 'transaction',
'transfer' => 'transfer',
'account' => 'account',
'installment' => 'installment',
'failed_occurrence' => 'failedOccurrence',
'client' => 'client',
'name' => 'name',
'type' => 'type',
'external_payment_action' => 'externalPaymentAction',
'scheduled_payment_action' => 'scheduledPaymentAction',
'recurring_payment_action' => 'recurringPaymentAction',
'installment_action' => 'installmentAction',
'failed_occurrence_action' => 'failedOccurrenceAction',
'authorization_action' => 'authorizationAction',
'payment_request_action' => 'paymentRequestAction',
'client_action' => 'clientAction',
'operation' => 'operation',
'password_type' => 'passwordType',
'seller' => 'seller',
'order' => 'order',
'voucher' => 'voucher',
'voucher_action' => 'voucherAction',
'voucher_type' => 'voucherType',
'number_of_vouchers' => 'numberOfVouchers'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'from' => 'setFrom',
'to' => 'setTo',
'to_principal' => 'setToPrincipal',
'payment_type' => 'setPaymentType',
'amount' => 'setAmount',
'transaction' => 'setTransaction',
'transfer' => 'setTransfer',
'account' => 'setAccount',
'installment' => 'setInstallment',
'failed_occurrence' => 'setFailedOccurrence',
'client' => 'setClient',
'name' => 'setName',
'type' => 'setType',
'external_payment_action' => 'setExternalPaymentAction',
'scheduled_payment_action' => 'setScheduledPaymentAction',
'recurring_payment_action' => 'setRecurringPaymentAction',
'installment_action' => 'setInstallmentAction',
'failed_occurrence_action' => 'setFailedOccurrenceAction',
'authorization_action' => 'setAuthorizationAction',
'payment_request_action' => 'setPaymentRequestAction',
'client_action' => 'setClientAction',
'operation' => 'setOperation',
'password_type' => 'setPasswordType',
'seller' => 'setSeller',
'order' => 'setOrder',
'voucher' => 'setVoucher',
'voucher_action' => 'setVoucherAction',
'voucher_type' => 'setVoucherType',
'number_of_vouchers' => 'setNumberOfVouchers'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'from' => 'getFrom',
'to' => 'getTo',
'to_principal' => 'getToPrincipal',
'payment_type' => 'getPaymentType',
'amount' => 'getAmount',
'transaction' => 'getTransaction',
'transfer' => 'getTransfer',
'account' => 'getAccount',
'installment' => 'getInstallment',
'failed_occurrence' => 'getFailedOccurrence',
'client' => 'getClient',
'name' => 'getName',
'type' => 'getType',
'external_payment_action' => 'getExternalPaymentAction',
'scheduled_payment_action' => 'getScheduledPaymentAction',
'recurring_payment_action' => 'getRecurringPaymentAction',
'installment_action' => 'getInstallmentAction',
'failed_occurrence_action' => 'getFailedOccurrenceAction',
'authorization_action' => 'getAuthorizationAction',
'payment_request_action' => 'getPaymentRequestAction',
'client_action' => 'getClientAction',
'operation' => 'getOperation',
'password_type' => 'getPasswordType',
'seller' => 'getSeller',
'order' => 'getOrder',
'voucher' => 'getVoucher',
'voucher_action' => 'getVoucherAction',
'voucher_type' => 'getVoucherType',
'number_of_vouchers' => 'getNumberOfVouchers'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['from'] = isset($data['from']) ? $data['from'] : null;
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['to_principal'] = isset($data['to_principal']) ? $data['to_principal'] : null;
        $this->container['payment_type'] = isset($data['payment_type']) ? $data['payment_type'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['transaction'] = isset($data['transaction']) ? $data['transaction'] : null;
        $this->container['transfer'] = isset($data['transfer']) ? $data['transfer'] : null;
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['installment'] = isset($data['installment']) ? $data['installment'] : null;
        $this->container['failed_occurrence'] = isset($data['failed_occurrence']) ? $data['failed_occurrence'] : null;
        $this->container['client'] = isset($data['client']) ? $data['client'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['external_payment_action'] = isset($data['external_payment_action']) ? $data['external_payment_action'] : null;
        $this->container['scheduled_payment_action'] = isset($data['scheduled_payment_action']) ? $data['scheduled_payment_action'] : null;
        $this->container['recurring_payment_action'] = isset($data['recurring_payment_action']) ? $data['recurring_payment_action'] : null;
        $this->container['installment_action'] = isset($data['installment_action']) ? $data['installment_action'] : null;
        $this->container['failed_occurrence_action'] = isset($data['failed_occurrence_action']) ? $data['failed_occurrence_action'] : null;
        $this->container['authorization_action'] = isset($data['authorization_action']) ? $data['authorization_action'] : null;
        $this->container['payment_request_action'] = isset($data['payment_request_action']) ? $data['payment_request_action'] : null;
        $this->container['client_action'] = isset($data['client_action']) ? $data['client_action'] : null;
        $this->container['operation'] = isset($data['operation']) ? $data['operation'] : null;
        $this->container['password_type'] = isset($data['password_type']) ? $data['password_type'] : null;
        $this->container['seller'] = isset($data['seller']) ? $data['seller'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['voucher'] = isset($data['voucher']) ? $data['voucher'] : null;
        $this->container['voucher_action'] = isset($data['voucher_action']) ? $data['voucher_action'] : null;
        $this->container['voucher_type'] = isset($data['voucher_type']) ? $data['voucher_type'] : null;
        $this->container['number_of_vouchers'] = isset($data['number_of_vouchers']) ? $data['number_of_vouchers'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets from
     *
     * @return string
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string $from The payment account owner. Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix   the value with a single quote (like in Excel spreadsheets);  - `self` for the currently authenticated user; - `system` for the owner of system accounts.  Required only if type is `performPayment` or `performExternalPayment`.
     *
     * @return $this
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string $to Same as `from` but for the receiver. Required only if type is `performPayment`.
     *
     * @return $this
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets to_principal
     *
     * @return string
     */
    public function getToPrincipal()
    {
        return $this->container['to_principal'];
    }

    /**
     * Sets to_principal
     *
     * @param string $to_principal The receiver of the external payment (email or mobile number). Required only if type is `performExternalPayment`.
     *
     * @return $this
     */
    public function setToPrincipal($to_principal)
    {
        $this->container['to_principal'] = $to_principal;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return string
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param string $payment_type The payment type id or qualified internal name (in the form `fromAccountType.paymentType`). Required only if type is `performPayment`, `performExternalPayment`, `shoppingCartCheckout` or `importUserPayments`.
     *
     * @return $this
     */
    public function setPaymentType($payment_type)
    {
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount The amount involved in the confirmation, its meaning depends on the type. Required only if type is `performPayment`, `performExternalPayment`, `shoppingCartCheckout`, `generateVouchers` or `buyVouchers`.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets transaction
     *
     * @return string
     */
    public function getTransaction()
    {
        return $this->container['transaction'];
    }

    /**
     * Sets transaction
     *
     * @param string $transaction Either the id or number of the transaction (or ticket number if type is `approveTicket`). Required only if type is `manageAuthorization`, `manageExternalPayment`, `manageScheduledPayment`, `manageRecurringPayment`, `managePaymentRequest` or `approveTicket`.
     *
     * @return $this
     */
    public function setTransaction($transaction)
    {
        $this->container['transaction'] = $transaction;

        return $this;
    }

    /**
     * Gets transfer
     *
     * @return string
     */
    public function getTransfer()
    {
        return $this->container['transfer'];
    }

    /**
     * Sets transfer
     *
     * @param string $transfer Either the id or number of the transfer. Required only if type is `chargeback`.
     *
     * @return $this
     */
    public function setTransfer($transfer)
    {
        $this->container['transfer'] = $transfer;

        return $this;
    }

    /**
     * Gets account
     *
     * @return string
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param string $account Either the id or number of the user account. Required only if type is `changeAccountLimits`.
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets installment
     *
     * @return string
     */
    public function getInstallment()
    {
        return $this->container['installment'];
    }

    /**
     * Sets installment
     *
     * @param string $installment The id of a scheduled payment installment. Required only if type is `manageInstallment`.
     *
     * @return $this
     */
    public function setInstallment($installment)
    {
        $this->container['installment'] = $installment;

        return $this;
    }

    /**
     * Gets failed_occurrence
     *
     * @return string
     */
    public function getFailedOccurrence()
    {
        return $this->container['failed_occurrence'];
    }

    /**
     * Sets failed_occurrence
     *
     * @param string $failed_occurrence The id of a recurring payment failed occurrence. Required only if type is `manageFailedOccurrence`.
     *
     * @return $this
     */
    public function setFailedOccurrence($failed_occurrence)
    {
        $this->container['failed_occurrence'] = $failed_occurrence;

        return $this;
    }

    /**
     * Gets client
     *
     * @return string
     */
    public function getClient()
    {
        return $this->container['client'];
    }

    /**
     * Sets client
     *
     * @param string $client The access client id or token. Required only if type is  `clientAction`.
     *
     * @return $this
     */
    public function setClient($client)
    {
        $this->container['client'] = $client;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The entity's name for which this confirmation is created for. Required only if type is either `manageAddress`, `managePhone` or `manageContactInfo`.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Cyclos\Api\Model\DeviceConfirmationTypeEnum
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Cyclos\Api\Model\DeviceConfirmationTypeEnum $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets external_payment_action
     *
     * @return AllOfCreateDeviceConfirmationExternalPaymentAction
     */
    public function getExternalPaymentAction()
    {
        return $this->container['external_payment_action'];
    }

    /**
     * Sets external_payment_action
     *
     * @param AllOfCreateDeviceConfirmationExternalPaymentAction $external_payment_action The action being applied to the external payment. Required only if type is `manageExternalPayment`.
     *
     * @return $this
     */
    public function setExternalPaymentAction($external_payment_action)
    {
        $this->container['external_payment_action'] = $external_payment_action;

        return $this;
    }

    /**
     * Gets scheduled_payment_action
     *
     * @return AllOfCreateDeviceConfirmationScheduledPaymentAction
     */
    public function getScheduledPaymentAction()
    {
        return $this->container['scheduled_payment_action'];
    }

    /**
     * Sets scheduled_payment_action
     *
     * @param AllOfCreateDeviceConfirmationScheduledPaymentAction $scheduled_payment_action The action being applied to the scheduled payment. Required only if type is `manageScheduledPayment`.
     *
     * @return $this
     */
    public function setScheduledPaymentAction($scheduled_payment_action)
    {
        $this->container['scheduled_payment_action'] = $scheduled_payment_action;

        return $this;
    }

    /**
     * Gets recurring_payment_action
     *
     * @return AllOfCreateDeviceConfirmationRecurringPaymentAction
     */
    public function getRecurringPaymentAction()
    {
        return $this->container['recurring_payment_action'];
    }

    /**
     * Sets recurring_payment_action
     *
     * @param AllOfCreateDeviceConfirmationRecurringPaymentAction $recurring_payment_action The action being applied to the recurring payment. Required only if type is `manageRecurringPayment`.
     *
     * @return $this
     */
    public function setRecurringPaymentAction($recurring_payment_action)
    {
        $this->container['recurring_payment_action'] = $recurring_payment_action;

        return $this;
    }

    /**
     * Gets installment_action
     *
     * @return AllOfCreateDeviceConfirmationInstallmentAction
     */
    public function getInstallmentAction()
    {
        return $this->container['installment_action'];
    }

    /**
     * Sets installment_action
     *
     * @param AllOfCreateDeviceConfirmationInstallmentAction $installment_action The action being applied to the scheduled payment installment. Required only if type is `manageInstallment`.
     *
     * @return $this
     */
    public function setInstallmentAction($installment_action)
    {
        $this->container['installment_action'] = $installment_action;

        return $this;
    }

    /**
     * Gets failed_occurrence_action
     *
     * @return AllOfCreateDeviceConfirmationFailedOccurrenceAction
     */
    public function getFailedOccurrenceAction()
    {
        return $this->container['failed_occurrence_action'];
    }

    /**
     * Sets failed_occurrence_action
     *
     * @param AllOfCreateDeviceConfirmationFailedOccurrenceAction $failed_occurrence_action The action being applied to the recurring payment failed occurrence. Required only if type is `manageFailedOccurrence`.
     *
     * @return $this
     */
    public function setFailedOccurrenceAction($failed_occurrence_action)
    {
        $this->container['failed_occurrence_action'] = $failed_occurrence_action;

        return $this;
    }

    /**
     * Gets authorization_action
     *
     * @return AllOfCreateDeviceConfirmationAuthorizationAction
     */
    public function getAuthorizationAction()
    {
        return $this->container['authorization_action'];
    }

    /**
     * Sets authorization_action
     *
     * @param AllOfCreateDeviceConfirmationAuthorizationAction $authorization_action The action being applied to the payment authorization. Required only if type is `manageAuthorization`.
     *
     * @return $this
     */
    public function setAuthorizationAction($authorization_action)
    {
        $this->container['authorization_action'] = $authorization_action;

        return $this;
    }

    /**
     * Gets payment_request_action
     *
     * @return AllOfCreateDeviceConfirmationPaymentRequestAction
     */
    public function getPaymentRequestAction()
    {
        return $this->container['payment_request_action'];
    }

    /**
     * Sets payment_request_action
     *
     * @param AllOfCreateDeviceConfirmationPaymentRequestAction $payment_request_action The action being applied to the payment request. Required only if type is `managePaymentRequest`.
     *
     * @return $this
     */
    public function setPaymentRequestAction($payment_request_action)
    {
        $this->container['payment_request_action'] = $payment_request_action;

        return $this;
    }

    /**
     * Gets client_action
     *
     * @return AllOfCreateDeviceConfirmationClientAction
     */
    public function getClientAction()
    {
        return $this->container['client_action'];
    }

    /**
     * Sets client_action
     *
     * @param AllOfCreateDeviceConfirmationClientAction $client_action The action being applied to the access client. Required only if type is `clientAction`.
     *
     * @return $this
     */
    public function setClientAction($client_action)
    {
        $this->container['client_action'] = $client_action;

        return $this;
    }

    /**
     * Gets operation
     *
     * @return string
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param string $operation Either the id or internal name of the custom operation being executed. Required only if type is `runOperation`.
     *
     * @return $this
     */
    public function setOperation($operation)
    {
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets password_type
     *
     * @return string
     */
    public function getPasswordType()
    {
        return $this->container['password_type'];
    }

    /**
     * Sets password_type
     *
     * @param string $password_type Either the id or internal name of the password type being e generatated. Required only if type is `generatePassword`.
     *
     * @return $this
     */
    public function setPasswordType($password_type)
    {
        $this->container['password_type'] = $password_type;

        return $this;
    }

    /**
     * Gets seller
     *
     * @return string
     */
    public function getSeller()
    {
        return $this->container['seller'];
    }

    /**
     * Sets seller
     *
     * @param string $seller The order seller. Can be one a user identification value, such as id, username, e-mail, phone, etc. Id is always allowed, others depend on Cyclos configuration. Note that a valid numeric value is always considered as id. For example, when using another identification method that can be numeric only, prefix the value with a single quote (like in Excel spreadsheets); Required only if type is `shoppingCartCheckout`.
     *
     * @return $this
     */
    public function setSeller($seller)
    {
        $this->container['seller'] = $seller;

        return $this;
    }

    /**
     * Gets order
     *
     * @return string
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param string $order Either the id or number of an webshop order. Required only if type is `acceptOrder`.
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets voucher
     *
     * @return string
     */
    public function getVoucher()
    {
        return $this->container['voucher'];
    }

    /**
     * Sets voucher
     *
     * @param string $voucher The voucher id or token. Required only if type is  `manageVoucher`.
     *
     * @return $this
     */
    public function setVoucher($voucher)
    {
        $this->container['voucher'] = $voucher;

        return $this;
    }

    /**
     * Gets voucher_action
     *
     * @return AllOfCreateDeviceConfirmationVoucherAction
     */
    public function getVoucherAction()
    {
        return $this->container['voucher_action'];
    }

    /**
     * Sets voucher_action
     *
     * @param AllOfCreateDeviceConfirmationVoucherAction $voucher_action The action being applied to the voucher. Required only if type is `manageVoucher`.
     *
     * @return $this
     */
    public function setVoucherAction($voucher_action)
    {
        $this->container['voucher_action'] = $voucher_action;

        return $this;
    }

    /**
     * Gets voucher_type
     *
     * @return string
     */
    public function getVoucherType()
    {
        return $this->container['voucher_type'];
    }

    /**
     * Sets voucher_type
     *
     * @param string $voucher_type Either the id or internal name of a voucher type. Required only if type is `generateVouchers` or `buyVouchers`.
     *
     * @return $this
     */
    public function setVoucherType($voucher_type)
    {
        $this->container['voucher_type'] = $voucher_type;

        return $this;
    }

    /**
     * Gets number_of_vouchers
     *
     * @return int
     */
    public function getNumberOfVouchers()
    {
        return $this->container['number_of_vouchers'];
    }

    /**
     * Sets number_of_vouchers
     *
     * @param int $number_of_vouchers The number of vouchers to be generated. Required only if type is `generateVouchers` or `buyVouchers`.
     *
     * @return $this
     */
    public function setNumberOfVouchers($number_of_vouchers)
    {
        $this->container['number_of_vouchers'] = $number_of_vouchers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
