<?php
/**
 * UsersWithBalanceQueryFilters
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;
use \Cyclos\Api\ObjectSerializer;

/**
 * UsersWithBalanceQueryFilters Class Doc Comment
 *
 * @category Class
 * @description Parameters for searching users with their balances
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UsersWithBalanceQueryFilters extends BasicUserQueryFilters 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UsersWithBalanceQueryFilters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_type' => 'string',
'balance_range' => 'int[]',
'last_incoming_transfer_period' => '\DateTime[]',
'last_outgoing_transfer_period' => '\DateTime[]',
'negative_since_period' => '\DateTime[]',
'medium_balance_range' => 'int[]',
'order_by' => '\Cyclos\Api\Model\UsersWithBalanceOrderByEnum'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_type' => null,
'balance_range' => null,
'last_incoming_transfer_period' => 'date-time',
'last_outgoing_transfer_period' => 'date-time',
'negative_since_period' => 'date-time',
'medium_balance_range' => null,
'order_by' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_type' => 'accountType',
'balance_range' => 'balanceRange',
'last_incoming_transfer_period' => 'lastIncomingTransferPeriod',
'last_outgoing_transfer_period' => 'lastOutgoingTransferPeriod',
'negative_since_period' => 'negativeSincePeriod',
'medium_balance_range' => 'mediumBalanceRange',
'order_by' => 'orderBy'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_type' => 'setAccountType',
'balance_range' => 'setBalanceRange',
'last_incoming_transfer_period' => 'setLastIncomingTransferPeriod',
'last_outgoing_transfer_period' => 'setLastOutgoingTransferPeriod',
'negative_since_period' => 'setNegativeSincePeriod',
'medium_balance_range' => 'setMediumBalanceRange',
'order_by' => 'setOrderBy'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_type' => 'getAccountType',
'balance_range' => 'getBalanceRange',
'last_incoming_transfer_period' => 'getLastIncomingTransferPeriod',
'last_outgoing_transfer_period' => 'getLastOutgoingTransferPeriod',
'negative_since_period' => 'getNegativeSincePeriod',
'medium_balance_range' => 'getMediumBalanceRange',
'order_by' => 'getOrderBy'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['account_type'] = isset($data['account_type']) ? $data['account_type'] : null;
        $this->container['balance_range'] = isset($data['balance_range']) ? $data['balance_range'] : null;
        $this->container['last_incoming_transfer_period'] = isset($data['last_incoming_transfer_period']) ? $data['last_incoming_transfer_period'] : null;
        $this->container['last_outgoing_transfer_period'] = isset($data['last_outgoing_transfer_period']) ? $data['last_outgoing_transfer_period'] : null;
        $this->container['negative_since_period'] = isset($data['negative_since_period']) ? $data['negative_since_period'] : null;
        $this->container['medium_balance_range'] = isset($data['medium_balance_range']) ? $data['medium_balance_range'] : null;
        $this->container['order_by'] = isset($data['order_by']) ? $data['order_by'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['account_type'] === null) {
            $invalidProperties[] = "'account_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_type
     *
     * @return string
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string $account_type The account type
     *
     * @return $this
     */
    public function setAccountType($account_type)
    {
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets balance_range
     *
     * @return int[]
     */
    public function getBalanceRange()
    {
        return $this->container['balance_range'];
    }

    /**
     * Sets balance_range
     *
     * @param int[] $balance_range The minimum and / or maximum balance for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.
     *
     * @return $this
     */
    public function setBalanceRange($balance_range)
    {
        $this->container['balance_range'] = $balance_range;

        return $this;
    }

    /**
     * Gets last_incoming_transfer_period
     *
     * @return \DateTime[]
     */
    public function getLastIncomingTransferPeriod()
    {
        return $this->container['last_incoming_transfer_period'];
    }

    /**
     * Sets last_incoming_transfer_period
     *
     * @param \DateTime[] $last_incoming_transfer_period The minimum / maximum date of the last incoming transfer for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.
     *
     * @return $this
     */
    public function setLastIncomingTransferPeriod($last_incoming_transfer_period)
    {
        $this->container['last_incoming_transfer_period'] = $last_incoming_transfer_period;

        return $this;
    }

    /**
     * Gets last_outgoing_transfer_period
     *
     * @return \DateTime[]
     */
    public function getLastOutgoingTransferPeriod()
    {
        return $this->container['last_outgoing_transfer_period'];
    }

    /**
     * Sets last_outgoing_transfer_period
     *
     * @param \DateTime[] $last_outgoing_transfer_period The minimum / maximum date of the last outgoing transfer for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.
     *
     * @return $this
     */
    public function setLastOutgoingTransferPeriod($last_outgoing_transfer_period)
    {
        $this->container['last_outgoing_transfer_period'] = $last_outgoing_transfer_period;

        return $this;
    }

    /**
     * Gets negative_since_period
     *
     * @return \DateTime[]
     */
    public function getNegativeSincePeriod()
    {
        return $this->container['negative_since_period'];
    }

    /**
     * Sets negative_since_period
     *
     * @param \DateTime[] $negative_since_period The minimum / maximum negative-since date for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.
     *
     * @return $this
     */
    public function setNegativeSincePeriod($negative_since_period)
    {
        $this->container['negative_since_period'] = $negative_since_period;

        return $this;
    }

    /**
     * Gets medium_balance_range
     *
     * @return int[]
     */
    public function getMediumBalanceRange()
    {
        return $this->container['medium_balance_range'];
    }

    /**
     * Sets medium_balance_range
     *
     * @param int[] $medium_balance_range An array with 2 elements, describing the lower and upper medium balance bounds. If not specified, the range defined in the account type will be used. If that one is also not defined, there will be no definitions for balance levels. Both bounds need to be set as 2 element in the array, or it won't be considered.
     *
     * @return $this
     */
    public function setMediumBalanceRange($medium_balance_range)
    {
        $this->container['medium_balance_range'] = $medium_balance_range;

        return $this;
    }

    /**
     * Gets order_by
     *
     * @return \Cyclos\Api\Model\UsersWithBalanceOrderByEnum
     */
    public function getOrderBy()
    {
        return $this->container['order_by'];
    }

    /**
     * Sets order_by
     *
     * @param \Cyclos\Api\Model\UsersWithBalanceOrderByEnum $order_by order_by
     *
     * @return $this
     */
    public function setOrderBy($order_by)
    {
        $this->container['order_by'] = $order_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
