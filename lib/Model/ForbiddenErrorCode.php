<?php
/**
 * ForbiddenErrorCode
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;
use \Cyclos\Api\ObjectSerializer;

/**
 * ForbiddenErrorCode Class Doc Comment
 *
 * @category Class
 * @description Error codes for 403 Forbidden HTTP status. Possible values are: - &#x60;devicePinRemoved&#x60;: The device pin was removed by exceeding the allowed attempts - &#x60;expiredPassword&#x60;: The password being used has expired - &#x60;illegalAction&#x60;: Attempt to perform an action that is not allowed on this context - &#x60;inaccessibleChannel&#x60;: This channel cannot be accessed by the user - &#x60;inaccessiblePrincipal&#x60;: The used identification method (principal type) cannot be used in this channel - &#x60;indefinitelyBlocked&#x60;: The password was indefinitely blocked by exceeding the allowed attempts - &#x60;invalidDeviceActivationCode&#x60;: The device activation code was no valid - &#x60;invalidDeviceConfirmation&#x60;: The device confirmation being used is invalid (normally as a confirmation password) - &#x60;invalidPassword&#x60;: The password being used is invalid (normally the confirmation password) - &#x60;operatorWithPendingAgreements&#x60;: The operator cannot access because his owner member has pending agreements - &#x60;pendingAgreements&#x60;: There is at least one agreement which needs to be accepted in order to access the system - &#x60;permissionDenied&#x60;: The operation was denied because a required permission was not granted - &#x60;resetPassword&#x60;: The password being used was manually reset - &#x60;temporarilyBlocked&#x60;: The password was temporarily blocked by exceeding the allowed attempts
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ForbiddenErrorCode
{
    /**
     * Possible values of this enum
     */
    const DEVICE_PIN_REMOVED = 'devicePinRemoved';
const EXPIRED_PASSWORD = 'expiredPassword';
const ILLEGAL_ACTION = 'illegalAction';
const INACCESSIBLE_CHANNEL = 'inaccessibleChannel';
const INACCESSIBLE_PRINCIPAL = 'inaccessiblePrincipal';
const INDEFINITELY_BLOCKED = 'indefinitelyBlocked';
const INVALID_DEVICE_ACTIVATION_CODE = 'invalidDeviceActivationCode';
const INVALID_DEVICE_CONFIRMATION = 'invalidDeviceConfirmation';
const INVALID_PASSWORD = 'invalidPassword';
const OPERATOR_WITH_PENDING_AGREEMENTS = 'operatorWithPendingAgreements';
const PENDING_AGREEMENTS = 'pendingAgreements';
const PERMISSION_DENIED = 'permissionDenied';
const RESET_PASSWORD = 'resetPassword';
const TEMPORARILY_BLOCKED = 'temporarilyBlocked';
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public static function getAllowableEnumValues()
    {
        return [
            self::DEVICE_PIN_REMOVED,
self::EXPIRED_PASSWORD,
self::ILLEGAL_ACTION,
self::INACCESSIBLE_CHANNEL,
self::INACCESSIBLE_PRINCIPAL,
self::INDEFINITELY_BLOCKED,
self::INVALID_DEVICE_ACTIVATION_CODE,
self::INVALID_DEVICE_CONFIRMATION,
self::INVALID_PASSWORD,
self::OPERATOR_WITH_PENDING_AGREEMENTS,
self::PENDING_AGREEMENTS,
self::PERMISSION_DENIED,
self::RESET_PASSWORD,
self::TEMPORARILY_BLOCKED,        ];
    }
}
