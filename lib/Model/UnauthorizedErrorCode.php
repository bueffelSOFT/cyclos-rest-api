<?php
/**
 * UnauthorizedErrorCode
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;
use \Cyclos\Api\ObjectSerializer;

/**
 * UnauthorizedErrorCode Class Doc Comment
 *
 * @category Class
 * @description Error codes for 401 Unauthorized HTTP status. Possible values are: - &#x60;blockedAccessClient&#x60;: The access client used for access is blocked - &#x60;invalidAccessClient&#x60;: The access client used for access is invalid - &#x60;invalidChannelUsage&#x60;: Attempt to login on a stateless-only channel, or use stateless in a stateful-only channel, or invoke as guest in a channel configuration which is only for users - &#x60;invalidNetwork&#x60;: Attempt to access a network that has been disabled - &#x60;loggedOut&#x60;: The session token used for access is invalid - &#x60;login&#x60;: Either user identification (principal) or password are invalid. May have additional information, such as the user / password status - &#x60;missingAuthorization&#x60;: Attempt to access an operation as guest, but the operation requires authentication - &#x60;remoteAddressBlocked&#x60;: The IP address being used for access has been blocked by exceeding tries with invalid users - &#x60;unauthorizedAddress&#x60;: The user cannot access the system using an IP address that is not white-listed - &#x60;unauthorizedUrl&#x60;: The user&#x27;s configuration demands access using a specific URL, and this access is being done using another one
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UnauthorizedErrorCode
{
    /**
     * Possible values of this enum
     */
    const BLOCKED_ACCESS_CLIENT = 'blockedAccessClient';
const INVALID_ACCESS_CLIENT = 'invalidAccessClient';
const INVALID_CHANNEL_USAGE = 'invalidChannelUsage';
const INVALID_NETWORK = 'invalidNetwork';
const LOGGED_OUT = 'loggedOut';
const LOGIN = 'login';
const MISSING_AUTHORIZATION = 'missingAuthorization';
const REMOTE_ADDRESS_BLOCKED = 'remoteAddressBlocked';
const UNAUTHORIZED_ADDRESS = 'unauthorizedAddress';
const UNAUTHORIZED_URL = 'unauthorizedUrl';
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public static function getAllowableEnumValues()
    {
        return [
            self::BLOCKED_ACCESS_CLIENT,
self::INVALID_ACCESS_CLIENT,
self::INVALID_CHANNEL_USAGE,
self::INVALID_NETWORK,
self::LOGGED_OUT,
self::LOGIN,
self::MISSING_AUTHORIZATION,
self::REMOTE_ADDRESS_BLOCKED,
self::UNAUTHORIZED_ADDRESS,
self::UNAUTHORIZED_URL,        ];
    }
}
