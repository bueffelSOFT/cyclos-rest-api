<?php
/**
 * BuyVoucherError
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;
use \Cyclos\Api\ObjectSerializer;

/**
 * BuyVoucherError Class Doc Comment
 *
 * @category Class
 * @description Error when buying a voucher
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BuyVoucherError extends Error 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BuyVoucherError';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'currency' => '',
'amount_left_for_buying' => 'float',
'date_allowed_again' => '\DateTime',
'current_open_amount' => 'float',
'max_open_amount' => 'float',
'payment_error' => '',
'code' => '\Cyclos\Api\Model\BuyVoucherErrorCode'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'currency' => null,
'amount_left_for_buying' => 'number',
'date_allowed_again' => 'date-time',
'current_open_amount' => 'number',
'max_open_amount' => 'number',
'payment_error' => null,
'code' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currency' => 'currency',
'amount_left_for_buying' => 'amountLeftForBuying',
'date_allowed_again' => 'dateAllowedAgain',
'current_open_amount' => 'currentOpenAmount',
'max_open_amount' => 'maxOpenAmount',
'payment_error' => 'paymentError',
'code' => 'code'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currency' => 'setCurrency',
'amount_left_for_buying' => 'setAmountLeftForBuying',
'date_allowed_again' => 'setDateAllowedAgain',
'current_open_amount' => 'setCurrentOpenAmount',
'max_open_amount' => 'setMaxOpenAmount',
'payment_error' => 'setPaymentError',
'code' => 'setCode'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currency' => 'getCurrency',
'amount_left_for_buying' => 'getAmountLeftForBuying',
'date_allowed_again' => 'getDateAllowedAgain',
'current_open_amount' => 'getCurrentOpenAmount',
'max_open_amount' => 'getMaxOpenAmount',
'payment_error' => 'getPaymentError',
'code' => 'getCode'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['amount_left_for_buying'] = isset($data['amount_left_for_buying']) ? $data['amount_left_for_buying'] : null;
        $this->container['date_allowed_again'] = isset($data['date_allowed_again']) ? $data['date_allowed_again'] : null;
        $this->container['current_open_amount'] = isset($data['current_open_amount']) ? $data['current_open_amount'] : null;
        $this->container['max_open_amount'] = isset($data['max_open_amount']) ? $data['max_open_amount'] : null;
        $this->container['payment_error'] = isset($data['payment_error']) ? $data['payment_error'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currency
     *
     * @return 
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param  $currency Currency reference. Only if `code` is `maxAmountForPeriod` or `maxTotalOpenAmount`
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets amount_left_for_buying
     *
     * @return float
     */
    public function getAmountLeftForBuying()
    {
        return $this->container['amount_left_for_buying'];
    }

    /**
     * Sets amount_left_for_buying
     *
     * @param float $amount_left_for_buying Indicates the maximum amount the user can buy this time without exceeding the maximum. Only if `code` is `maxAmountForPeriod`.
     *
     * @return $this
     */
    public function setAmountLeftForBuying($amount_left_for_buying)
    {
        $this->container['amount_left_for_buying'] = $amount_left_for_buying;

        return $this;
    }

    /**
     * Gets date_allowed_again
     *
     * @return \DateTime
     */
    public function getDateAllowedAgain()
    {
        return $this->container['date_allowed_again'];
    }

    /**
     * Sets date_allowed_again
     *
     * @param \DateTime $date_allowed_again Indicates the date this user will be able to buy vouchers again for this type. Only if `code` is `maxAmountForPeriod`.
     *
     * @return $this
     */
    public function setDateAllowedAgain($date_allowed_again)
    {
        $this->container['date_allowed_again'] = $date_allowed_again;

        return $this;
    }

    /**
     * Gets current_open_amount
     *
     * @return float
     */
    public function getCurrentOpenAmount()
    {
        return $this->container['current_open_amount'];
    }

    /**
     * Sets current_open_amount
     *
     * @param float $current_open_amount Indicates the current total amount that is open. Only if `code` is `maxOpenAmount` or `maxTotalOpenAmount`.
     *
     * @return $this
     */
    public function setCurrentOpenAmount($current_open_amount)
    {
        $this->container['current_open_amount'] = $current_open_amount;

        return $this;
    }

    /**
     * Gets max_open_amount
     *
     * @return float
     */
    public function getMaxOpenAmount()
    {
        return $this->container['max_open_amount'];
    }

    /**
     * Sets max_open_amount
     *
     * @param float $max_open_amount Indicates the maximum total open amount. Only if `code` is `maxOpenAmount` or `maxTotalOpenAmount`.
     *
     * @return $this
     */
    public function setMaxOpenAmount($max_open_amount)
    {
        $this->container['max_open_amount'] = $max_open_amount;

        return $this;
    }

    /**
     * Gets payment_error
     *
     * @return 
     */
    public function getPaymentError()
    {
        return $this->container['payment_error'];
    }

    /**
     * Sets payment_error
     *
     * @param  $payment_error The `PaymentError` generated when the voucher payment was being created. Only if `code` is `payment`.
     *
     * @return $this
     */
    public function setPaymentError($payment_error)
    {
        $this->container['payment_error'] = $payment_error;

        return $this;
    }

    /**
     * Gets code
     *
     * @return \Cyclos\Api\Model\BuyVoucherErrorCode
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param \Cyclos\Api\Model\BuyVoucherErrorCode $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
