<?php
/**
 * BasicUserQueryFilters
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;
use \Cyclos\Api\ObjectSerializer;

/**
 * BasicUserQueryFilters Class Doc Comment
 *
 * @category Class
 * @description Base definitions for user search filters
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BasicUserQueryFilters extends FullTextWithDistanceQueryFilters 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BasicUserQueryFilters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'users_to_exclude' => 'string[]',
'users_to_include' => 'string[]',
'activation_period' => '\DateTime[]',
'creation_period' => '\DateTime[]',
'last_login_period' => '\DateTime[]',
'groups' => 'string[]',
'brokers' => 'string[]',
'main_broker_only' => 'bool',
'include_group' => 'bool',
'include_group_set' => 'bool',
'address_result' => '\Cyclos\Api\Model\UserAddressResultEnum'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'users_to_exclude' => null,
'users_to_include' => null,
'activation_period' => 'date-time',
'creation_period' => 'date-time',
'last_login_period' => 'date-time',
'groups' => null,
'brokers' => null,
'main_broker_only' => null,
'include_group' => null,
'include_group_set' => null,
'address_result' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'users_to_exclude' => 'usersToExclude',
'users_to_include' => 'usersToInclude',
'activation_period' => 'activationPeriod',
'creation_period' => 'creationPeriod',
'last_login_period' => 'lastLoginPeriod',
'groups' => 'groups',
'brokers' => 'brokers',
'main_broker_only' => 'mainBrokerOnly',
'include_group' => 'includeGroup',
'include_group_set' => 'includeGroupSet',
'address_result' => 'addressResult'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'users_to_exclude' => 'setUsersToExclude',
'users_to_include' => 'setUsersToInclude',
'activation_period' => 'setActivationPeriod',
'creation_period' => 'setCreationPeriod',
'last_login_period' => 'setLastLoginPeriod',
'groups' => 'setGroups',
'brokers' => 'setBrokers',
'main_broker_only' => 'setMainBrokerOnly',
'include_group' => 'setIncludeGroup',
'include_group_set' => 'setIncludeGroupSet',
'address_result' => 'setAddressResult'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'users_to_exclude' => 'getUsersToExclude',
'users_to_include' => 'getUsersToInclude',
'activation_period' => 'getActivationPeriod',
'creation_period' => 'getCreationPeriod',
'last_login_period' => 'getLastLoginPeriod',
'groups' => 'getGroups',
'brokers' => 'getBrokers',
'main_broker_only' => 'getMainBrokerOnly',
'include_group' => 'getIncludeGroup',
'include_group_set' => 'getIncludeGroupSet',
'address_result' => 'getAddressResult'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['users_to_exclude'] = isset($data['users_to_exclude']) ? $data['users_to_exclude'] : null;
        $this->container['users_to_include'] = isset($data['users_to_include']) ? $data['users_to_include'] : null;
        $this->container['activation_period'] = isset($data['activation_period']) ? $data['activation_period'] : null;
        $this->container['creation_period'] = isset($data['creation_period']) ? $data['creation_period'] : null;
        $this->container['last_login_period'] = isset($data['last_login_period']) ? $data['last_login_period'] : null;
        $this->container['groups'] = isset($data['groups']) ? $data['groups'] : null;
        $this->container['brokers'] = isset($data['brokers']) ? $data['brokers'] : null;
        $this->container['main_broker_only'] = isset($data['main_broker_only']) ? $data['main_broker_only'] : null;
        $this->container['include_group'] = isset($data['include_group']) ? $data['include_group'] : null;
        $this->container['include_group_set'] = isset($data['include_group_set']) ? $data['include_group_set'] : null;
        $this->container['address_result'] = isset($data['address_result']) ? $data['address_result'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets users_to_exclude
     *
     * @return string[]
     */
    public function getUsersToExclude()
    {
        return $this->container['users_to_exclude'];
    }

    /**
     * Sets users_to_exclude
     *
     * @param string[] $users_to_exclude Indicated the users to be excluded from the result
     *
     * @return $this
     */
    public function setUsersToExclude($users_to_exclude)
    {
        $this->container['users_to_exclude'] = $users_to_exclude;

        return $this;
    }

    /**
     * Gets users_to_include
     *
     * @return string[]
     */
    public function getUsersToInclude()
    {
        return $this->container['users_to_include'];
    }

    /**
     * Sets users_to_include
     *
     * @param string[] $users_to_include Indicated the users to be included in the result.  Any other user not present in this list will be excluded from the result.
     *
     * @return $this
     */
    public function setUsersToInclude($users_to_include)
    {
        $this->container['users_to_include'] = $users_to_include;

        return $this;
    }

    /**
     * Gets activation_period
     *
     * @return \DateTime[]
     */
    public function getActivationPeriod()
    {
        return $this->container['activation_period'];
    }

    /**
     * Sets activation_period
     *
     * @param \DateTime[] $activation_period The minimum / maximum user activation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.
     *
     * @return $this
     */
    public function setActivationPeriod($activation_period)
    {
        $this->container['activation_period'] = $activation_period;

        return $this;
    }

    /**
     * Gets creation_period
     *
     * @return \DateTime[]
     */
    public function getCreationPeriod()
    {
        return $this->container['creation_period'];
    }

    /**
     * Sets creation_period
     *
     * @param \DateTime[] $creation_period The minimum / maximum user creation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.
     *
     * @return $this
     */
    public function setCreationPeriod($creation_period)
    {
        $this->container['creation_period'] = $creation_period;

        return $this;
    }

    /**
     * Gets last_login_period
     *
     * @return \DateTime[]
     */
    public function getLastLoginPeriod()
    {
        return $this->container['last_login_period'];
    }

    /**
     * Sets last_login_period
     *
     * @param \DateTime[] $last_login_period The minimum / maximum user last login date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.
     *
     * @return $this
     */
    public function setLastLoginPeriod($last_login_period)
    {
        $this->container['last_login_period'] = $last_login_period;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return string[]
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param string[] $groups Either id or internal names of groups / group sets
     *
     * @return $this
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets brokers
     *
     * @return string[]
     */
    public function getBrokers()
    {
        return $this->container['brokers'];
    }

    /**
     * Sets brokers
     *
     * @param string[] $brokers Either id or a principal (login name, e-mail, etc) for brokers
     *
     * @return $this
     */
    public function setBrokers($brokers)
    {
        $this->container['brokers'] = $brokers;

        return $this;
    }

    /**
     * Gets main_broker_only
     *
     * @return bool
     */
    public function getMainBrokerOnly()
    {
        return $this->container['main_broker_only'];
    }

    /**
     * Sets main_broker_only
     *
     * @param bool $main_broker_only When set to `true`, will match only users that have the brokers as set in the `brokers` parameter as main broker.
     *
     * @return $this
     */
    public function setMainBrokerOnly($main_broker_only)
    {
        $this->container['main_broker_only'] = $main_broker_only;

        return $this;
    }

    /**
     * Gets include_group
     *
     * @return bool
     */
    public function getIncludeGroup()
    {
        return $this->container['include_group'];
    }

    /**
     * Sets include_group
     *
     * @param bool $include_group When set to `true` and the logged user has permission to view user groups, will return the `group` property on users.
     *
     * @return $this
     */
    public function setIncludeGroup($include_group)
    {
        $this->container['include_group'] = $include_group;

        return $this;
    }

    /**
     * Gets include_group_set
     *
     * @return bool
     */
    public function getIncludeGroupSet()
    {
        return $this->container['include_group_set'];
    }

    /**
     * Sets include_group_set
     *
     * @param bool $include_group_set When set to `true` and the logged user has permission to view user group sets, will return the `groupSet` property on users.
     *
     * @return $this
     */
    public function setIncludeGroupSet($include_group_set)
    {
        $this->container['include_group_set'] = $include_group_set;

        return $this;
    }

    /**
     * Gets address_result
     *
     * @return \Cyclos\Api\Model\UserAddressResultEnum
     */
    public function getAddressResult()
    {
        return $this->container['address_result'];
    }

    /**
     * Sets address_result
     *
     * @param \Cyclos\Api\Model\UserAddressResultEnum $address_result address_result
     *
     * @return $this
     */
    public function setAddressResult($address_result)
    {
        $this->container['address_result'] = $address_result;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
