<?php
/**
 * FullProfileEdit
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;

use \ArrayAccess;
use \Cyclos\Api\ObjectSerializer;

/**
 * FullProfileEdit Class Doc Comment
 *
 * @category Class
 * @description Data sent to the server to edit the full profile at once
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FullProfileEdit implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FullProfileEdit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'user' => 'AllOfFullProfileEditUser',
'create_land_line_phones' => '\Cyclos\Api\Model\PhoneNew[]',
'create_mobile_phones' => '\Cyclos\Api\Model\PhoneNew[]',
'modify_land_line_phones' => '\Cyclos\Api\Model\PhoneEditWithId[]',
'modify_mobile_phones' => '\Cyclos\Api\Model\PhoneEditWithId[]',
'remove_phones' => 'string[]',
'create_addresses' => '\Cyclos\Api\Model\AddressNew[]',
'modify_addresses' => '\Cyclos\Api\Model\AddressEditWithId[]',
'remove_addresses' => 'string[]',
'create_contact_infos' => '\Cyclos\Api\Model\ContactInfoNew[]',
'modify_contact_infos' => '\Cyclos\Api\Model\ContactInfoEditWithId[]',
'remove_contact_infos' => 'string[]',
'add_images' => 'string[]',
'remove_images' => 'string[]',
'reorder_images' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'user' => null,
'create_land_line_phones' => null,
'create_mobile_phones' => null,
'modify_land_line_phones' => null,
'modify_mobile_phones' => null,
'remove_phones' => null,
'create_addresses' => null,
'modify_addresses' => null,
'remove_addresses' => null,
'create_contact_infos' => null,
'modify_contact_infos' => null,
'remove_contact_infos' => null,
'add_images' => null,
'remove_images' => null,
'reorder_images' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user' => 'user',
'create_land_line_phones' => 'createLandLinePhones',
'create_mobile_phones' => 'createMobilePhones',
'modify_land_line_phones' => 'modifyLandLinePhones',
'modify_mobile_phones' => 'modifyMobilePhones',
'remove_phones' => 'removePhones',
'create_addresses' => 'createAddresses',
'modify_addresses' => 'modifyAddresses',
'remove_addresses' => 'removeAddresses',
'create_contact_infos' => 'createContactInfos',
'modify_contact_infos' => 'modifyContactInfos',
'remove_contact_infos' => 'removeContactInfos',
'add_images' => 'addImages',
'remove_images' => 'removeImages',
'reorder_images' => 'reorderImages'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user' => 'setUser',
'create_land_line_phones' => 'setCreateLandLinePhones',
'create_mobile_phones' => 'setCreateMobilePhones',
'modify_land_line_phones' => 'setModifyLandLinePhones',
'modify_mobile_phones' => 'setModifyMobilePhones',
'remove_phones' => 'setRemovePhones',
'create_addresses' => 'setCreateAddresses',
'modify_addresses' => 'setModifyAddresses',
'remove_addresses' => 'setRemoveAddresses',
'create_contact_infos' => 'setCreateContactInfos',
'modify_contact_infos' => 'setModifyContactInfos',
'remove_contact_infos' => 'setRemoveContactInfos',
'add_images' => 'setAddImages',
'remove_images' => 'setRemoveImages',
'reorder_images' => 'setReorderImages'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user' => 'getUser',
'create_land_line_phones' => 'getCreateLandLinePhones',
'create_mobile_phones' => 'getCreateMobilePhones',
'modify_land_line_phones' => 'getModifyLandLinePhones',
'modify_mobile_phones' => 'getModifyMobilePhones',
'remove_phones' => 'getRemovePhones',
'create_addresses' => 'getCreateAddresses',
'modify_addresses' => 'getModifyAddresses',
'remove_addresses' => 'getRemoveAddresses',
'create_contact_infos' => 'getCreateContactInfos',
'modify_contact_infos' => 'getModifyContactInfos',
'remove_contact_infos' => 'getRemoveContactInfos',
'add_images' => 'getAddImages',
'remove_images' => 'getRemoveImages',
'reorder_images' => 'getReorderImages'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['create_land_line_phones'] = isset($data['create_land_line_phones']) ? $data['create_land_line_phones'] : null;
        $this->container['create_mobile_phones'] = isset($data['create_mobile_phones']) ? $data['create_mobile_phones'] : null;
        $this->container['modify_land_line_phones'] = isset($data['modify_land_line_phones']) ? $data['modify_land_line_phones'] : null;
        $this->container['modify_mobile_phones'] = isset($data['modify_mobile_phones']) ? $data['modify_mobile_phones'] : null;
        $this->container['remove_phones'] = isset($data['remove_phones']) ? $data['remove_phones'] : null;
        $this->container['create_addresses'] = isset($data['create_addresses']) ? $data['create_addresses'] : null;
        $this->container['modify_addresses'] = isset($data['modify_addresses']) ? $data['modify_addresses'] : null;
        $this->container['remove_addresses'] = isset($data['remove_addresses']) ? $data['remove_addresses'] : null;
        $this->container['create_contact_infos'] = isset($data['create_contact_infos']) ? $data['create_contact_infos'] : null;
        $this->container['modify_contact_infos'] = isset($data['modify_contact_infos']) ? $data['modify_contact_infos'] : null;
        $this->container['remove_contact_infos'] = isset($data['remove_contact_infos']) ? $data['remove_contact_infos'] : null;
        $this->container['add_images'] = isset($data['add_images']) ? $data['add_images'] : null;
        $this->container['remove_images'] = isset($data['remove_images']) ? $data['remove_images'] : null;
        $this->container['reorder_images'] = isset($data['reorder_images']) ? $data['reorder_images'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user
     *
     * @return AllOfFullProfileEditUser
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param AllOfFullProfileEditUser $user The basic fields. If null, the fields are not modified
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets create_land_line_phones
     *
     * @return \Cyclos\Api\Model\PhoneNew[]
     */
    public function getCreateLandLinePhones()
    {
        return $this->container['create_land_line_phones'];
    }

    /**
     * Sets create_land_line_phones
     *
     * @param \Cyclos\Api\Model\PhoneNew[] $create_land_line_phones Land-line phones to be created. If not sent / empty, no land-line phones are created.
     *
     * @return $this
     */
    public function setCreateLandLinePhones($create_land_line_phones)
    {
        $this->container['create_land_line_phones'] = $create_land_line_phones;

        return $this;
    }

    /**
     * Gets create_mobile_phones
     *
     * @return \Cyclos\Api\Model\PhoneNew[]
     */
    public function getCreateMobilePhones()
    {
        return $this->container['create_mobile_phones'];
    }

    /**
     * Sets create_mobile_phones
     *
     * @param \Cyclos\Api\Model\PhoneNew[] $create_mobile_phones Mobile phones to be created. If not sent / empty, no mobile phones are created.
     *
     * @return $this
     */
    public function setCreateMobilePhones($create_mobile_phones)
    {
        $this->container['create_mobile_phones'] = $create_mobile_phones;

        return $this;
    }

    /**
     * Gets modify_land_line_phones
     *
     * @return \Cyclos\Api\Model\PhoneEditWithId[]
     */
    public function getModifyLandLinePhones()
    {
        return $this->container['modify_land_line_phones'];
    }

    /**
     * Sets modify_land_line_phones
     *
     * @param \Cyclos\Api\Model\PhoneEditWithId[] $modify_land_line_phones Land-line phones to be modified. If not sent / empty, no land-line phones are modified
     *
     * @return $this
     */
    public function setModifyLandLinePhones($modify_land_line_phones)
    {
        $this->container['modify_land_line_phones'] = $modify_land_line_phones;

        return $this;
    }

    /**
     * Gets modify_mobile_phones
     *
     * @return \Cyclos\Api\Model\PhoneEditWithId[]
     */
    public function getModifyMobilePhones()
    {
        return $this->container['modify_mobile_phones'];
    }

    /**
     * Sets modify_mobile_phones
     *
     * @param \Cyclos\Api\Model\PhoneEditWithId[] $modify_mobile_phones Mobile phones to be modified. If not sent / empty, no mobile phones are modified.
     *
     * @return $this
     */
    public function setModifyMobilePhones($modify_mobile_phones)
    {
        $this->container['modify_mobile_phones'] = $modify_mobile_phones;

        return $this;
    }

    /**
     * Gets remove_phones
     *
     * @return string[]
     */
    public function getRemovePhones()
    {
        return $this->container['remove_phones'];
    }

    /**
     * Sets remove_phones
     *
     * @param string[] $remove_phones Phones (both land-line and mobile) to be removed. If not sent / empty, no phones are removed.
     *
     * @return $this
     */
    public function setRemovePhones($remove_phones)
    {
        $this->container['remove_phones'] = $remove_phones;

        return $this;
    }

    /**
     * Gets create_addresses
     *
     * @return \Cyclos\Api\Model\AddressNew[]
     */
    public function getCreateAddresses()
    {
        return $this->container['create_addresses'];
    }

    /**
     * Sets create_addresses
     *
     * @param \Cyclos\Api\Model\AddressNew[] $create_addresses Addresses to be created. If not sent / empty, no addresses are created.
     *
     * @return $this
     */
    public function setCreateAddresses($create_addresses)
    {
        $this->container['create_addresses'] = $create_addresses;

        return $this;
    }

    /**
     * Gets modify_addresses
     *
     * @return \Cyclos\Api\Model\AddressEditWithId[]
     */
    public function getModifyAddresses()
    {
        return $this->container['modify_addresses'];
    }

    /**
     * Sets modify_addresses
     *
     * @param \Cyclos\Api\Model\AddressEditWithId[] $modify_addresses Addresses to be modified. If not sent / empty, no addresses are modified.
     *
     * @return $this
     */
    public function setModifyAddresses($modify_addresses)
    {
        $this->container['modify_addresses'] = $modify_addresses;

        return $this;
    }

    /**
     * Gets remove_addresses
     *
     * @return string[]
     */
    public function getRemoveAddresses()
    {
        return $this->container['remove_addresses'];
    }

    /**
     * Sets remove_addresses
     *
     * @param string[] $remove_addresses Addresses to be removed. If not sent / empty, no addresses are removed.
     *
     * @return $this
     */
    public function setRemoveAddresses($remove_addresses)
    {
        $this->container['remove_addresses'] = $remove_addresses;

        return $this;
    }

    /**
     * Gets create_contact_infos
     *
     * @return \Cyclos\Api\Model\ContactInfoNew[]
     */
    public function getCreateContactInfos()
    {
        return $this->container['create_contact_infos'];
    }

    /**
     * Sets create_contact_infos
     *
     * @param \Cyclos\Api\Model\ContactInfoNew[] $create_contact_infos Additional contacts to be created. If not sent / empty, no additional contacts are created.
     *
     * @return $this
     */
    public function setCreateContactInfos($create_contact_infos)
    {
        $this->container['create_contact_infos'] = $create_contact_infos;

        return $this;
    }

    /**
     * Gets modify_contact_infos
     *
     * @return \Cyclos\Api\Model\ContactInfoEditWithId[]
     */
    public function getModifyContactInfos()
    {
        return $this->container['modify_contact_infos'];
    }

    /**
     * Sets modify_contact_infos
     *
     * @param \Cyclos\Api\Model\ContactInfoEditWithId[] $modify_contact_infos Additional contacts to be modified. If not sent / empty, no additional contacts are modified.
     *
     * @return $this
     */
    public function setModifyContactInfos($modify_contact_infos)
    {
        $this->container['modify_contact_infos'] = $modify_contact_infos;

        return $this;
    }

    /**
     * Gets remove_contact_infos
     *
     * @return string[]
     */
    public function getRemoveContactInfos()
    {
        return $this->container['remove_contact_infos'];
    }

    /**
     * Sets remove_contact_infos
     *
     * @param string[] $remove_contact_infos Additional contacts to be removed. If not sent / empty, no additional contacts are removed.
     *
     * @return $this
     */
    public function setRemoveContactInfos($remove_contact_infos)
    {
        $this->container['remove_contact_infos'] = $remove_contact_infos;

        return $this;
    }

    /**
     * Gets add_images
     *
     * @return string[]
     */
    public function getAddImages()
    {
        return $this->container['add_images'];
    }

    /**
     * Sets add_images
     *
     * @param string[] $add_images Identifiers of previously uploaded temporary images to be added as profile images. If not sent / empty, no images are added.
     *
     * @return $this
     */
    public function setAddImages($add_images)
    {
        $this->container['add_images'] = $add_images;

        return $this;
    }

    /**
     * Gets remove_images
     *
     * @return string[]
     */
    public function getRemoveImages()
    {
        return $this->container['remove_images'];
    }

    /**
     * Sets remove_images
     *
     * @param string[] $remove_images Identifiers of existing profile images to be removed. If not sent / empty, no images are removed.
     *
     * @return $this
     */
    public function setRemoveImages($remove_images)
    {
        $this->container['remove_images'] = $remove_images;

        return $this;
    }

    /**
     * Gets reorder_images
     *
     * @return string[]
     */
    public function getReorderImages()
    {
        return $this->container['reorder_images'];
    }

    /**
     * Sets reorder_images
     *
     * @param string[] $reorder_images Identifiers of either existing or added profile images in the order they should be listed.
     *
     * @return $this
     */
    public function setReorderImages($reorder_images)
    {
        $this->container['reorder_images'] = $reorder_images;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
