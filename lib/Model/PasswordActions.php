<?php
/**
 * PasswordActions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;

use \ArrayAccess;
use \Cyclos\Api\ObjectSerializer;

/**
 * PasswordActions Class Doc Comment
 *
 * @category Class
 * @description Indicates the possible actions the authenticated user can perform over this password
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PasswordActions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PasswordActions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'change' => 'bool',
'change_generated' => 'bool',
'generate' => 'bool',
'allow_generation' => 'bool',
'disable' => 'bool',
'enable' => 'bool',
'reset_generated' => 'bool',
'reset_and_send' => 'bool',
'unblock' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'change' => null,
'change_generated' => null,
'generate' => null,
'allow_generation' => null,
'disable' => null,
'enable' => null,
'reset_generated' => null,
'reset_and_send' => null,
'unblock' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'change' => 'change',
'change_generated' => 'changeGenerated',
'generate' => 'generate',
'allow_generation' => 'allowGeneration',
'disable' => 'disable',
'enable' => 'enable',
'reset_generated' => 'resetGenerated',
'reset_and_send' => 'resetAndSend',
'unblock' => 'unblock'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'change' => 'setChange',
'change_generated' => 'setChangeGenerated',
'generate' => 'setGenerate',
'allow_generation' => 'setAllowGeneration',
'disable' => 'setDisable',
'enable' => 'setEnable',
'reset_generated' => 'setResetGenerated',
'reset_and_send' => 'setResetAndSend',
'unblock' => 'setUnblock'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'change' => 'getChange',
'change_generated' => 'getChangeGenerated',
'generate' => 'getGenerate',
'allow_generation' => 'getAllowGeneration',
'disable' => 'getDisable',
'enable' => 'getEnable',
'reset_generated' => 'getResetGenerated',
'reset_and_send' => 'getResetAndSend',
'unblock' => 'getUnblock'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['change'] = isset($data['change']) ? $data['change'] : null;
        $this->container['change_generated'] = isset($data['change_generated']) ? $data['change_generated'] : null;
        $this->container['generate'] = isset($data['generate']) ? $data['generate'] : null;
        $this->container['allow_generation'] = isset($data['allow_generation']) ? $data['allow_generation'] : null;
        $this->container['disable'] = isset($data['disable']) ? $data['disable'] : null;
        $this->container['enable'] = isset($data['enable']) ? $data['enable'] : null;
        $this->container['reset_generated'] = isset($data['reset_generated']) ? $data['reset_generated'] : null;
        $this->container['reset_and_send'] = isset($data['reset_and_send']) ? $data['reset_and_send'] : null;
        $this->container['unblock'] = isset($data['unblock']) ? $data['unblock'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets change
     *
     * @return bool
     */
    public function getChange()
    {
        return $this->container['change'];
    }

    /**
     * Sets change
     *
     * @param bool $change Manually change the password.
     *
     * @return $this
     */
    public function setChange($change)
    {
        $this->container['change'] = $change;

        return $this;
    }

    /**
     * Gets change_generated
     *
     * @return bool
     */
    public function getChangeGenerated()
    {
        return $this->container['change_generated'];
    }

    /**
     * Sets change_generated
     *
     * @param bool $change_generated Manually generate another value for a generated password. Can only be  done for the authenticated user himself.
     *
     * @return $this
     */
    public function setChangeGenerated($change_generated)
    {
        $this->container['change_generated'] = $change_generated;

        return $this;
    }

    /**
     * Gets generate
     *
     * @return bool
     */
    public function getGenerate()
    {
        return $this->container['generate'];
    }

    /**
     * Sets generate
     *
     * @param bool $generate Generate the password value for the first time. Can only be done for the authenticated user himself.
     *
     * @return $this
     */
    public function setGenerate($generate)
    {
        $this->container['generate'] = $generate;

        return $this;
    }

    /**
     * Gets allow_generation
     *
     * @return bool
     */
    public function getAllowGeneration()
    {
        return $this->container['allow_generation'];
    }

    /**
     * Sets allow_generation
     *
     * @param bool $allow_generation Granted only for those generated passwords that have a setting to  require administration authorization and have the status  `neverCreated`. Can only be done by administrators with permissions to enable/disable  the password.
     *
     * @return $this
     */
    public function setAllowGeneration($allow_generation)
    {
        $this->container['allow_generation'] = $allow_generation;

        return $this;
    }

    /**
     * Gets disable
     *
     * @return bool
     */
    public function getDisable()
    {
        return $this->container['disable'];
    }

    /**
     * Sets disable
     *
     * @param bool $disable Disables a password, making it unusable until being enabled again.
     *
     * @return $this
     */
    public function setDisable($disable)
    {
        $this->container['disable'] = $disable;

        return $this;
    }

    /**
     * Gets enable
     *
     * @return bool
     */
    public function getEnable()
    {
        return $this->container['enable'];
    }

    /**
     * Sets enable
     *
     * @param bool $enable Enables a disabled password, either manually disabled or by exceeding the wrong tries, depending on the password type configuration.
     *
     * @return $this
     */
    public function setEnable($enable)
    {
        $this->container['enable'] = $enable;

        return $this;
    }

    /**
     * Gets reset_generated
     *
     * @return bool
     */
    public function getResetGenerated()
    {
        return $this->container['reset_generated'];
    }

    /**
     * Sets reset_generated
     *
     * @param bool $reset_generated Resets a generated password, making it go back to the  `pending` state. The user will then be able to generate a new value for it.
     *
     * @return $this
     */
    public function setResetGenerated($reset_generated)
    {
        $this->container['reset_generated'] = $reset_generated;

        return $this;
    }

    /**
     * Gets reset_and_send
     *
     * @return bool
     */
    public function getResetAndSend()
    {
        return $this->container['reset_and_send'];
    }

    /**
     * Sets reset_and_send
     *
     * @param bool $reset_and_send Resets a manual password to a generated value and send it to the user. Can also be used to reset and send the main channel's access password if it is generated. The new password is initially expired, so the user needs to change it on first login.
     *
     * @return $this
     */
    public function setResetAndSend($reset_and_send)
    {
        $this->container['reset_and_send'] = $reset_and_send;

        return $this;
    }

    /**
     * Gets unblock
     *
     * @return bool
     */
    public function getUnblock()
    {
        return $this->container['unblock'];
    }

    /**
     * Sets unblock
     *
     * @param bool $unblock Unblocks a password which has been blocked by exceeding the wrong tries
     *
     * @return $this
     */
    public function setUnblock($unblock)
    {
        $this->container['unblock'] = $unblock;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
