<?php
/**
 * UserView
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;
use \Cyclos\Api\ObjectSerializer;

/**
 * UserView Class Doc Comment
 *
 * @category Class
 * @description Represents a user with all data for viewing the profile
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserView extends User 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserView';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'username' => 'string',
'email' => 'string',
'email_pending_validation' => 'string',
'enabled_profile_fields' => 'string[]',
'custom_values' => '\Cyclos\Api\Model\UserCustomFieldValue[]',
'group' => '',
'group_set' => '',
'status' => '',
'additional_images' => '\Cyclos\Api\Model\Image[]',
'addresses' => '\Cyclos\Api\Model\AddressView[]',
'phones' => '\Cyclos\Api\Model\PhoneView[]',
'contact_infos' => '\Cyclos\Api\Model\ContactInfoDetailed[]',
'contact' => '',
'registration_date' => '\DateTime',
'activation_date' => '\DateTime',
'online' => 'bool',
'last_login' => '\DateTime',
'first_login' => '\DateTime',
'permissions' => '',
'brokers' => '\Cyclos\Api\Model\BrokerView[]',
'role' => '\Cyclos\Api\Model\RoleEnum',
'relationship' => '\Cyclos\Api\Model\UserRelationshipEnum'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'username' => null,
'email' => null,
'email_pending_validation' => null,
'enabled_profile_fields' => null,
'custom_values' => null,
'group' => null,
'group_set' => null,
'status' => null,
'additional_images' => null,
'addresses' => null,
'phones' => null,
'contact_infos' => null,
'contact' => null,
'registration_date' => 'date-time',
'activation_date' => 'date-time',
'online' => null,
'last_login' => 'date-time',
'first_login' => 'date-time',
'permissions' => null,
'brokers' => null,
'role' => null,
'relationship' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'username' => 'username',
'email' => 'email',
'email_pending_validation' => 'emailPendingValidation',
'enabled_profile_fields' => 'enabledProfileFields',
'custom_values' => 'customValues',
'group' => 'group',
'group_set' => 'groupSet',
'status' => 'status',
'additional_images' => 'additionalImages',
'addresses' => 'addresses',
'phones' => 'phones',
'contact_infos' => 'contactInfos',
'contact' => 'contact',
'registration_date' => 'registrationDate',
'activation_date' => 'activationDate',
'online' => 'online',
'last_login' => 'lastLogin',
'first_login' => 'firstLogin',
'permissions' => 'permissions',
'brokers' => 'brokers',
'role' => 'role',
'relationship' => 'relationship'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'username' => 'setUsername',
'email' => 'setEmail',
'email_pending_validation' => 'setEmailPendingValidation',
'enabled_profile_fields' => 'setEnabledProfileFields',
'custom_values' => 'setCustomValues',
'group' => 'setGroup',
'group_set' => 'setGroupSet',
'status' => 'setStatus',
'additional_images' => 'setAdditionalImages',
'addresses' => 'setAddresses',
'phones' => 'setPhones',
'contact_infos' => 'setContactInfos',
'contact' => 'setContact',
'registration_date' => 'setRegistrationDate',
'activation_date' => 'setActivationDate',
'online' => 'setOnline',
'last_login' => 'setLastLogin',
'first_login' => 'setFirstLogin',
'permissions' => 'setPermissions',
'brokers' => 'setBrokers',
'role' => 'setRole',
'relationship' => 'setRelationship'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'username' => 'getUsername',
'email' => 'getEmail',
'email_pending_validation' => 'getEmailPendingValidation',
'enabled_profile_fields' => 'getEnabledProfileFields',
'custom_values' => 'getCustomValues',
'group' => 'getGroup',
'group_set' => 'getGroupSet',
'status' => 'getStatus',
'additional_images' => 'getAdditionalImages',
'addresses' => 'getAddresses',
'phones' => 'getPhones',
'contact_infos' => 'getContactInfos',
'contact' => 'getContact',
'registration_date' => 'getRegistrationDate',
'activation_date' => 'getActivationDate',
'online' => 'getOnline',
'last_login' => 'getLastLogin',
'first_login' => 'getFirstLogin',
'permissions' => 'getPermissions',
'brokers' => 'getBrokers',
'role' => 'getRole',
'relationship' => 'getRelationship'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['email_pending_validation'] = isset($data['email_pending_validation']) ? $data['email_pending_validation'] : null;
        $this->container['enabled_profile_fields'] = isset($data['enabled_profile_fields']) ? $data['enabled_profile_fields'] : null;
        $this->container['custom_values'] = isset($data['custom_values']) ? $data['custom_values'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['group_set'] = isset($data['group_set']) ? $data['group_set'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['additional_images'] = isset($data['additional_images']) ? $data['additional_images'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['phones'] = isset($data['phones']) ? $data['phones'] : null;
        $this->container['contact_infos'] = isset($data['contact_infos']) ? $data['contact_infos'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['registration_date'] = isset($data['registration_date']) ? $data['registration_date'] : null;
        $this->container['activation_date'] = isset($data['activation_date']) ? $data['activation_date'] : null;
        $this->container['online'] = isset($data['online']) ? $data['online'] : null;
        $this->container['last_login'] = isset($data['last_login']) ? $data['last_login'] : null;
        $this->container['first_login'] = isset($data['first_login']) ? $data['first_login'] : null;
        $this->container['permissions'] = isset($data['permissions']) ? $data['permissions'] : null;
        $this->container['brokers'] = isset($data['brokers']) ? $data['brokers'] : null;
        $this->container['role'] = isset($data['role']) ? $data['role'] : null;
        $this->container['relationship'] = isset($data['relationship']) ? $data['relationship'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The user's full name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username The user's login name
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The user's e-mail
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets email_pending_validation
     *
     * @return string
     */
    public function getEmailPendingValidation()
    {
        return $this->container['email_pending_validation'];
    }

    /**
     * Sets email_pending_validation
     *
     * @param string $email_pending_validation Returned for managers / own user when the user has changed his e-mail but hasn't yet validated the new e-mail. The e-mail change validation is a configuration in Cyclos.
     *
     * @return $this
     */
    public function setEmailPendingValidation($email_pending_validation)
    {
        $this->container['email_pending_validation'] = $email_pending_validation;

        return $this;
    }

    /**
     * Gets enabled_profile_fields
     *
     * @return string[]
     */
    public function getEnabledProfileFields()
    {
        return $this->container['enabled_profile_fields'];
    }

    /**
     * Sets enabled_profile_fields
     *
     * @param string[] $enabled_profile_fields The internal names of profile fields enabled for this user. For example, the user might have no phones, but it might be because he is not allowed to have phones or because there are currently no phones. Same for addresses, images and optional profile fields.
     *
     * @return $this
     */
    public function setEnabledProfileFields($enabled_profile_fields)
    {
        $this->container['enabled_profile_fields'] = $enabled_profile_fields;

        return $this;
    }

    /**
     * Gets custom_values
     *
     * @return \Cyclos\Api\Model\UserCustomFieldValue[]
     */
    public function getCustomValues()
    {
        return $this->container['custom_values'];
    }

    /**
     * Sets custom_values
     *
     * @param \Cyclos\Api\Model\UserCustomFieldValue[] $custom_values The list of custom field values this user has
     *
     * @return $this
     */
    public function setCustomValues($custom_values)
    {
        $this->container['custom_values'] = $custom_values;

        return $this;
    }

    /**
     * Gets group
     *
     * @return 
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param  $group Reference to the user group. Is only returned if the authenticated user has permission to see groups.
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets group_set
     *
     * @return 
     */
    public function getGroupSet()
    {
        return $this->container['group_set'];
    }

    /**
     * Sets group_set
     *
     * @param  $group_set Reference to the user group set. Is only returned if the authenticated user has permission to see group sets and the user group is in a group set.
     *
     * @return $this
     */
    public function setGroupSet($group_set)
    {
        $this->container['group_set'] = $group_set;

        return $this;
    }

    /**
     * Gets status
     *
     * @return 
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param  $status The user status. Only returned if the authenticated user has permission to view the user status.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets additional_images
     *
     * @return \Cyclos\Api\Model\Image[]
     */
    public function getAdditionalImages()
    {
        return $this->container['additional_images'];
    }

    /**
     * Sets additional_images
     *
     * @param \Cyclos\Api\Model\Image[] $additional_images Holds the images other than the primary image, which is returned in the `image` field
     *
     * @return $this
     */
    public function setAdditionalImages($additional_images)
    {
        $this->container['additional_images'] = $additional_images;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \Cyclos\Api\Model\AddressView[]
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \Cyclos\Api\Model\AddressView[] $addresses Visible addresses
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets phones
     *
     * @return \Cyclos\Api\Model\PhoneView[]
     */
    public function getPhones()
    {
        return $this->container['phones'];
    }

    /**
     * Sets phones
     *
     * @param \Cyclos\Api\Model\PhoneView[] $phones Visible phones
     *
     * @return $this
     */
    public function setPhones($phones)
    {
        $this->container['phones'] = $phones;

        return $this;
    }

    /**
     * Gets contact_infos
     *
     * @return \Cyclos\Api\Model\ContactInfoDetailed[]
     */
    public function getContactInfos()
    {
        return $this->container['contact_infos'];
    }

    /**
     * Sets contact_infos
     *
     * @param \Cyclos\Api\Model\ContactInfoDetailed[] $contact_infos Visible additional contact information
     *
     * @return $this
     */
    public function setContactInfos($contact_infos)
    {
        $this->container['contact_infos'] = $contact_infos;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return 
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param  $contact When this user is in the contact list of the currently logged user, returns data about the contact relation. When not returned, this user is no in the logged user's contact list.
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets registration_date
     *
     * @return \DateTime
     */
    public function getRegistrationDate()
    {
        return $this->container['registration_date'];
    }

    /**
     * Sets registration_date
     *
     * @param \DateTime $registration_date The date the user was registered. Only returned if the logged user manages the given used.
     *
     * @return $this
     */
    public function setRegistrationDate($registration_date)
    {
        $this->container['registration_date'] = $registration_date;

        return $this;
    }

    /**
     * Gets activation_date
     *
     * @return \DateTime
     */
    public function getActivationDate()
    {
        return $this->container['activation_date'];
    }

    /**
     * Sets activation_date
     *
     * @param \DateTime $activation_date The date the user was made active the first time. Only returned if the logged user manages the given used.
     *
     * @return $this
     */
    public function setActivationDate($activation_date)
    {
        $this->container['activation_date'] = $activation_date;

        return $this;
    }

    /**
     * Gets online
     *
     * @return bool
     */
    public function getOnline()
    {
        return $this->container['online'];
    }

    /**
     * Sets online
     *
     * @param bool $online Indicates whether the given user is logged-in to the system. Only returned if the logged user manages the given used.
     *
     * @return $this
     */
    public function setOnline($online)
    {
        $this->container['online'] = $online;

        return $this;
    }

    /**
     * Gets last_login
     *
     * @return \DateTime
     */
    public function getLastLogin()
    {
        return $this->container['last_login'];
    }

    /**
     * Sets last_login
     *
     * @param \DateTime $last_login The last time the user logged in, or null if never logged in. Only returned if the logged user manages the given used.
     *
     * @return $this
     */
    public function setLastLogin($last_login)
    {
        $this->container['last_login'] = $last_login;

        return $this;
    }

    /**
     * Gets first_login
     *
     * @return \DateTime
     */
    public function getFirstLogin()
    {
        return $this->container['first_login'];
    }

    /**
     * Sets first_login
     *
     * @param \DateTime $first_login The first time the user logged in, or null if never logged in. Only returned if the logged user manages the given used.
     *
     * @return $this
     */
    public function setFirstLogin($first_login)
    {
        $this->container['first_login'] = $first_login;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return 
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param  $permissions Permissions the authenticated has over this user
     *
     * @return $this
     */
    public function setPermissions($permissions)
    {
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets brokers
     *
     * @return \Cyclos\Api\Model\BrokerView[]
     */
    public function getBrokers()
    {
        return $this->container['brokers'];
    }

    /**
     * Sets brokers
     *
     * @param \Cyclos\Api\Model\BrokerView[] $brokers Visible brokers
     *
     * @return $this
     */
    public function setBrokers($brokers)
    {
        $this->container['brokers'] = $brokers;

        return $this;
    }

    /**
     * Gets role
     *
     * @return \Cyclos\Api\Model\RoleEnum
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param \Cyclos\Api\Model\RoleEnum $role role
     *
     * @return $this
     */
    public function setRole($role)
    {
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets relationship
     *
     * @return \Cyclos\Api\Model\UserRelationshipEnum
     */
    public function getRelationship()
    {
        return $this->container['relationship'];
    }

    /**
     * Sets relationship
     *
     * @param \Cyclos\Api\Model\UserRelationshipEnum $relationship relationship
     *
     * @return $this
     */
    public function setRelationship($relationship)
    {
        $this->container['relationship'] = $relationship;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
