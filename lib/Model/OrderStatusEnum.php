<?php
/**
 * OrderStatusEnum
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;
use \Cyclos\Api\ObjectSerializer;

/**
 * OrderStatusEnum Class Doc Comment
 *
 * @category Class
 * @description The possible statuses for an order Possible values are: - &#x60;completed&#x60;: The order was accepted by the seller and/or buyer and the related payment was done. - &#x60;disposed&#x60;: The order was marked as disposed because the seller and/or buyer were removed or they do not have any account in the order&#x27;s currency. - &#x60;draft&#x60;: The order has been created by the seller, but has not yet been sent to the buyer for approval - &#x60;paymentCanceled&#x60;: The related payment was not done because was canceled after finish the authorization process. - &#x60;paymentDenied&#x60;: The related payment was not done because was denied. - &#x60;paymentExpired&#x60;: The related payment was not done because the pending authorization has expired. - &#x60;paymentPending&#x60;: The order was accepted by the seller and/or buyer and the related payment is waiting for authorization. - &#x60;pendingBuyer&#x60;: The order is pending by the buyer&#x27;s action. - &#x60;pendingSeller&#x60;: The order is pending by the seller&#x27;s action. - &#x60;rejectedByBuyer&#x60;: The order was rejected by the buyer. - &#x60;rejectedBySeller&#x60;: The order was rejected by the seller.
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderStatusEnum
{
    /**
     * Possible values of this enum
     */
    const COMPLETED = 'completed';
const DISPOSED = 'disposed';
const DRAFT = 'draft';
const PAYMENT_CANCELED = 'paymentCanceled';
const PAYMENT_DENIED = 'paymentDenied';
const PAYMENT_EXPIRED = 'paymentExpired';
const PAYMENT_PENDING = 'paymentPending';
const PENDING_BUYER = 'pendingBuyer';
const PENDING_SELLER = 'pendingSeller';
const REJECTED_BY_BUYER = 'rejectedByBuyer';
const REJECTED_BY_SELLER = 'rejectedBySeller';
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public static function getAllowableEnumValues()
    {
        return [
            self::COMPLETED,
self::DISPOSED,
self::DRAFT,
self::PAYMENT_CANCELED,
self::PAYMENT_DENIED,
self::PAYMENT_EXPIRED,
self::PAYMENT_PENDING,
self::PENDING_BUYER,
self::PENDING_SELLER,
self::REJECTED_BY_BUYER,
self::REJECTED_BY_SELLER,        ];
    }
}
