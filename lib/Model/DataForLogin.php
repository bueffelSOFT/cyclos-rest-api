<?php
/**
 * DataForLogin
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;

use \ArrayAccess;
use \Cyclos\Api\ObjectSerializer;

/**
 * DataForLogin Class Doc Comment
 *
 * @category Class
 * @description Contains data useful for a login form, as well as forgot password
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DataForLogin implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForLogin';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'access_password_type' => 'AllOfDataForLoginAccessPasswordType',
'principal_types' => '\Cyclos\Api\Model\PrincipalTypeInput[]',
'default_principal_type' => 'string',
'extra_forgot_password_principal_types' => '\Cyclos\Api\Model\PrincipalTypeInput[]',
'login_password_input' => 'AllOfDataForLoginLoginPasswordInput',
'pin_active' => 'bool',
'device_confirmation' => 'AllOfDataForLoginDeviceConfirmation',
'forgot_password_captcha_provider' => 'AllOfDataForLoginForgotPasswordCaptchaProvider',
'forgot_password_mediums' => '\Cyclos\Api\Model\SendMediumEnum[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'access_password_type' => null,
'principal_types' => null,
'default_principal_type' => null,
'extra_forgot_password_principal_types' => null,
'login_password_input' => null,
'pin_active' => null,
'device_confirmation' => null,
'forgot_password_captcha_provider' => null,
'forgot_password_mediums' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'access_password_type' => 'accessPasswordType',
'principal_types' => 'principalTypes',
'default_principal_type' => 'defaultPrincipalType',
'extra_forgot_password_principal_types' => 'extraForgotPasswordPrincipalTypes',
'login_password_input' => 'loginPasswordInput',
'pin_active' => 'pinActive',
'device_confirmation' => 'deviceConfirmation',
'forgot_password_captcha_provider' => 'forgotPasswordCaptchaProvider',
'forgot_password_mediums' => 'forgotPasswordMediums'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'access_password_type' => 'setAccessPasswordType',
'principal_types' => 'setPrincipalTypes',
'default_principal_type' => 'setDefaultPrincipalType',
'extra_forgot_password_principal_types' => 'setExtraForgotPasswordPrincipalTypes',
'login_password_input' => 'setLoginPasswordInput',
'pin_active' => 'setPinActive',
'device_confirmation' => 'setDeviceConfirmation',
'forgot_password_captcha_provider' => 'setForgotPasswordCaptchaProvider',
'forgot_password_mediums' => 'setForgotPasswordMediums'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'access_password_type' => 'getAccessPasswordType',
'principal_types' => 'getPrincipalTypes',
'default_principal_type' => 'getDefaultPrincipalType',
'extra_forgot_password_principal_types' => 'getExtraForgotPasswordPrincipalTypes',
'login_password_input' => 'getLoginPasswordInput',
'pin_active' => 'getPinActive',
'device_confirmation' => 'getDeviceConfirmation',
'forgot_password_captcha_provider' => 'getForgotPasswordCaptchaProvider',
'forgot_password_mediums' => 'getForgotPasswordMediums'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['access_password_type'] = isset($data['access_password_type']) ? $data['access_password_type'] : null;
        $this->container['principal_types'] = isset($data['principal_types']) ? $data['principal_types'] : null;
        $this->container['default_principal_type'] = isset($data['default_principal_type']) ? $data['default_principal_type'] : null;
        $this->container['extra_forgot_password_principal_types'] = isset($data['extra_forgot_password_principal_types']) ? $data['extra_forgot_password_principal_types'] : null;
        $this->container['login_password_input'] = isset($data['login_password_input']) ? $data['login_password_input'] : null;
        $this->container['pin_active'] = isset($data['pin_active']) ? $data['pin_active'] : null;
        $this->container['device_confirmation'] = isset($data['device_confirmation']) ? $data['device_confirmation'] : null;
        $this->container['forgot_password_captcha_provider'] = isset($data['forgot_password_captcha_provider']) ? $data['forgot_password_captcha_provider'] : null;
        $this->container['forgot_password_mediums'] = isset($data['forgot_password_mediums']) ? $data['forgot_password_mediums'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets access_password_type
     *
     * @return AllOfDataForLoginAccessPasswordType
     */
    public function getAccessPasswordType()
    {
        return $this->container['access_password_type'];
    }

    /**
     * Sets access_password_type
     *
     * @param AllOfDataForLoginAccessPasswordType $access_password_type The password type used for login access
     *
     * @return $this
     */
    public function setAccessPasswordType($access_password_type)
    {
        $this->container['access_password_type'] = $access_password_type;

        return $this;
    }

    /**
     * Gets principal_types
     *
     * @return \Cyclos\Api\Model\PrincipalTypeInput[]
     */
    public function getPrincipalTypes()
    {
        return $this->container['principal_types'];
    }

    /**
     * Sets principal_types
     *
     * @param \Cyclos\Api\Model\PrincipalTypeInput[] $principal_types The identification methods accepted for login
     *
     * @return $this
     */
    public function setPrincipalTypes($principal_types)
    {
        $this->container['principal_types'] = $principal_types;

        return $this;
    }

    /**
     * Gets default_principal_type
     *
     * @return string
     */
    public function getDefaultPrincipalType()
    {
        return $this->container['default_principal_type'];
    }

    /**
     * Sets default_principal_type
     *
     * @param string $default_principal_type The internal name of the identification method that is marked as default for the current channel configuration. This is optional, and if there is no default, all possible identification methods will be attempted for login.
     *
     * @return $this
     */
    public function setDefaultPrincipalType($default_principal_type)
    {
        $this->container['default_principal_type'] = $default_principal_type;

        return $this;
    }

    /**
     * Gets extra_forgot_password_principal_types
     *
     * @return \Cyclos\Api\Model\PrincipalTypeInput[]
     */
    public function getExtraForgotPasswordPrincipalTypes()
    {
        return $this->container['extra_forgot_password_principal_types'];
    }

    /**
     * Sets extra_forgot_password_principal_types
     *
     * @param \Cyclos\Api\Model\PrincipalTypeInput[] $extra_forgot_password_principal_types The additional identification methods also accepted for the forgotten password request.
     *
     * @return $this
     */
    public function setExtraForgotPasswordPrincipalTypes($extra_forgot_password_principal_types)
    {
        $this->container['extra_forgot_password_principal_types'] = $extra_forgot_password_principal_types;

        return $this;
    }

    /**
     * Gets login_password_input
     *
     * @return AllOfDataForLoginLoginPasswordInput
     */
    public function getLoginPasswordInput()
    {
        return $this->container['login_password_input'];
    }

    /**
     * Sets login_password_input
     *
     * @param AllOfDataForLoginLoginPasswordInput $login_password_input Contains data for the password used on login
     *
     * @return $this
     */
    public function setLoginPasswordInput($login_password_input)
    {
        $this->container['login_password_input'] = $login_password_input;

        return $this;
    }

    /**
     * Gets pin_active
     *
     * @return bool
     */
    public function getPinActive()
    {
        return $this->container['pin_active'];
    }

    /**
     * Sets pin_active
     *
     * @param bool $pin_active Whether the given pin, when requesting the data, can be used for login or not. Only if a `pinId` was given when requesting the data, and the `loginPasswordInput.pinAvailability` is not `disabled`.
     *
     * @return $this
     */
    public function setPinActive($pin_active)
    {
        $this->container['pin_active'] = $pin_active;

        return $this;
    }

    /**
     * Gets device_confirmation
     *
     * @return AllOfDataForLoginDeviceConfirmation
     */
    public function getDeviceConfirmation()
    {
        return $this->container['device_confirmation'];
    }

    /**
     * Sets device_confirmation
     *
     * @param AllOfDataForLoginDeviceConfirmation $device_confirmation The pending device confirmation used to confirm a trusted session. Only returned if a trusted device identification was given when requesting the data and it exists and is active.
     *
     * @return $this
     */
    public function setDeviceConfirmation($device_confirmation)
    {
        $this->container['device_confirmation'] = $device_confirmation;

        return $this;
    }

    /**
     * Gets forgot_password_captcha_provider
     *
     * @return AllOfDataForLoginForgotPasswordCaptchaProvider
     */
    public function getForgotPasswordCaptchaProvider()
    {
        return $this->container['forgot_password_captcha_provider'];
    }

    /**
     * Sets forgot_password_captcha_provider
     *
     * @param AllOfDataForLoginForgotPasswordCaptchaProvider $forgot_password_captcha_provider If the forgot password request requires a captcha, will be the provider used to request one. Otherwise will be null.
     *
     * @return $this
     */
    public function setForgotPasswordCaptchaProvider($forgot_password_captcha_provider)
    {
        $this->container['forgot_password_captcha_provider'] = $forgot_password_captcha_provider;

        return $this;
    }

    /**
     * Gets forgot_password_mediums
     *
     * @return \Cyclos\Api\Model\SendMediumEnum[]
     */
    public function getForgotPasswordMediums()
    {
        return $this->container['forgot_password_mediums'];
    }

    /**
     * Sets forgot_password_mediums
     *
     * @param \Cyclos\Api\Model\SendMediumEnum[] $forgot_password_mediums If the forgot password request is enabled, returns the mediums the user can choose to receive the confirmation key or code. If nothing is returned, forgot password is not enabled.
     *
     * @return $this
     */
    public function setForgotPasswordMediums($forgot_password_mediums)
    {
        $this->container['forgot_password_mediums'] = $forgot_password_mediums;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
