<?php
/**
 * VoucherResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;
use \Cyclos\Api\ObjectSerializer;

/**
 * VoucherResult Class Doc Comment
 *
 * @category Class
 * @description Result of a voucher search
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VoucherResult extends Voucher 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VoucherResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'owner' => '',
'buyer' => '',
'creation_date' => '\DateTime',
'expiration_date' => '\DateTime',
'redeem_by' => '',
'redeemer' => '',
'redeem_date' => '\DateTime',
'redeem_after_date' => '\DateTime',
'type' => '\Cyclos\Api\Model\VoucherType',
'redeem_on_week_days' => '\Cyclos\Api\Model\WeekDayEnum[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'owner' => null,
'buyer' => null,
'creation_date' => 'date-time',
'expiration_date' => 'date-time',
'redeem_by' => null,
'redeemer' => null,
'redeem_date' => 'date-time',
'redeem_after_date' => 'date-time',
'type' => null,
'redeem_on_week_days' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'owner' => 'owner',
'buyer' => 'buyer',
'creation_date' => 'creationDate',
'expiration_date' => 'expirationDate',
'redeem_by' => 'redeemBy',
'redeemer' => 'redeemer',
'redeem_date' => 'redeemDate',
'redeem_after_date' => 'redeemAfterDate',
'type' => 'type',
'redeem_on_week_days' => 'redeemOnWeekDays'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'owner' => 'setOwner',
'buyer' => 'setBuyer',
'creation_date' => 'setCreationDate',
'expiration_date' => 'setExpirationDate',
'redeem_by' => 'setRedeemBy',
'redeemer' => 'setRedeemer',
'redeem_date' => 'setRedeemDate',
'redeem_after_date' => 'setRedeemAfterDate',
'type' => 'setType',
'redeem_on_week_days' => 'setRedeemOnWeekDays'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'owner' => 'getOwner',
'buyer' => 'getBuyer',
'creation_date' => 'getCreationDate',
'expiration_date' => 'getExpirationDate',
'redeem_by' => 'getRedeemBy',
'redeemer' => 'getRedeemer',
'redeem_date' => 'getRedeemDate',
'redeem_after_date' => 'getRedeemAfterDate',
'type' => 'getType',
'redeem_on_week_days' => 'getRedeemOnWeekDays'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['buyer'] = isset($data['buyer']) ? $data['buyer'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['redeem_by'] = isset($data['redeem_by']) ? $data['redeem_by'] : null;
        $this->container['redeemer'] = isset($data['redeemer']) ? $data['redeemer'] : null;
        $this->container['redeem_date'] = isset($data['redeem_date']) ? $data['redeem_date'] : null;
        $this->container['redeem_after_date'] = isset($data['redeem_after_date']) ? $data['redeem_after_date'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['redeem_on_week_days'] = isset($data['redeem_on_week_days']) ? $data['redeem_on_week_days'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets owner
     *
     * @return 
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param  $owner The user a generated voucher was assigned to, if any.
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets buyer
     *
     * @return 
     */
    public function getBuyer()
    {
        return $this->container['buyer'];
    }

    /**
     * Sets buyer
     *
     * @param  $buyer The voucher buyer. Is not returned when the voucher was generated or when searching for bought vouchers of a user.
     *
     * @return $this
     */
    public function setBuyer($buyer)
    {
        $this->container['buyer'] = $buyer;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime $creation_date The date a voucher was generated or bought
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime $expiration_date The date a voucher expires
     *
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets redeem_by
     *
     * @return 
     */
    public function getRedeemBy()
    {
        return $this->container['redeem_by'];
    }

    /**
     * Sets redeem_by
     *
     * @param  $redeem_by The user who perform the redeem action, could be an admin, broker or operator of the redeemer. Is not returned when the voucher was not yet redeemed or if it is the same as the redeemer.
     *
     * @return $this
     */
    public function setRedeemBy($redeem_by)
    {
        $this->container['redeem_by'] = $redeem_by;

        return $this;
    }

    /**
     * Gets redeemer
     *
     * @return 
     */
    public function getRedeemer()
    {
        return $this->container['redeemer'];
    }

    /**
     * Sets redeemer
     *
     * @param  $redeemer The voucher redeemer. Is not returned when the voucher was not yet redeemed or when searching for redeemed vouchers of a user.
     *
     * @return $this
     */
    public function setRedeemer($redeemer)
    {
        $this->container['redeemer'] = $redeemer;

        return $this;
    }

    /**
     * Gets redeem_date
     *
     * @return \DateTime
     */
    public function getRedeemDate()
    {
        return $this->container['redeem_date'];
    }

    /**
     * Sets redeem_date
     *
     * @param \DateTime $redeem_date The date a voucher was redeemed (if so)
     *
     * @return $this
     */
    public function setRedeemDate($redeem_date)
    {
        $this->container['redeem_date'] = $redeem_date;

        return $this;
    }

    /**
     * Gets redeem_after_date
     *
     * @return \DateTime
     */
    public function getRedeemAfterDate()
    {
        return $this->container['redeem_after_date'];
    }

    /**
     * Sets redeem_after_date
     *
     * @param \DateTime $redeem_after_date The date after which the voucher can be redeemed. Is only returned if the voucher `status` is `open`.
     *
     * @return $this
     */
    public function setRedeemAfterDate($redeem_after_date)
    {
        $this->container['redeem_after_date'] = $redeem_after_date;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Cyclos\Api\Model\VoucherType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Cyclos\Api\Model\VoucherType $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets redeem_on_week_days
     *
     * @return \Cyclos\Api\Model\WeekDayEnum[]
     */
    public function getRedeemOnWeekDays()
    {
        return $this->container['redeem_on_week_days'];
    }

    /**
     * Sets redeem_on_week_days
     *
     * @param \Cyclos\Api\Model\WeekDayEnum[] $redeem_on_week_days The days of the week a voucher can be redeemed. Is only returned if the voucher `status` is `open`.
     *
     * @return $this
     */
    public function setRedeemOnWeekDays($redeem_on_week_days)
    {
        $this->container['redeem_on_week_days'] = $redeem_on_week_days;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
