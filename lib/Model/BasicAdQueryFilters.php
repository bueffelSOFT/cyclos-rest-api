<?php
/**
 * BasicAdQueryFilters
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;
use \Cyclos\Api\ObjectSerializer;

/**
 * BasicAdQueryFilters Class Doc Comment
 *
 * @category Class
 * @description Basic definitions for a advertisements search
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BasicAdQueryFilters extends FullTextWithDistanceQueryFilters 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BasicAdQueryFilters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'custom_fields' => 'string[]',
'category' => 'string',
'currency' => 'string',
'price_range' => 'float[]',
'product_number' => 'string',
'has_images' => 'bool',
'publication_period' => '\DateTime[]',
'expiration_period' => '\DateTime[]',
'kind' => '\Cyclos\Api\Model\AdKind',
'statuses' => '\Cyclos\Api\Model\AdStatusEnum[]',
'order_by' => '\Cyclos\Api\Model\AdOrderByEnum',
'address_result' => '\Cyclos\Api\Model\AdAddressResultEnum'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'custom_fields' => null,
'category' => null,
'currency' => null,
'price_range' => 'number',
'product_number' => null,
'has_images' => null,
'publication_period' => 'date-time',
'expiration_period' => 'date-time',
'kind' => null,
'statuses' => null,
'order_by' => null,
'address_result' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'custom_fields' => 'customFields',
'category' => 'category',
'currency' => 'currency',
'price_range' => 'priceRange',
'product_number' => 'productNumber',
'has_images' => 'hasImages',
'publication_period' => 'publicationPeriod',
'expiration_period' => 'expirationPeriod',
'kind' => 'kind',
'statuses' => 'statuses',
'order_by' => 'orderBy',
'address_result' => 'addressResult'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'custom_fields' => 'setCustomFields',
'category' => 'setCategory',
'currency' => 'setCurrency',
'price_range' => 'setPriceRange',
'product_number' => 'setProductNumber',
'has_images' => 'setHasImages',
'publication_period' => 'setPublicationPeriod',
'expiration_period' => 'setExpirationPeriod',
'kind' => 'setKind',
'statuses' => 'setStatuses',
'order_by' => 'setOrderBy',
'address_result' => 'setAddressResult'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'custom_fields' => 'getCustomFields',
'category' => 'getCategory',
'currency' => 'getCurrency',
'price_range' => 'getPriceRange',
'product_number' => 'getProductNumber',
'has_images' => 'getHasImages',
'publication_period' => 'getPublicationPeriod',
'expiration_period' => 'getExpirationPeriod',
'kind' => 'getKind',
'statuses' => 'getStatuses',
'order_by' => 'getOrderBy',
'address_result' => 'getAddressResult'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['price_range'] = isset($data['price_range']) ? $data['price_range'] : null;
        $this->container['product_number'] = isset($data['product_number']) ? $data['product_number'] : null;
        $this->container['has_images'] = isset($data['has_images']) ? $data['has_images'] : null;
        $this->container['publication_period'] = isset($data['publication_period']) ? $data['publication_period'] : null;
        $this->container['expiration_period'] = isset($data['expiration_period']) ? $data['expiration_period'] : null;
        $this->container['kind'] = isset($data['kind']) ? $data['kind'] : null;
        $this->container['statuses'] = isset($data['statuses']) ? $data['statuses'] : null;
        $this->container['order_by'] = isset($data['order_by']) ? $data['order_by'] : null;
        $this->container['address_result'] = isset($data['address_result']) ? $data['address_result'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets custom_fields
     *
     * @return string[]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param string[] $custom_fields Advertisement custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=tradeType:offer|search,extraDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `tradeType` is either `offer` or `search`, and whose `extraDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=extraDate:|2001-12-31`. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `customFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `customFields=dynamic:'business`.
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category Either id or internal name of a category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Either id or internal name of a currency for the price
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets price_range
     *
     * @return float[]
     */
    public function getPriceRange()
    {
        return $this->container['price_range'];
    }

    /**
     * Sets price_range
     *
     * @param float[] $price_range The minumum / maximum price. Used only if a currency is specified. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.
     *
     * @return $this
     */
    public function setPriceRange($price_range)
    {
        $this->container['price_range'] = $price_range;

        return $this;
    }

    /**
     * Gets product_number
     *
     * @return string
     */
    public function getProductNumber()
    {
        return $this->container['product_number'];
    }

    /**
     * Sets product_number
     *
     * @param string $product_number Textual search for a product number for webshop only.
     *
     * @return $this
     */
    public function setProductNumber($product_number)
    {
        $this->container['product_number'] = $product_number;

        return $this;
    }

    /**
     * Gets has_images
     *
     * @return bool
     */
    public function getHasImages()
    {
        return $this->container['has_images'];
    }

    /**
     * Sets has_images
     *
     * @param bool $has_images When set to `true` only advertisements with images are returned
     *
     * @return $this
     */
    public function setHasImages($has_images)
    {
        $this->container['has_images'] = $has_images;

        return $this;
    }

    /**
     * Gets publication_period
     *
     * @return \DateTime[]
     */
    public function getPublicationPeriod()
    {
        return $this->container['publication_period'];
    }

    /**
     * Sets publication_period
     *
     * @param \DateTime[] $publication_period The minimum / maximum publication date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.
     *
     * @return $this
     */
    public function setPublicationPeriod($publication_period)
    {
        $this->container['publication_period'] = $publication_period;

        return $this;
    }

    /**
     * Gets expiration_period
     *
     * @return \DateTime[]
     */
    public function getExpirationPeriod()
    {
        return $this->container['expiration_period'];
    }

    /**
     * Sets expiration_period
     *
     * @param \DateTime[] $expiration_period The minimum / maximum expiration date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.
     *
     * @return $this
     */
    public function setExpirationPeriod($expiration_period)
    {
        $this->container['expiration_period'] = $expiration_period;

        return $this;
    }

    /**
     * Gets kind
     *
     * @return \Cyclos\Api\Model\AdKind
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     *
     * @param \Cyclos\Api\Model\AdKind $kind kind
     *
     * @return $this
     */
    public function setKind($kind)
    {
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets statuses
     *
     * @return \Cyclos\Api\Model\AdStatusEnum[]
     */
    public function getStatuses()
    {
        return $this->container['statuses'];
    }

    /**
     * Sets statuses
     *
     * @param \Cyclos\Api\Model\AdStatusEnum[] $statuses statuses
     *
     * @return $this
     */
    public function setStatuses($statuses)
    {
        $this->container['statuses'] = $statuses;

        return $this;
    }

    /**
     * Gets order_by
     *
     * @return \Cyclos\Api\Model\AdOrderByEnum
     */
    public function getOrderBy()
    {
        return $this->container['order_by'];
    }

    /**
     * Sets order_by
     *
     * @param \Cyclos\Api\Model\AdOrderByEnum $order_by order_by
     *
     * @return $this
     */
    public function setOrderBy($order_by)
    {
        $this->container['order_by'] = $order_by;

        return $this;
    }

    /**
     * Gets address_result
     *
     * @return \Cyclos\Api\Model\AdAddressResultEnum
     */
    public function getAddressResult()
    {
        return $this->container['address_result'];
    }

    /**
     * Sets address_result
     *
     * @param \Cyclos\Api\Model\AdAddressResultEnum $address_result address_result
     *
     * @return $this
     */
    public function setAddressResult($address_result)
    {
        $this->container['address_result'] = $address_result;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
