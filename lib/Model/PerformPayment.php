<?php
/**
 * PerformPayment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;
use \Cyclos\Api\ObjectSerializer;

/**
 * PerformPayment Class Doc Comment
 *
 * @category Class
 * @description Definitions used to perform either a direct, scheduled or recurring payment. Regarding scheduling, the &#x60;scheduling&#x60; field must be set if some scheduling option (other than direct payment) is desired. The scheduling possibilities are:  - Direct payment: For a direct payment, leave empty the &#x60;scheduling&#x60;   field or set it to &#x60;direct&#x60;;  - Single future payment: For a payment scheduled to a future date, set   the &#x60;scheduling&#x60; field to &#x60;scheduled&#x60; and set   the &#x60;firstDueDate&#x60; property with the desired due date;  - Multiple installments, being the first immediately and the rest with   regular 1 month interval in-between: For this, set the &#x60;scheduling&#x60; field   to &#x60;scheduled&#x60; and the &#x60;installmentsCount&#x60; to   a value greater than 1;  - Multiple installments, starting at a specific date, with other   installments with regular 1 month interval in-between: For this, set the   &#x60;scheduling&#x60; field to &#x60;scheduled&#x60;, the   &#x60;installmentsCount&#x60; to a value greater than 1 and the   &#x60;firstInstallmentDate&#x60; with a future date;  - Custom installments: For a full control on the generated installments,   set the &#x60;scheduling&#x60; field to &#x60;scheduled&#x60;   and pass in the &#x60;installments&#x60; array. However, there are some rules:    - The total amount must be equals the sum of all installment amounts;    - The first due date must be in the future;    - The due dates of all installments must be in ascending order;    - There must be at least one day between distinct due dates.  - Recurring payment with the first payment immediately, the others at fixed   future dates: This can be achieved by setting the &#x60;scheduling&#x60; field to   &#x60;recurring&#x60; and leaving blank the   &#x60;firstOccurrenceDate&#x60;. It is possible to schedule a limited number of   occurrences, by setting &#x60;occurrencesCount&#x60;, or until it is manually   canceled, by leaving &#x60;occurrencesCount&#x60; empty. Also, it is possible to   customize the interval (default is 1 month) between each occurrence, by   setting the &#x60;occurrenceInterval&#x60; field.  - Recurring payment starting in a future date: This can be achieved by   setting the &#x60;scheduling&#x60; field to &#x60;recurring&#x60;   and setting the &#x60;firstOccurrenceDate&#x60;. The other options, the fixed number   of occurrences (&#x60;occurrencesCount&#x60;) and interval between each occurrence   (&#x60;occurrenceInterval&#x60;) can be set just like the case above.
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PerformPayment extends PerformInternalTransaction 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PerformPayment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'installments_count' => 'int',
'first_installment_date' => '\DateTime',
'installments' => '\Cyclos\Api\Model\PerformScheduledPaymentInstallment[]',
'occurrences_count' => 'int',
'first_occurrence_date' => '\DateTime',
'occurrence_interval' => '',
'nfc_challence' => 'string',
'scheduling' => '\Cyclos\Api\Model\PaymentSchedulingEnum'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'installments_count' => null,
'first_installment_date' => 'date-time',
'installments' => null,
'occurrences_count' => null,
'first_occurrence_date' => 'date-time',
'occurrence_interval' => null,
'nfc_challence' => null,
'scheduling' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'installments_count' => 'installmentsCount',
'first_installment_date' => 'firstInstallmentDate',
'installments' => 'installments',
'occurrences_count' => 'occurrencesCount',
'first_occurrence_date' => 'firstOccurrenceDate',
'occurrence_interval' => 'occurrenceInterval',
'nfc_challence' => 'nfcChallence',
'scheduling' => 'scheduling'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'installments_count' => 'setInstallmentsCount',
'first_installment_date' => 'setFirstInstallmentDate',
'installments' => 'setInstallments',
'occurrences_count' => 'setOccurrencesCount',
'first_occurrence_date' => 'setFirstOccurrenceDate',
'occurrence_interval' => 'setOccurrenceInterval',
'nfc_challence' => 'setNfcChallence',
'scheduling' => 'setScheduling'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'installments_count' => 'getInstallmentsCount',
'first_installment_date' => 'getFirstInstallmentDate',
'installments' => 'getInstallments',
'occurrences_count' => 'getOccurrencesCount',
'first_occurrence_date' => 'getFirstOccurrenceDate',
'occurrence_interval' => 'getOccurrenceInterval',
'nfc_challence' => 'getNfcChallence',
'scheduling' => 'getScheduling'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['installments_count'] = isset($data['installments_count']) ? $data['installments_count'] : null;
        $this->container['first_installment_date'] = isset($data['first_installment_date']) ? $data['first_installment_date'] : null;
        $this->container['installments'] = isset($data['installments']) ? $data['installments'] : null;
        $this->container['occurrences_count'] = isset($data['occurrences_count']) ? $data['occurrences_count'] : null;
        $this->container['first_occurrence_date'] = isset($data['first_occurrence_date']) ? $data['first_occurrence_date'] : null;
        $this->container['occurrence_interval'] = isset($data['occurrence_interval']) ? $data['occurrence_interval'] : null;
        $this->container['nfc_challence'] = isset($data['nfc_challence']) ? $data['nfc_challence'] : null;
        $this->container['scheduling'] = isset($data['scheduling']) ? $data['scheduling'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets installments_count
     *
     * @return int
     */
    public function getInstallmentsCount()
    {
        return $this->container['installments_count'];
    }

    /**
     * Sets installments_count
     *
     * @param int $installments_count Represents the number of installments. When not specified, assumes a single installment. Used only if `scheduling` is `scheduled`. Can be used together with `installmentsCount` as an alternative to providing individual `installments` definitions.
     *
     * @return $this
     */
    public function setInstallmentsCount($installments_count)
    {
        $this->container['installments_count'] = $installments_count;

        return $this;
    }

    /**
     * Gets first_installment_date
     *
     * @return \DateTime
     */
    public function getFirstInstallmentDate()
    {
        return $this->container['first_installment_date'];
    }

    /**
     * Sets first_installment_date
     *
     * @param \DateTime $first_installment_date Represents the first installment date. When not specified, assumes the first installment is processed instantly. Used only if `scheduling` is `scheduled`. Can be used together with `installmentsCount` as an alternative to providing individual `installments` definitions.
     *
     * @return $this
     */
    public function setFirstInstallmentDate($first_installment_date)
    {
        $this->container['first_installment_date'] = $first_installment_date;

        return $this;
    }

    /**
     * Gets installments
     *
     * @return \Cyclos\Api\Model\PerformScheduledPaymentInstallment[]
     */
    public function getInstallments()
    {
        return $this->container['installments'];
    }

    /**
     * Sets installments
     *
     * @param \Cyclos\Api\Model\PerformScheduledPaymentInstallment[] $installments An array containing individual installments definitions, allowing full control over generated installments. Used only if `scheduling` is `scheduled`.
     *
     * @return $this
     */
    public function setInstallments($installments)
    {
        $this->container['installments'] = $installments;

        return $this;
    }

    /**
     * Gets occurrences_count
     *
     * @return int
     */
    public function getOccurrencesCount()
    {
        return $this->container['occurrences_count'];
    }

    /**
     * Sets occurrences_count
     *
     * @param int $occurrences_count Represents the number of occurrences in a recurring payment. When not provided, the payment will be repeated until it is manually canceled. Used only if `scheduling` is `recurring`.
     *
     * @return $this
     */
    public function setOccurrencesCount($occurrences_count)
    {
        $this->container['occurrences_count'] = $occurrences_count;

        return $this;
    }

    /**
     * Gets first_occurrence_date
     *
     * @return \DateTime
     */
    public function getFirstOccurrenceDate()
    {
        return $this->container['first_occurrence_date'];
    }

    /**
     * Sets first_occurrence_date
     *
     * @param \DateTime $first_occurrence_date Represents the first occurrence date for a recurring payment. If none is given, it is assumed that the first occurrence is immediate. Used only if `scheduling` is `recurring`.
     *
     * @return $this
     */
    public function setFirstOccurrenceDate($first_occurrence_date)
    {
        $this->container['first_occurrence_date'] = $first_occurrence_date;

        return $this;
    }

    /**
     * Gets occurrence_interval
     *
     * @return 
     */
    public function getOccurrenceInterval()
    {
        return $this->container['occurrence_interval'];
    }

    /**
     * Sets occurrence_interval
     *
     * @param  $occurrence_interval Defines the interval between payment occurrences. If none is given, it is assumed 1 month between occurrences. Used only if `scheduling` is `recurring`.
     *
     * @return $this
     */
    public function setOccurrenceInterval($occurrence_interval)
    {
        $this->container['occurrence_interval'] = $occurrence_interval;

        return $this;
    }

    /**
     * Gets nfc_challence
     *
     * @return string
     */
    public function getNfcChallence()
    {
        return $this->container['nfc_challence'];
    }

    /**
     * Sets nfc_challence
     *
     * @param string $nfc_challence If this payment is performed with a NFC token, must be the challenge (as returned by the server) encrypted by the NFC chip, encoded in HEX form (2 hex chars per byte).
     *
     * @return $this
     */
    public function setNfcChallence($nfc_challence)
    {
        $this->container['nfc_challence'] = $nfc_challence;

        return $this;
    }

    /**
     * Gets scheduling
     *
     * @return \Cyclos\Api\Model\PaymentSchedulingEnum
     */
    public function getScheduling()
    {
        return $this->container['scheduling'];
    }

    /**
     * Sets scheduling
     *
     * @param \Cyclos\Api\Model\PaymentSchedulingEnum $scheduling scheduling
     *
     * @return $this
     */
    public function setScheduling($scheduling)
    {
        $this->container['scheduling'] = $scheduling;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
