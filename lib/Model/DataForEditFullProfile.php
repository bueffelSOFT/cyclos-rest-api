<?php
/**
 * DataForEditFullProfile
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;

use \ArrayAccess;
use \Cyclos\Api\ObjectSerializer;

/**
 * DataForEditFullProfile Class Doc Comment
 *
 * @category Class
 * @description Contains data for editing the full profile of a user
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DataForEditFullProfile implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForEditFullProfile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'user_configuration' => '\Cyclos\Api\Model\UserDataForEdit',
'user' => '\Cyclos\Api\Model\UserEdit',
'display' => 'string',
'short_display' => 'string',
'phone_configuration' => '\Cyclos\Api\Model\PhoneConfigurationForUserProfile',
'land_line_phones' => '\Cyclos\Api\Model\PhoneEditWithId[]',
'mobile_phones' => '\Cyclos\Api\Model\PhoneEditWithId[]',
'address_configuration' => '\Cyclos\Api\Model\AddressConfigurationForUserProfile',
'addresses' => '\Cyclos\Api\Model\AddressEditWithId[]',
'contact_info_configuration' => '\Cyclos\Api\Model\ContactInfoConfigurationForUserProfile',
'contact_infos' => '\Cyclos\Api\Model\ContactInfoEditWithId[]',
'contact_info_binary_values' => 'map[string,\Cyclos\Api\Model\ContactInfoBinaryValuesForUserProfile]',
'image_configuration' => '\Cyclos\Api\Model\ImageConfigurationForUserProfile',
'images' => '\Cyclos\Api\Model\Image[]',
'confirmation_password_input' => 'AllOfDataForEditFullProfileConfirmationPasswordInput'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'user_configuration' => null,
'user' => null,
'display' => null,
'short_display' => null,
'phone_configuration' => null,
'land_line_phones' => null,
'mobile_phones' => null,
'address_configuration' => null,
'addresses' => null,
'contact_info_configuration' => null,
'contact_infos' => null,
'contact_info_binary_values' => null,
'image_configuration' => null,
'images' => null,
'confirmation_password_input' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_configuration' => 'userConfiguration',
'user' => 'user',
'display' => 'display',
'short_display' => 'shortDisplay',
'phone_configuration' => 'phoneConfiguration',
'land_line_phones' => 'landLinePhones',
'mobile_phones' => 'mobilePhones',
'address_configuration' => 'addressConfiguration',
'addresses' => 'addresses',
'contact_info_configuration' => 'contactInfoConfiguration',
'contact_infos' => 'contactInfos',
'contact_info_binary_values' => 'contactInfoBinaryValues',
'image_configuration' => 'imageConfiguration',
'images' => 'images',
'confirmation_password_input' => 'confirmationPasswordInput'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_configuration' => 'setUserConfiguration',
'user' => 'setUser',
'display' => 'setDisplay',
'short_display' => 'setShortDisplay',
'phone_configuration' => 'setPhoneConfiguration',
'land_line_phones' => 'setLandLinePhones',
'mobile_phones' => 'setMobilePhones',
'address_configuration' => 'setAddressConfiguration',
'addresses' => 'setAddresses',
'contact_info_configuration' => 'setContactInfoConfiguration',
'contact_infos' => 'setContactInfos',
'contact_info_binary_values' => 'setContactInfoBinaryValues',
'image_configuration' => 'setImageConfiguration',
'images' => 'setImages',
'confirmation_password_input' => 'setConfirmationPasswordInput'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_configuration' => 'getUserConfiguration',
'user' => 'getUser',
'display' => 'getDisplay',
'short_display' => 'getShortDisplay',
'phone_configuration' => 'getPhoneConfiguration',
'land_line_phones' => 'getLandLinePhones',
'mobile_phones' => 'getMobilePhones',
'address_configuration' => 'getAddressConfiguration',
'addresses' => 'getAddresses',
'contact_info_configuration' => 'getContactInfoConfiguration',
'contact_infos' => 'getContactInfos',
'contact_info_binary_values' => 'getContactInfoBinaryValues',
'image_configuration' => 'getImageConfiguration',
'images' => 'getImages',
'confirmation_password_input' => 'getConfirmationPasswordInput'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['user_configuration'] = isset($data['user_configuration']) ? $data['user_configuration'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['display'] = isset($data['display']) ? $data['display'] : null;
        $this->container['short_display'] = isset($data['short_display']) ? $data['short_display'] : null;
        $this->container['phone_configuration'] = isset($data['phone_configuration']) ? $data['phone_configuration'] : null;
        $this->container['land_line_phones'] = isset($data['land_line_phones']) ? $data['land_line_phones'] : null;
        $this->container['mobile_phones'] = isset($data['mobile_phones']) ? $data['mobile_phones'] : null;
        $this->container['address_configuration'] = isset($data['address_configuration']) ? $data['address_configuration'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['contact_info_configuration'] = isset($data['contact_info_configuration']) ? $data['contact_info_configuration'] : null;
        $this->container['contact_infos'] = isset($data['contact_infos']) ? $data['contact_infos'] : null;
        $this->container['contact_info_binary_values'] = isset($data['contact_info_binary_values']) ? $data['contact_info_binary_values'] : null;
        $this->container['image_configuration'] = isset($data['image_configuration']) ? $data['image_configuration'] : null;
        $this->container['images'] = isset($data['images']) ? $data['images'] : null;
        $this->container['confirmation_password_input'] = isset($data['confirmation_password_input']) ? $data['confirmation_password_input'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_configuration
     *
     * @return \Cyclos\Api\Model\UserDataForEdit
     */
    public function getUserConfiguration()
    {
        return $this->container['user_configuration'];
    }

    /**
     * Sets user_configuration
     *
     * @param \Cyclos\Api\Model\UserDataForEdit $user_configuration user_configuration
     *
     * @return $this
     */
    public function setUserConfiguration($user_configuration)
    {
        $this->container['user_configuration'] = $user_configuration;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \Cyclos\Api\Model\UserEdit
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \Cyclos\Api\Model\UserEdit $user user
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets display
     *
     * @return string
     */
    public function getDisplay()
    {
        return $this->container['display'];
    }

    /**
     * Sets display
     *
     * @param string $display DEPRECATED. Use `userConfiguration.details.display` instead.  Contains the formatting of the user according to the configuration. Is only returned if no profile fields are marked to return in user list.
     *
     * @return $this
     */
    public function setDisplay($display)
    {
        $this->container['display'] = $display;

        return $this;
    }

    /**
     * Gets short_display
     *
     * @return string
     */
    public function getShortDisplay()
    {
        return $this->container['short_display'];
    }

    /**
     * Sets short_display
     *
     * @param string $short_display DEPRECATED. Use `userConfiguration.details.shortDisplay` instead.  Contains the short formatting of the user according to the configuration. Is only returned if no profile fields are marked to return in user list
     *
     * @return $this
     */
    public function setShortDisplay($short_display)
    {
        $this->container['short_display'] = $short_display;

        return $this;
    }

    /**
     * Gets phone_configuration
     *
     * @return \Cyclos\Api\Model\PhoneConfigurationForUserProfile
     */
    public function getPhoneConfiguration()
    {
        return $this->container['phone_configuration'];
    }

    /**
     * Sets phone_configuration
     *
     * @param \Cyclos\Api\Model\PhoneConfigurationForUserProfile $phone_configuration phone_configuration
     *
     * @return $this
     */
    public function setPhoneConfiguration($phone_configuration)
    {
        $this->container['phone_configuration'] = $phone_configuration;

        return $this;
    }

    /**
     * Gets land_line_phones
     *
     * @return \Cyclos\Api\Model\PhoneEditWithId[]
     */
    public function getLandLinePhones()
    {
        return $this->container['land_line_phones'];
    }

    /**
     * Sets land_line_phones
     *
     * @param \Cyclos\Api\Model\PhoneEditWithId[] $land_line_phones The existing land-line phones that can be modified and posted back
     *
     * @return $this
     */
    public function setLandLinePhones($land_line_phones)
    {
        $this->container['land_line_phones'] = $land_line_phones;

        return $this;
    }

    /**
     * Gets mobile_phones
     *
     * @return \Cyclos\Api\Model\PhoneEditWithId[]
     */
    public function getMobilePhones()
    {
        return $this->container['mobile_phones'];
    }

    /**
     * Sets mobile_phones
     *
     * @param \Cyclos\Api\Model\PhoneEditWithId[] $mobile_phones The existing mobile phones that can be modified and posted back
     *
     * @return $this
     */
    public function setMobilePhones($mobile_phones)
    {
        $this->container['mobile_phones'] = $mobile_phones;

        return $this;
    }

    /**
     * Gets address_configuration
     *
     * @return \Cyclos\Api\Model\AddressConfigurationForUserProfile
     */
    public function getAddressConfiguration()
    {
        return $this->container['address_configuration'];
    }

    /**
     * Sets address_configuration
     *
     * @param \Cyclos\Api\Model\AddressConfigurationForUserProfile $address_configuration address_configuration
     *
     * @return $this
     */
    public function setAddressConfiguration($address_configuration)
    {
        $this->container['address_configuration'] = $address_configuration;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \Cyclos\Api\Model\AddressEditWithId[]
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \Cyclos\Api\Model\AddressEditWithId[] $addresses The existing addresses that can be modified and posted back
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets contact_info_configuration
     *
     * @return \Cyclos\Api\Model\ContactInfoConfigurationForUserProfile
     */
    public function getContactInfoConfiguration()
    {
        return $this->container['contact_info_configuration'];
    }

    /**
     * Sets contact_info_configuration
     *
     * @param \Cyclos\Api\Model\ContactInfoConfigurationForUserProfile $contact_info_configuration contact_info_configuration
     *
     * @return $this
     */
    public function setContactInfoConfiguration($contact_info_configuration)
    {
        $this->container['contact_info_configuration'] = $contact_info_configuration;

        return $this;
    }

    /**
     * Gets contact_infos
     *
     * @return \Cyclos\Api\Model\ContactInfoEditWithId[]
     */
    public function getContactInfos()
    {
        return $this->container['contact_infos'];
    }

    /**
     * Sets contact_infos
     *
     * @param \Cyclos\Api\Model\ContactInfoEditWithId[] $contact_infos The existing additional contacts that can be modified and posted back
     *
     * @return $this
     */
    public function setContactInfos($contact_infos)
    {
        $this->container['contact_infos'] = $contact_infos;

        return $this;
    }

    /**
     * Gets contact_info_binary_values
     *
     * @return map[string,\Cyclos\Api\Model\ContactInfoBinaryValuesForUserProfile]
     */
    public function getContactInfoBinaryValues()
    {
        return $this->container['contact_info_binary_values'];
    }

    /**
     * Sets contact_info_binary_values
     *
     * @param map[string,\Cyclos\Api\Model\ContactInfoBinaryValuesForUserProfile] $contact_info_binary_values Values for images and binary custom fields for additional contacts
     *
     * @return $this
     */
    public function setContactInfoBinaryValues($contact_info_binary_values)
    {
        $this->container['contact_info_binary_values'] = $contact_info_binary_values;

        return $this;
    }

    /**
     * Gets image_configuration
     *
     * @return \Cyclos\Api\Model\ImageConfigurationForUserProfile
     */
    public function getImageConfiguration()
    {
        return $this->container['image_configuration'];
    }

    /**
     * Sets image_configuration
     *
     * @param \Cyclos\Api\Model\ImageConfigurationForUserProfile $image_configuration image_configuration
     *
     * @return $this
     */
    public function setImageConfiguration($image_configuration)
    {
        $this->container['image_configuration'] = $image_configuration;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \Cyclos\Api\Model\Image[]
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \Cyclos\Api\Model\Image[] $images All current user images
     *
     * @return $this
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets confirmation_password_input
     *
     * @return AllOfDataForEditFullProfileConfirmationPasswordInput
     */
    public function getConfirmationPasswordInput()
    {
        return $this->container['confirmation_password_input'];
    }

    /**
     * Sets confirmation_password_input
     *
     * @param AllOfDataForEditFullProfileConfirmationPasswordInput $confirmation_password_input If a confirmation password is used, contains the definitions on how to request that password from the user. This confirmation password is required when performing sensible actions. Sometimes this is dynamic, for example, the confirmation might be configured to be used only once per session, or operations like payments may have a limit per day to be without confirmation (pinless).
     *
     * @return $this
     */
    public function setConfirmationPasswordInput($confirmation_password_input)
    {
        $this->container['confirmation_password_input'] = $confirmation_password_input;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
