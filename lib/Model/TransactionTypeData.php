<?php
/**
 * TransactionTypeData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;
use \Cyclos\Api\ObjectSerializer;

/**
 * TransactionTypeData Class Doc Comment
 *
 * @category Class
 * @description Contains definitions regarding a given payment type when performing a transaction (payment or payment request).
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionTypeData extends Entity 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransactionTypeData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'currency' => '\Cyclos\Api\Model\Currency',
'fixed_amount' => 'float',
'allows_recurring_payments' => 'bool',
'max_installments' => 'int',
'requires_description' => 'bool',
'default_expiration_date' => '\DateTime',
'hide_expiration_date' => 'bool',
'custom_fields' => '\Cyclos\Api\Model\CustomFieldDetailed[]',
'a_rate' => 'float',
'd_rate' => 'float',
'd_rate_creation_value' => 'float',
'limited_awaiting_authorization' => 'bool',
'no_negatives_maturity_policy' => 'bool',
'max_amount_by_maturity_policy' => 'float',
'maturity_table_winner_id' => 'string',
'description_availability' => '\Cyclos\Api\Model\AvailabilityEnum',
'maturity_policy' => ''    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'currency' => null,
'fixed_amount' => 'number',
'allows_recurring_payments' => null,
'max_installments' => null,
'requires_description' => null,
'default_expiration_date' => 'date-time',
'hide_expiration_date' => null,
'custom_fields' => null,
'a_rate' => 'number',
'd_rate' => 'number',
'd_rate_creation_value' => 'number',
'limited_awaiting_authorization' => null,
'no_negatives_maturity_policy' => null,
'max_amount_by_maturity_policy' => 'number',
'maturity_table_winner_id' => null,
'description_availability' => null,
'maturity_policy' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currency' => 'currency',
'fixed_amount' => 'fixedAmount',
'allows_recurring_payments' => 'allowsRecurringPayments',
'max_installments' => 'maxInstallments',
'requires_description' => 'requiresDescription',
'default_expiration_date' => 'defaultExpirationDate',
'hide_expiration_date' => 'hideExpirationDate',
'custom_fields' => 'customFields',
'a_rate' => 'ARate',
'd_rate' => 'DRate',
'd_rate_creation_value' => 'DRateCreationValue',
'limited_awaiting_authorization' => 'limitedAwaitingAuthorization',
'no_negatives_maturity_policy' => 'noNegativesMaturityPolicy',
'max_amount_by_maturity_policy' => 'maxAmountByMaturityPolicy',
'maturity_table_winner_id' => 'maturityTableWinnerId',
'description_availability' => 'descriptionAvailability',
'maturity_policy' => 'maturityPolicy'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currency' => 'setCurrency',
'fixed_amount' => 'setFixedAmount',
'allows_recurring_payments' => 'setAllowsRecurringPayments',
'max_installments' => 'setMaxInstallments',
'requires_description' => 'setRequiresDescription',
'default_expiration_date' => 'setDefaultExpirationDate',
'hide_expiration_date' => 'setHideExpirationDate',
'custom_fields' => 'setCustomFields',
'a_rate' => 'setARate',
'd_rate' => 'setDRate',
'd_rate_creation_value' => 'setDRateCreationValue',
'limited_awaiting_authorization' => 'setLimitedAwaitingAuthorization',
'no_negatives_maturity_policy' => 'setNoNegativesMaturityPolicy',
'max_amount_by_maturity_policy' => 'setMaxAmountByMaturityPolicy',
'maturity_table_winner_id' => 'setMaturityTableWinnerId',
'description_availability' => 'setDescriptionAvailability',
'maturity_policy' => 'setMaturityPolicy'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currency' => 'getCurrency',
'fixed_amount' => 'getFixedAmount',
'allows_recurring_payments' => 'getAllowsRecurringPayments',
'max_installments' => 'getMaxInstallments',
'requires_description' => 'getRequiresDescription',
'default_expiration_date' => 'getDefaultExpirationDate',
'hide_expiration_date' => 'getHideExpirationDate',
'custom_fields' => 'getCustomFields',
'a_rate' => 'getARate',
'd_rate' => 'getDRate',
'd_rate_creation_value' => 'getDRateCreationValue',
'limited_awaiting_authorization' => 'getLimitedAwaitingAuthorization',
'no_negatives_maturity_policy' => 'getNoNegativesMaturityPolicy',
'max_amount_by_maturity_policy' => 'getMaxAmountByMaturityPolicy',
'maturity_table_winner_id' => 'getMaturityTableWinnerId',
'description_availability' => 'getDescriptionAvailability',
'maturity_policy' => 'getMaturityPolicy'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['fixed_amount'] = isset($data['fixed_amount']) ? $data['fixed_amount'] : null;
        $this->container['allows_recurring_payments'] = isset($data['allows_recurring_payments']) ? $data['allows_recurring_payments'] : null;
        $this->container['max_installments'] = isset($data['max_installments']) ? $data['max_installments'] : null;
        $this->container['requires_description'] = isset($data['requires_description']) ? $data['requires_description'] : null;
        $this->container['default_expiration_date'] = isset($data['default_expiration_date']) ? $data['default_expiration_date'] : null;
        $this->container['hide_expiration_date'] = isset($data['hide_expiration_date']) ? $data['hide_expiration_date'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
        $this->container['a_rate'] = isset($data['a_rate']) ? $data['a_rate'] : null;
        $this->container['d_rate'] = isset($data['d_rate']) ? $data['d_rate'] : null;
        $this->container['d_rate_creation_value'] = isset($data['d_rate_creation_value']) ? $data['d_rate_creation_value'] : null;
        $this->container['limited_awaiting_authorization'] = isset($data['limited_awaiting_authorization']) ? $data['limited_awaiting_authorization'] : null;
        $this->container['no_negatives_maturity_policy'] = isset($data['no_negatives_maturity_policy']) ? $data['no_negatives_maturity_policy'] : null;
        $this->container['max_amount_by_maturity_policy'] = isset($data['max_amount_by_maturity_policy']) ? $data['max_amount_by_maturity_policy'] : null;
        $this->container['maturity_table_winner_id'] = isset($data['maturity_table_winner_id']) ? $data['maturity_table_winner_id'] : null;
        $this->container['description_availability'] = isset($data['description_availability']) ? $data['description_availability'] : null;
        $this->container['maturity_policy'] = isset($data['maturity_policy']) ? $data['maturity_policy'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currency
     *
     * @return \Cyclos\Api\Model\Currency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Cyclos\Api\Model\Currency $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets fixed_amount
     *
     * @return float
     */
    public function getFixedAmount()
    {
        return $this->container['fixed_amount'];
    }

    /**
     * Sets fixed_amount
     *
     * @param float $fixed_amount The only allowed amount if the payment type uses a fixed amount
     *
     * @return $this
     */
    public function setFixedAmount($fixed_amount)
    {
        $this->container['fixed_amount'] = $fixed_amount;

        return $this;
    }

    /**
     * Gets allows_recurring_payments
     *
     * @return bool
     */
    public function getAllowsRecurringPayments()
    {
        return $this->container['allows_recurring_payments'];
    }

    /**
     * Sets allows_recurring_payments
     *
     * @param bool $allows_recurring_payments Can payments of this type be made recurring?
     *
     * @return $this
     */
    public function setAllowsRecurringPayments($allows_recurring_payments)
    {
        $this->container['allows_recurring_payments'] = $allows_recurring_payments;

        return $this;
    }

    /**
     * Gets max_installments
     *
     * @return int
     */
    public function getMaxInstallments()
    {
        return $this->container['max_installments'];
    }

    /**
     * Sets max_installments
     *
     * @param int $max_installments The maximum allowed installments. If it is zero, no kind of scheduled payments is allowed. If it is 1, a single future date can be used.
     *
     * @return $this
     */
    public function setMaxInstallments($max_installments)
    {
        $this->container['max_installments'] = $max_installments;

        return $this;
    }

    /**
     * Gets requires_description
     *
     * @return bool
     */
    public function getRequiresDescription()
    {
        return $this->container['requires_description'];
    }

    /**
     * Sets requires_description
     *
     * @param bool $requires_description Use `descriptionAvailability` instead   The transaction description can be either required, or optional, depending on this setting.
     *
     * @return $this
     */
    public function setRequiresDescription($requires_description)
    {
        $this->container['requires_description'] = $requires_description;

        return $this;
    }

    /**
     * Gets default_expiration_date
     *
     * @return \DateTime
     */
    public function getDefaultExpirationDate()
    {
        return $this->container['default_expiration_date'];
    }

    /**
     * Sets default_expiration_date
     *
     * @param \DateTime $default_expiration_date The default expiration date, according to the configuration. Only for payment requests.
     *
     * @return $this
     */
    public function setDefaultExpirationDate($default_expiration_date)
    {
        $this->container['default_expiration_date'] = $default_expiration_date;

        return $this;
    }

    /**
     * Gets hide_expiration_date
     *
     * @return bool
     */
    public function getHideExpirationDate()
    {
        return $this->container['hide_expiration_date'];
    }

    /**
     * Sets hide_expiration_date
     *
     * @param bool $hide_expiration_date Whether the expiration date should be hidden from users, Only for payment requests.
     *
     * @return $this
     */
    public function setHideExpirationDate($hide_expiration_date)
    {
        $this->container['hide_expiration_date'] = $hide_expiration_date;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \Cyclos\Api\Model\CustomFieldDetailed[]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \Cyclos\Api\Model\CustomFieldDetailed[] $custom_fields The custom fields related to this payment type
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets a_rate
     *
     * @return float
     */
    public function getARate()
    {
        return $this->container['a_rate'];
    }

    /**
     * Sets a_rate
     *
     * @param float $a_rate The balance aging counter used for this payment. Only for payments.
     *
     * @return $this
     */
    public function setARate($a_rate)
    {
        $this->container['a_rate'] = $a_rate;

        return $this;
    }

    /**
     * Gets d_rate
     *
     * @return float
     */
    public function getDRate()
    {
        return $this->container['d_rate'];
    }

    /**
     * Sets d_rate
     *
     * @param float $d_rate The balance maturity used for this payment. Only for payments.
     *
     * @return $this
     */
    public function setDRate($d_rate)
    {
        $this->container['d_rate'] = $d_rate;

        return $this;
    }

    /**
     * Gets d_rate_creation_value
     *
     * @return float
     */
    public function getDRateCreationValue()
    {
        return $this->container['d_rate_creation_value'];
    }

    /**
     * Sets d_rate_creation_value
     *
     * @param float $d_rate_creation_value The initial value for the balance maturity on this payment type. Only for payments.
     *
     * @return $this
     */
    public function setDRateCreationValue($d_rate_creation_value)
    {
        $this->container['d_rate_creation_value'] = $d_rate_creation_value;

        return $this;
    }

    /**
     * Gets limited_awaiting_authorization
     *
     * @return bool
     */
    public function getLimitedAwaitingAuthorization()
    {
        return $this->container['limited_awaiting_authorization'];
    }

    /**
     * Sets limited_awaiting_authorization
     *
     * @param bool $limited_awaiting_authorization Only for payments.
     *
     * @return $this
     */
    public function setLimitedAwaitingAuthorization($limited_awaiting_authorization)
    {
        $this->container['limited_awaiting_authorization'] = $limited_awaiting_authorization;

        return $this;
    }

    /**
     * Gets no_negatives_maturity_policy
     *
     * @return bool
     */
    public function getNoNegativesMaturityPolicy()
    {
        return $this->container['no_negatives_maturity_policy'];
    }

    /**
     * Sets no_negatives_maturity_policy
     *
     * @param bool $no_negatives_maturity_policy Only for payments.
     *
     * @return $this
     */
    public function setNoNegativesMaturityPolicy($no_negatives_maturity_policy)
    {
        $this->container['no_negatives_maturity_policy'] = $no_negatives_maturity_policy;

        return $this;
    }

    /**
     * Gets max_amount_by_maturity_policy
     *
     * @return float
     */
    public function getMaxAmountByMaturityPolicy()
    {
        return $this->container['max_amount_by_maturity_policy'];
    }

    /**
     * Sets max_amount_by_maturity_policy
     *
     * @param float $max_amount_by_maturity_policy The maximum amount that can be performed when `maturityPolicy` is `history`. It corresponds to the maturity table entry indicated by `maturityTableWinnerId`. Only for payments.
     *
     * @return $this
     */
    public function setMaxAmountByMaturityPolicy($max_amount_by_maturity_policy)
    {
        $this->container['max_amount_by_maturity_policy'] = $max_amount_by_maturity_policy;

        return $this;
    }

    /**
     * Gets maturity_table_winner_id
     *
     * @return string
     */
    public function getMaturityTableWinnerId()
    {
        return $this->container['maturity_table_winner_id'];
    }

    /**
     * Sets maturity_table_winner_id
     *
     * @param string $maturity_table_winner_id When `maturityPolicy` is `history`, contains the id of the maturity table entry that granted. Only for payments.
     *
     * @return $this
     */
    public function setMaturityTableWinnerId($maturity_table_winner_id)
    {
        $this->container['maturity_table_winner_id'] = $maturity_table_winner_id;

        return $this;
    }

    /**
     * Gets description_availability
     *
     * @return \Cyclos\Api\Model\AvailabilityEnum
     */
    public function getDescriptionAvailability()
    {
        return $this->container['description_availability'];
    }

    /**
     * Sets description_availability
     *
     * @param \Cyclos\Api\Model\AvailabilityEnum $description_availability description_availability
     *
     * @return $this
     */
    public function setDescriptionAvailability($description_availability)
    {
        $this->container['description_availability'] = $description_availability;

        return $this;
    }

    /**
     * Gets maturity_policy
     *
     * @return 
     */
    public function getMaturityPolicy()
    {
        return $this->container['maturity_policy'];
    }

    /**
     * Sets maturity_policy
     *
     * @param  $maturity_policy Only for payments.
     *
     * @return $this
     */
    public function setMaturityPolicy($maturity_policy)
    {
        $this->container['maturity_policy'] = $maturity_policy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
