<?php
/**
 * UserPhonesListData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;

use \ArrayAccess;
use \Cyclos\Api\ObjectSerializer;

/**
 * UserPhonesListData Class Doc Comment
 *
 * @category Class
 * @description Contains information for a list of phones
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserPhonesListData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserPhonesListData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'can_manage' => 'bool',
'can_create_land_line' => 'bool',
'can_create_mobile' => 'bool',
'enable_privacy' => 'bool',
'sms_enabled' => 'bool',
'can_verify' => 'bool',
'can_enable_for_sms' => 'bool',
'max_mobile_phones' => 'int',
'max_land_line_phones' => 'int',
'phones' => '\Cyclos\Api\Model\PhoneResult[]',
'land_line_availability' => '\Cyclos\Api\Model\AvailabilityEnum',
'mobile_availability' => '\Cyclos\Api\Model\AvailabilityEnum'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'can_manage' => null,
'can_create_land_line' => null,
'can_create_mobile' => null,
'enable_privacy' => null,
'sms_enabled' => null,
'can_verify' => null,
'can_enable_for_sms' => null,
'max_mobile_phones' => null,
'max_land_line_phones' => null,
'phones' => null,
'land_line_availability' => null,
'mobile_availability' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can_manage' => 'canManage',
'can_create_land_line' => 'canCreateLandLine',
'can_create_mobile' => 'canCreateMobile',
'enable_privacy' => 'enablePrivacy',
'sms_enabled' => 'smsEnabled',
'can_verify' => 'canVerify',
'can_enable_for_sms' => 'canEnableForSms',
'max_mobile_phones' => 'maxMobilePhones',
'max_land_line_phones' => 'maxLandLinePhones',
'phones' => 'phones',
'land_line_availability' => 'landLineAvailability',
'mobile_availability' => 'mobileAvailability'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can_manage' => 'setCanManage',
'can_create_land_line' => 'setCanCreateLandLine',
'can_create_mobile' => 'setCanCreateMobile',
'enable_privacy' => 'setEnablePrivacy',
'sms_enabled' => 'setSmsEnabled',
'can_verify' => 'setCanVerify',
'can_enable_for_sms' => 'setCanEnableForSms',
'max_mobile_phones' => 'setMaxMobilePhones',
'max_land_line_phones' => 'setMaxLandLinePhones',
'phones' => 'setPhones',
'land_line_availability' => 'setLandLineAvailability',
'mobile_availability' => 'setMobileAvailability'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can_manage' => 'getCanManage',
'can_create_land_line' => 'getCanCreateLandLine',
'can_create_mobile' => 'getCanCreateMobile',
'enable_privacy' => 'getEnablePrivacy',
'sms_enabled' => 'getSmsEnabled',
'can_verify' => 'getCanVerify',
'can_enable_for_sms' => 'getCanEnableForSms',
'max_mobile_phones' => 'getMaxMobilePhones',
'max_land_line_phones' => 'getMaxLandLinePhones',
'phones' => 'getPhones',
'land_line_availability' => 'getLandLineAvailability',
'mobile_availability' => 'getMobileAvailability'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['can_manage'] = isset($data['can_manage']) ? $data['can_manage'] : null;
        $this->container['can_create_land_line'] = isset($data['can_create_land_line']) ? $data['can_create_land_line'] : null;
        $this->container['can_create_mobile'] = isset($data['can_create_mobile']) ? $data['can_create_mobile'] : null;
        $this->container['enable_privacy'] = isset($data['enable_privacy']) ? $data['enable_privacy'] : null;
        $this->container['sms_enabled'] = isset($data['sms_enabled']) ? $data['sms_enabled'] : null;
        $this->container['can_verify'] = isset($data['can_verify']) ? $data['can_verify'] : null;
        $this->container['can_enable_for_sms'] = isset($data['can_enable_for_sms']) ? $data['can_enable_for_sms'] : null;
        $this->container['max_mobile_phones'] = isset($data['max_mobile_phones']) ? $data['max_mobile_phones'] : null;
        $this->container['max_land_line_phones'] = isset($data['max_land_line_phones']) ? $data['max_land_line_phones'] : null;
        $this->container['phones'] = isset($data['phones']) ? $data['phones'] : null;
        $this->container['land_line_availability'] = isset($data['land_line_availability']) ? $data['land_line_availability'] : null;
        $this->container['mobile_availability'] = isset($data['mobile_availability']) ? $data['mobile_availability'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can_manage
     *
     * @return bool
     */
    public function getCanManage()
    {
        return $this->container['can_manage'];
    }

    /**
     * Sets can_manage
     *
     * @param bool $can_manage Can the authenticated user manage phones of this user?
     *
     * @return $this
     */
    public function setCanManage($can_manage)
    {
        $this->container['can_manage'] = $can_manage;

        return $this;
    }

    /**
     * Gets can_create_land_line
     *
     * @return bool
     */
    public function getCanCreateLandLine()
    {
        return $this->container['can_create_land_line'];
    }

    /**
     * Sets can_create_land_line
     *
     * @param bool $can_create_land_line Can the authenticated user create new land-line phones for this user?
     *
     * @return $this
     */
    public function setCanCreateLandLine($can_create_land_line)
    {
        $this->container['can_create_land_line'] = $can_create_land_line;

        return $this;
    }

    /**
     * Gets can_create_mobile
     *
     * @return bool
     */
    public function getCanCreateMobile()
    {
        return $this->container['can_create_mobile'];
    }

    /**
     * Sets can_create_mobile
     *
     * @param bool $can_create_mobile Can the authenticated user create new mobile phones for this user?
     *
     * @return $this
     */
    public function setCanCreateMobile($can_create_mobile)
    {
        $this->container['can_create_mobile'] = $can_create_mobile;

        return $this;
    }

    /**
     * Gets enable_privacy
     *
     * @return bool
     */
    public function getEnablePrivacy()
    {
        return $this->container['enable_privacy'];
    }

    /**
     * Sets enable_privacy
     *
     * @param bool $enable_privacy Indicates whether phone privacy can be used for this user
     *
     * @return $this
     */
    public function setEnablePrivacy($enable_privacy)
    {
        $this->container['enable_privacy'] = $enable_privacy;

        return $this;
    }

    /**
     * Gets sms_enabled
     *
     * @return bool
     */
    public function getSmsEnabled()
    {
        return $this->container['sms_enabled'];
    }

    /**
     * Sets sms_enabled
     *
     * @param bool $sms_enabled Indicates whether outbound SMS is enabled in Cyclos
     *
     * @return $this
     */
    public function setSmsEnabled($sms_enabled)
    {
        $this->container['sms_enabled'] = $sms_enabled;

        return $this;
    }

    /**
     * Gets can_verify
     *
     * @return bool
     */
    public function getCanVerify()
    {
        return $this->container['can_verify'];
    }

    /**
     * Sets can_verify
     *
     * @param bool $can_verify Can the authenticated user verify mobile phones of this user?
     *
     * @return $this
     */
    public function setCanVerify($can_verify)
    {
        $this->container['can_verify'] = $can_verify;

        return $this;
    }

    /**
     * Gets can_enable_for_sms
     *
     * @return bool
     */
    public function getCanEnableForSms()
    {
        return $this->container['can_enable_for_sms'];
    }

    /**
     * Sets can_enable_for_sms
     *
     * @param bool $can_enable_for_sms Can the authenticated user enable / disable mobile phones of this user to send / receive SMS?
     *
     * @return $this
     */
    public function setCanEnableForSms($can_enable_for_sms)
    {
        $this->container['can_enable_for_sms'] = $can_enable_for_sms;

        return $this;
    }

    /**
     * Gets max_mobile_phones
     *
     * @return int
     */
    public function getMaxMobilePhones()
    {
        return $this->container['max_mobile_phones'];
    }

    /**
     * Sets max_mobile_phones
     *
     * @param int $max_mobile_phones Indicates the maximum number of mobile phones this user can have. Is only returned when `canManage` is `true`.
     *
     * @return $this
     */
    public function setMaxMobilePhones($max_mobile_phones)
    {
        $this->container['max_mobile_phones'] = $max_mobile_phones;

        return $this;
    }

    /**
     * Gets max_land_line_phones
     *
     * @return int
     */
    public function getMaxLandLinePhones()
    {
        return $this->container['max_land_line_phones'];
    }

    /**
     * Sets max_land_line_phones
     *
     * @param int $max_land_line_phones Indicates the maximum number of land line (fixed) phones this user can have. Is only returned when `canManage` is `true`.
     *
     * @return $this
     */
    public function setMaxLandLinePhones($max_land_line_phones)
    {
        $this->container['max_land_line_phones'] = $max_land_line_phones;

        return $this;
    }

    /**
     * Gets phones
     *
     * @return \Cyclos\Api\Model\PhoneResult[]
     */
    public function getPhones()
    {
        return $this->container['phones'];
    }

    /**
     * Sets phones
     *
     * @param \Cyclos\Api\Model\PhoneResult[] $phones The list of (visible) phones
     *
     * @return $this
     */
    public function setPhones($phones)
    {
        $this->container['phones'] = $phones;

        return $this;
    }

    /**
     * Gets land_line_availability
     *
     * @return \Cyclos\Api\Model\AvailabilityEnum
     */
    public function getLandLineAvailability()
    {
        return $this->container['land_line_availability'];
    }

    /**
     * Sets land_line_availability
     *
     * @param \Cyclos\Api\Model\AvailabilityEnum $land_line_availability land_line_availability
     *
     * @return $this
     */
    public function setLandLineAvailability($land_line_availability)
    {
        $this->container['land_line_availability'] = $land_line_availability;

        return $this;
    }

    /**
     * Gets mobile_availability
     *
     * @return \Cyclos\Api\Model\AvailabilityEnum
     */
    public function getMobileAvailability()
    {
        return $this->container['mobile_availability'];
    }

    /**
     * Sets mobile_availability
     *
     * @param \Cyclos\Api\Model\AvailabilityEnum $mobile_availability mobile_availability
     *
     * @return $this
     */
    public function setMobileAvailability($mobile_availability)
    {
        $this->container['mobile_availability'] = $mobile_availability;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
