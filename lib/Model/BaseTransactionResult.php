<?php
/**
 * BaseTransactionResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;
use \Cyclos\Api\ObjectSerializer;

/**
 * BaseTransactionResult Class Doc Comment
 *
 * @category Class
 * @description Base fields for transaction result
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BaseTransactionResult extends Entity 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BaseTransactionResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'kind' => '',
'transaction_number' => 'string',
'authorization_status' => '\Cyclos\Api\Model\TransactionAuthorizationStatusEnum',
'date' => '\DateTime',
'amount' => 'float',
'type' => '\Cyclos\Api\Model\TransferType',
'currency' => 'string',
'description' => 'string',
'expiration_date' => '\DateTime',
'scheduled_payment_status' => '',
'installment_count' => 'int',
'processed_installments' => 'int',
'first_installment' => '',
'first_open_installment' => '',
'recurring_payment_status' => '',
'occurrences_count' => 'int',
'next_occurrence_date' => '\DateTime',
'last_occurrence_number' => 'int',
'external_payment_status' => '',
'to_principal_type' => '',
'to_principal_value' => 'string',
'payment_request_status' => '',
'ticket_status' => ''    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'kind' => null,
'transaction_number' => null,
'authorization_status' => null,
'date' => 'date-time',
'amount' => 'number',
'type' => null,
'currency' => null,
'description' => null,
'expiration_date' => 'date-time',
'scheduled_payment_status' => null,
'installment_count' => null,
'processed_installments' => null,
'first_installment' => null,
'first_open_installment' => null,
'recurring_payment_status' => null,
'occurrences_count' => null,
'next_occurrence_date' => 'date-time',
'last_occurrence_number' => null,
'external_payment_status' => null,
'to_principal_type' => null,
'to_principal_value' => null,
'payment_request_status' => null,
'ticket_status' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'kind' => 'kind',
'transaction_number' => 'transactionNumber',
'authorization_status' => 'authorizationStatus',
'date' => 'date',
'amount' => 'amount',
'type' => 'type',
'currency' => 'currency',
'description' => 'description',
'expiration_date' => 'expirationDate',
'scheduled_payment_status' => 'scheduledPaymentStatus',
'installment_count' => 'installmentCount',
'processed_installments' => 'processedInstallments',
'first_installment' => 'firstInstallment',
'first_open_installment' => 'firstOpenInstallment',
'recurring_payment_status' => 'recurringPaymentStatus',
'occurrences_count' => 'occurrencesCount',
'next_occurrence_date' => 'nextOccurrenceDate',
'last_occurrence_number' => 'lastOccurrenceNumber',
'external_payment_status' => 'externalPaymentStatus',
'to_principal_type' => 'toPrincipalType',
'to_principal_value' => 'toPrincipalValue',
'payment_request_status' => 'paymentRequestStatus',
'ticket_status' => 'ticketStatus'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'kind' => 'setKind',
'transaction_number' => 'setTransactionNumber',
'authorization_status' => 'setAuthorizationStatus',
'date' => 'setDate',
'amount' => 'setAmount',
'type' => 'setType',
'currency' => 'setCurrency',
'description' => 'setDescription',
'expiration_date' => 'setExpirationDate',
'scheduled_payment_status' => 'setScheduledPaymentStatus',
'installment_count' => 'setInstallmentCount',
'processed_installments' => 'setProcessedInstallments',
'first_installment' => 'setFirstInstallment',
'first_open_installment' => 'setFirstOpenInstallment',
'recurring_payment_status' => 'setRecurringPaymentStatus',
'occurrences_count' => 'setOccurrencesCount',
'next_occurrence_date' => 'setNextOccurrenceDate',
'last_occurrence_number' => 'setLastOccurrenceNumber',
'external_payment_status' => 'setExternalPaymentStatus',
'to_principal_type' => 'setToPrincipalType',
'to_principal_value' => 'setToPrincipalValue',
'payment_request_status' => 'setPaymentRequestStatus',
'ticket_status' => 'setTicketStatus'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'kind' => 'getKind',
'transaction_number' => 'getTransactionNumber',
'authorization_status' => 'getAuthorizationStatus',
'date' => 'getDate',
'amount' => 'getAmount',
'type' => 'getType',
'currency' => 'getCurrency',
'description' => 'getDescription',
'expiration_date' => 'getExpirationDate',
'scheduled_payment_status' => 'getScheduledPaymentStatus',
'installment_count' => 'getInstallmentCount',
'processed_installments' => 'getProcessedInstallments',
'first_installment' => 'getFirstInstallment',
'first_open_installment' => 'getFirstOpenInstallment',
'recurring_payment_status' => 'getRecurringPaymentStatus',
'occurrences_count' => 'getOccurrencesCount',
'next_occurrence_date' => 'getNextOccurrenceDate',
'last_occurrence_number' => 'getLastOccurrenceNumber',
'external_payment_status' => 'getExternalPaymentStatus',
'to_principal_type' => 'getToPrincipalType',
'to_principal_value' => 'getToPrincipalValue',
'payment_request_status' => 'getPaymentRequestStatus',
'ticket_status' => 'getTicketStatus'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['kind'] = isset($data['kind']) ? $data['kind'] : null;
        $this->container['transaction_number'] = isset($data['transaction_number']) ? $data['transaction_number'] : null;
        $this->container['authorization_status'] = isset($data['authorization_status']) ? $data['authorization_status'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['scheduled_payment_status'] = isset($data['scheduled_payment_status']) ? $data['scheduled_payment_status'] : null;
        $this->container['installment_count'] = isset($data['installment_count']) ? $data['installment_count'] : null;
        $this->container['processed_installments'] = isset($data['processed_installments']) ? $data['processed_installments'] : null;
        $this->container['first_installment'] = isset($data['first_installment']) ? $data['first_installment'] : null;
        $this->container['first_open_installment'] = isset($data['first_open_installment']) ? $data['first_open_installment'] : null;
        $this->container['recurring_payment_status'] = isset($data['recurring_payment_status']) ? $data['recurring_payment_status'] : null;
        $this->container['occurrences_count'] = isset($data['occurrences_count']) ? $data['occurrences_count'] : null;
        $this->container['next_occurrence_date'] = isset($data['next_occurrence_date']) ? $data['next_occurrence_date'] : null;
        $this->container['last_occurrence_number'] = isset($data['last_occurrence_number']) ? $data['last_occurrence_number'] : null;
        $this->container['external_payment_status'] = isset($data['external_payment_status']) ? $data['external_payment_status'] : null;
        $this->container['to_principal_type'] = isset($data['to_principal_type']) ? $data['to_principal_type'] : null;
        $this->container['to_principal_value'] = isset($data['to_principal_value']) ? $data['to_principal_value'] : null;
        $this->container['payment_request_status'] = isset($data['payment_request_status']) ? $data['payment_request_status'] : null;
        $this->container['ticket_status'] = isset($data['ticket_status']) ? $data['ticket_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets kind
     *
     * @return 
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     *
     * @param  $kind The transaction kind. For example, if the front end has distinct views for a regular payment, scheduled payment and so on, this information is useful to determine the actual view.
     *
     * @return $this
     */
    public function setKind($kind)
    {
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets transaction_number
     *
     * @return string
     */
    public function getTransactionNumber()
    {
        return $this->container['transaction_number'];
    }

    /**
     * Sets transaction_number
     *
     * @param string $transaction_number The transaction number identifying this balance transfer. The currency configuration has the definition on whether transaction numbers are enabled and which format they have.
     *
     * @return $this
     */
    public function setTransactionNumber($transaction_number)
    {
        $this->container['transaction_number'] = $transaction_number;

        return $this;
    }

    /**
     * Gets authorization_status
     *
     * @return \Cyclos\Api\Model\TransactionAuthorizationStatusEnum
     */
    public function getAuthorizationStatus()
    {
        return $this->container['authorization_status'];
    }

    /**
     * Sets authorization_status
     *
     * @param \Cyclos\Api\Model\TransactionAuthorizationStatusEnum $authorization_status authorization_status
     *
     * @return $this
     */
    public function setAuthorizationStatus($authorization_status)
    {
        $this->container['authorization_status'] = $authorization_status;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date The transfer date and time
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount The transaction amount.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Cyclos\Api\Model\TransferType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Cyclos\Api\Model\TransferType $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Either internal name or id of the transaction currency.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The transaction description. Is optional.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime $expiration_date Only returned if the `kind` is either `paymentRequest`, `externalPayment` or `ticket`. The deadline for the payment to be processed.  In case of `externalPayment` if no user is registered with either e-mail or mobile phone matching, it is canceled. The same is done in case of `ticket` if it is not accepted by any user.
     *
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets scheduled_payment_status
     *
     * @return 
     */
    public function getScheduledPaymentStatus()
    {
        return $this->container['scheduled_payment_status'];
    }

    /**
     * Sets scheduled_payment_status
     *
     * @param  $scheduled_payment_status The scheduled payment status. Only returned if `kind` is `scheduledPayment`.
     *
     * @return $this
     */
    public function setScheduledPaymentStatus($scheduled_payment_status)
    {
        $this->container['scheduled_payment_status'] = $scheduled_payment_status;

        return $this;
    }

    /**
     * Gets installment_count
     *
     * @return int
     */
    public function getInstallmentCount()
    {
        return $this->container['installment_count'];
    }

    /**
     * Sets installment_count
     *
     * @param int $installment_count The total number of installments. Only returned if `kind` is `scheduledPayment`.
     *
     * @return $this
     */
    public function setInstallmentCount($installment_count)
    {
        $this->container['installment_count'] = $installment_count;

        return $this;
    }

    /**
     * Gets processed_installments
     *
     * @return int
     */
    public function getProcessedInstallments()
    {
        return $this->container['processed_installments'];
    }

    /**
     * Sets processed_installments
     *
     * @param int $processed_installments The number of processed installments. Only returned if `kind` is `scheduledPayment`.
     *
     * @return $this
     */
    public function setProcessedInstallments($processed_installments)
    {
        $this->container['processed_installments'] = $processed_installments;

        return $this;
    }

    /**
     * Gets first_installment
     *
     * @return 
     */
    public function getFirstInstallment()
    {
        return $this->container['first_installment'];
    }

    /**
     * Sets first_installment
     *
     * @param  $first_installment A reference to the first installment of this scheduled payment. Only returned if `kind` is `scheduledPayment`.
     *
     * @return $this
     */
    public function setFirstInstallment($first_installment)
    {
        $this->container['first_installment'] = $first_installment;

        return $this;
    }

    /**
     * Gets first_open_installment
     *
     * @return 
     */
    public function getFirstOpenInstallment()
    {
        return $this->container['first_open_installment'];
    }

    /**
     * Sets first_open_installment
     *
     * @param  $first_open_installment A reference to the first installment which is still open. Only returned if `kind` is `scheduledPayment`.
     *
     * @return $this
     */
    public function setFirstOpenInstallment($first_open_installment)
    {
        $this->container['first_open_installment'] = $first_open_installment;

        return $this;
    }

    /**
     * Gets recurring_payment_status
     *
     * @return 
     */
    public function getRecurringPaymentStatus()
    {
        return $this->container['recurring_payment_status'];
    }

    /**
     * Sets recurring_payment_status
     *
     * @param  $recurring_payment_status The recurring payment status. Only returned if `kind` is `recurringPayment`.
     *
     * @return $this
     */
    public function setRecurringPaymentStatus($recurring_payment_status)
    {
        $this->container['recurring_payment_status'] = $recurring_payment_status;

        return $this;
    }

    /**
     * Gets occurrences_count
     *
     * @return int
     */
    public function getOccurrencesCount()
    {
        return $this->container['occurrences_count'];
    }

    /**
     * Sets occurrences_count
     *
     * @param int $occurrences_count The total number of occurrences to process. When null will be processed until manually canceled. Only returned if `kind` is `recurringPayment`.
     *
     * @return $this
     */
    public function setOccurrencesCount($occurrences_count)
    {
        $this->container['occurrences_count'] = $occurrences_count;

        return $this;
    }

    /**
     * Gets next_occurrence_date
     *
     * @return \DateTime
     */
    public function getNextOccurrenceDate()
    {
        return $this->container['next_occurrence_date'];
    }

    /**
     * Sets next_occurrence_date
     *
     * @param \DateTime $next_occurrence_date When the next recurring payment occurrence will be processed. Only returned if `kind` is `recurringPayment`.
     *
     * @return $this
     */
    public function setNextOccurrenceDate($next_occurrence_date)
    {
        $this->container['next_occurrence_date'] = $next_occurrence_date;

        return $this;
    }

    /**
     * Gets last_occurrence_number
     *
     * @return int
     */
    public function getLastOccurrenceNumber()
    {
        return $this->container['last_occurrence_number'];
    }

    /**
     * Sets last_occurrence_number
     *
     * @param int $last_occurrence_number The number of the last processed occurrence
     *
     * @return $this
     */
    public function setLastOccurrenceNumber($last_occurrence_number)
    {
        $this->container['last_occurrence_number'] = $last_occurrence_number;

        return $this;
    }

    /**
     * Gets external_payment_status
     *
     * @return 
     */
    public function getExternalPaymentStatus()
    {
        return $this->container['external_payment_status'];
    }

    /**
     * Sets external_payment_status
     *
     * @param  $external_payment_status The external payment status. Only returned if `kind` is `externalPayment`.
     *
     * @return $this
     */
    public function setExternalPaymentStatus($external_payment_status)
    {
        $this->container['external_payment_status'] = $external_payment_status;

        return $this;
    }

    /**
     * Gets to_principal_type
     *
     * @return 
     */
    public function getToPrincipalType()
    {
        return $this->container['to_principal_type'];
    }

    /**
     * Sets to_principal_type
     *
     * @param  $to_principal_type The principal type an external payment was sent to. Only returned if `kind` is `externalPayment`.
     *
     * @return $this
     */
    public function setToPrincipalType($to_principal_type)
    {
        $this->container['to_principal_type'] = $to_principal_type;

        return $this;
    }

    /**
     * Gets to_principal_value
     *
     * @return string
     */
    public function getToPrincipalValue()
    {
        return $this->container['to_principal_value'];
    }

    /**
     * Sets to_principal_value
     *
     * @param string $to_principal_value The principal to which an external payment was sent to. Only returned if `kind` is `externalPayment`.
     *
     * @return $this
     */
    public function setToPrincipalValue($to_principal_value)
    {
        $this->container['to_principal_value'] = $to_principal_value;

        return $this;
    }

    /**
     * Gets payment_request_status
     *
     * @return 
     */
    public function getPaymentRequestStatus()
    {
        return $this->container['payment_request_status'];
    }

    /**
     * Sets payment_request_status
     *
     * @param  $payment_request_status The payment request status. Only returned if `kind` is `paymentRequest`.
     *
     * @return $this
     */
    public function setPaymentRequestStatus($payment_request_status)
    {
        $this->container['payment_request_status'] = $payment_request_status;

        return $this;
    }

    /**
     * Gets ticket_status
     *
     * @return 
     */
    public function getTicketStatus()
    {
        return $this->container['ticket_status'];
    }

    /**
     * Sets ticket_status
     *
     * @param  $ticket_status The ticket status. Only returned if `kind` is `ticket`.
     *
     * @return $this
     */
    public function setTicketStatus($ticket_status)
    {
        $this->container['ticket_status'] = $ticket_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
