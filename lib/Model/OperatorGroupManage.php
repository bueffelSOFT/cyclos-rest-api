<?php
/**
 * OperatorGroupManage
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;

use \ArrayAccess;
use \Cyclos\Api\ObjectSerializer;

/**
 * OperatorGroupManage Class Doc Comment
 *
 * @category Class
 * @description Common fields for either creating or editing an operator group
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OperatorGroupManage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OperatorGroupManage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'description' => 'string',
'edit_own_profile' => 'bool',
'chargeback_payments' => 'bool',
'messages' => 'bool',
'notifications' => 'bool',
'receive_payments' => 'bool',
'redeem_vouchers' => 'bool',
'request_payments' => 'bool',
'view_advertisements' => 'bool',
'manage_advertisements' => 'bool',
'enable_token' => 'bool',
'cancel_token' => 'bool',
'block_token' => 'bool',
'unblock_token' => 'bool',
'brokering' => 'bool',
'restrict_payments_to_users' => 'string[]',
'operations' => 'string[]',
'records' => 'string[]',
'accounts' => 'map[string,\Cyclos\Api\Model\OperatorGroupAccount]',
'payments' => 'map[string,\Cyclos\Api\Model\OperatorGroupPayment]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'description' => null,
'edit_own_profile' => null,
'chargeback_payments' => null,
'messages' => null,
'notifications' => null,
'receive_payments' => null,
'redeem_vouchers' => null,
'request_payments' => null,
'view_advertisements' => null,
'manage_advertisements' => null,
'enable_token' => null,
'cancel_token' => null,
'block_token' => null,
'unblock_token' => null,
'brokering' => null,
'restrict_payments_to_users' => null,
'operations' => null,
'records' => null,
'accounts' => null,
'payments' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'description' => 'description',
'edit_own_profile' => 'editOwnProfile',
'chargeback_payments' => 'chargebackPayments',
'messages' => 'messages',
'notifications' => 'notifications',
'receive_payments' => 'receivePayments',
'redeem_vouchers' => 'redeemVouchers',
'request_payments' => 'requestPayments',
'view_advertisements' => 'viewAdvertisements',
'manage_advertisements' => 'manageAdvertisements',
'enable_token' => 'enableToken',
'cancel_token' => 'cancelToken',
'block_token' => 'blockToken',
'unblock_token' => 'unblockToken',
'brokering' => 'brokering',
'restrict_payments_to_users' => 'restrictPaymentsToUsers',
'operations' => 'operations',
'records' => 'records',
'accounts' => 'accounts',
'payments' => 'payments'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'description' => 'setDescription',
'edit_own_profile' => 'setEditOwnProfile',
'chargeback_payments' => 'setChargebackPayments',
'messages' => 'setMessages',
'notifications' => 'setNotifications',
'receive_payments' => 'setReceivePayments',
'redeem_vouchers' => 'setRedeemVouchers',
'request_payments' => 'setRequestPayments',
'view_advertisements' => 'setViewAdvertisements',
'manage_advertisements' => 'setManageAdvertisements',
'enable_token' => 'setEnableToken',
'cancel_token' => 'setCancelToken',
'block_token' => 'setBlockToken',
'unblock_token' => 'setUnblockToken',
'brokering' => 'setBrokering',
'restrict_payments_to_users' => 'setRestrictPaymentsToUsers',
'operations' => 'setOperations',
'records' => 'setRecords',
'accounts' => 'setAccounts',
'payments' => 'setPayments'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'description' => 'getDescription',
'edit_own_profile' => 'getEditOwnProfile',
'chargeback_payments' => 'getChargebackPayments',
'messages' => 'getMessages',
'notifications' => 'getNotifications',
'receive_payments' => 'getReceivePayments',
'redeem_vouchers' => 'getRedeemVouchers',
'request_payments' => 'getRequestPayments',
'view_advertisements' => 'getViewAdvertisements',
'manage_advertisements' => 'getManageAdvertisements',
'enable_token' => 'getEnableToken',
'cancel_token' => 'getCancelToken',
'block_token' => 'getBlockToken',
'unblock_token' => 'getUnblockToken',
'brokering' => 'getBrokering',
'restrict_payments_to_users' => 'getRestrictPaymentsToUsers',
'operations' => 'getOperations',
'records' => 'getRecords',
'accounts' => 'getAccounts',
'payments' => 'getPayments'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['edit_own_profile'] = isset($data['edit_own_profile']) ? $data['edit_own_profile'] : null;
        $this->container['chargeback_payments'] = isset($data['chargeback_payments']) ? $data['chargeback_payments'] : null;
        $this->container['messages'] = isset($data['messages']) ? $data['messages'] : null;
        $this->container['notifications'] = isset($data['notifications']) ? $data['notifications'] : null;
        $this->container['receive_payments'] = isset($data['receive_payments']) ? $data['receive_payments'] : null;
        $this->container['redeem_vouchers'] = isset($data['redeem_vouchers']) ? $data['redeem_vouchers'] : null;
        $this->container['request_payments'] = isset($data['request_payments']) ? $data['request_payments'] : null;
        $this->container['view_advertisements'] = isset($data['view_advertisements']) ? $data['view_advertisements'] : null;
        $this->container['manage_advertisements'] = isset($data['manage_advertisements']) ? $data['manage_advertisements'] : null;
        $this->container['enable_token'] = isset($data['enable_token']) ? $data['enable_token'] : null;
        $this->container['cancel_token'] = isset($data['cancel_token']) ? $data['cancel_token'] : null;
        $this->container['block_token'] = isset($data['block_token']) ? $data['block_token'] : null;
        $this->container['unblock_token'] = isset($data['unblock_token']) ? $data['unblock_token'] : null;
        $this->container['brokering'] = isset($data['brokering']) ? $data['brokering'] : null;
        $this->container['restrict_payments_to_users'] = isset($data['restrict_payments_to_users']) ? $data['restrict_payments_to_users'] : null;
        $this->container['operations'] = isset($data['operations']) ? $data['operations'] : null;
        $this->container['records'] = isset($data['records']) ? $data['records'] : null;
        $this->container['accounts'] = isset($data['accounts']) ? $data['accounts'] : null;
        $this->container['payments'] = isset($data['payments']) ? $data['payments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The operator group name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Optional description of the group
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets edit_own_profile
     *
     * @return bool
     */
    public function getEditOwnProfile()
    {
        return $this->container['edit_own_profile'];
    }

    /**
     * Sets edit_own_profile
     *
     * @param bool $edit_own_profile Can operators of this group edit their own profile?
     *
     * @return $this
     */
    public function setEditOwnProfile($edit_own_profile)
    {
        $this->container['edit_own_profile'] = $edit_own_profile;

        return $this;
    }

    /**
     * Gets chargeback_payments
     *
     * @return bool
     */
    public function getChargebackPayments()
    {
        return $this->container['chargeback_payments'];
    }

    /**
     * Sets chargeback_payments
     *
     * @param bool $chargeback_payments Can operators of this group chargeback payments received by the owner?
     *
     * @return $this
     */
    public function setChargebackPayments($chargeback_payments)
    {
        $this->container['chargeback_payments'] = $chargeback_payments;

        return $this;
    }

    /**
     * Gets messages
     *
     * @return bool
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     *
     * @param bool $messages Can operators of this group access the message box of the owner?
     *
     * @return $this
     */
    public function setMessages($messages)
    {
        $this->container['messages'] = $messages;

        return $this;
    }

    /**
     * Gets notifications
     *
     * @return bool
     */
    public function getNotifications()
    {
        return $this->container['notifications'];
    }

    /**
     * Sets notifications
     *
     * @param bool $notifications Can operators of this group own notifications?
     *
     * @return $this
     */
    public function setNotifications($notifications)
    {
        $this->container['notifications'] = $notifications;

        return $this;
    }

    /**
     * Gets receive_payments
     *
     * @return bool
     */
    public function getReceivePayments()
    {
        return $this->container['receive_payments'];
    }

    /**
     * Sets receive_payments
     *
     * @param bool $receive_payments Can operators of this group receive payments?
     *
     * @return $this
     */
    public function setReceivePayments($receive_payments)
    {
        $this->container['receive_payments'] = $receive_payments;

        return $this;
    }

    /**
     * Gets redeem_vouchers
     *
     * @return bool
     */
    public function getRedeemVouchers()
    {
        return $this->container['redeem_vouchers'];
    }

    /**
     * Sets redeem_vouchers
     *
     * @param bool $redeem_vouchers Can operators of this group redeem vouchers?
     *
     * @return $this
     */
    public function setRedeemVouchers($redeem_vouchers)
    {
        $this->container['redeem_vouchers'] = $redeem_vouchers;

        return $this;
    }

    /**
     * Gets request_payments
     *
     * @return bool
     */
    public function getRequestPayments()
    {
        return $this->container['request_payments'];
    }

    /**
     * Sets request_payments
     *
     * @param bool $request_payments Can operators of this group request payments?
     *
     * @return $this
     */
    public function setRequestPayments($request_payments)
    {
        $this->container['request_payments'] = $request_payments;

        return $this;
    }

    /**
     * Gets view_advertisements
     *
     * @return bool
     */
    public function getViewAdvertisements()
    {
        return $this->container['view_advertisements'];
    }

    /**
     * Sets view_advertisements
     *
     * @param bool $view_advertisements Can operators of this group view advertisements?
     *
     * @return $this
     */
    public function setViewAdvertisements($view_advertisements)
    {
        $this->container['view_advertisements'] = $view_advertisements;

        return $this;
    }

    /**
     * Gets manage_advertisements
     *
     * @return bool
     */
    public function getManageAdvertisements()
    {
        return $this->container['manage_advertisements'];
    }

    /**
     * Sets manage_advertisements
     *
     * @param bool $manage_advertisements Can operators of this group manage advertisements of the owner?
     *
     * @return $this
     */
    public function setManageAdvertisements($manage_advertisements)
    {
        $this->container['manage_advertisements'] = $manage_advertisements;

        return $this;
    }

    /**
     * Gets enable_token
     *
     * @return bool
     */
    public function getEnableToken()
    {
        return $this->container['enable_token'];
    }

    /**
     * Sets enable_token
     *
     * @param bool $enable_token Can operators of this group have tokens (cards)?
     *
     * @return $this
     */
    public function setEnableToken($enable_token)
    {
        $this->container['enable_token'] = $enable_token;

        return $this;
    }

    /**
     * Gets cancel_token
     *
     * @return bool
     */
    public function getCancelToken()
    {
        return $this->container['cancel_token'];
    }

    /**
     * Sets cancel_token
     *
     * @param bool $cancel_token Can operators of this group cancel their own tokens (cards)?
     *
     * @return $this
     */
    public function setCancelToken($cancel_token)
    {
        $this->container['cancel_token'] = $cancel_token;

        return $this;
    }

    /**
     * Gets block_token
     *
     * @return bool
     */
    public function getBlockToken()
    {
        return $this->container['block_token'];
    }

    /**
     * Sets block_token
     *
     * @param bool $block_token Can operators of this group block their own tokens (cards)?
     *
     * @return $this
     */
    public function setBlockToken($block_token)
    {
        $this->container['block_token'] = $block_token;

        return $this;
    }

    /**
     * Gets unblock_token
     *
     * @return bool
     */
    public function getUnblockToken()
    {
        return $this->container['unblock_token'];
    }

    /**
     * Sets unblock_token
     *
     * @param bool $unblock_token Can operators of this group unblock their own tokens (cards)?
     *
     * @return $this
     */
    public function setUnblockToken($unblock_token)
    {
        $this->container['unblock_token'] = $unblock_token;

        return $this;
    }

    /**
     * Gets brokering
     *
     * @return bool
     */
    public function getBrokering()
    {
        return $this->container['brokering'];
    }

    /**
     * Sets brokering
     *
     * @param bool $brokering Can operators of this group perform brokering operations? This includes full brokering operatations the user is allowed, including user registration, accounts access, payments as user, etc.
     *
     * @return $this
     */
    public function setBrokering($brokering)
    {
        $this->container['brokering'] = $brokering;

        return $this;
    }

    /**
     * Gets restrict_payments_to_users
     *
     * @return string[]
     */
    public function getRestrictPaymentsToUsers()
    {
        return $this->container['restrict_payments_to_users'];
    }

    /**
     * Sets restrict_payments_to_users
     *
     * @param string[] $restrict_payments_to_users When set, operators of this group will only be able to perform payments to one of this users
     *
     * @return $this
     */
    public function setRestrictPaymentsToUsers($restrict_payments_to_users)
    {
        $this->container['restrict_payments_to_users'] = $restrict_payments_to_users;

        return $this;
    }

    /**
     * Gets operations
     *
     * @return string[]
     */
    public function getOperations()
    {
        return $this->container['operations'];
    }

    /**
     * Sets operations
     *
     * @param string[] $operations Ids / internal names of custom operators that operators of this group will only be able to run
     *
     * @return $this
     */
    public function setOperations($operations)
    {
        $this->container['operations'] = $operations;

        return $this;
    }

    /**
     * Gets records
     *
     * @return string[]
     */
    public function getRecords()
    {
        return $this->container['records'];
    }

    /**
     * Sets records
     *
     * @param string[] $records Ids / internal names of record types that operators of this group will only be able to access
     *
     * @return $this
     */
    public function setRecords($records)
    {
        $this->container['records'] = $records;

        return $this;
    }

    /**
     * Gets accounts
     *
     * @return map[string,\Cyclos\Api\Model\OperatorGroupAccount]
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     *
     * @param map[string,\Cyclos\Api\Model\OperatorGroupAccount] $accounts Defines how operators access the owner accounts, and defines restrictions on payment notifications. The key is the account type id or internal name.
     *
     * @return $this
     */
    public function setAccounts($accounts)
    {
        $this->container['accounts'] = $accounts;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return map[string,\Cyclos\Api\Model\OperatorGroupPayment]
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param map[string,\Cyclos\Api\Model\OperatorGroupPayment] $payments Defines which payment types can be used by operators to perform payments or authorize payments performed by other operators. Also defines the maximum daily amount that can be paid per operator.
     *
     * @return $this
     */
    public function setPayments($payments)
    {
        $this->container['payments'] = $payments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
