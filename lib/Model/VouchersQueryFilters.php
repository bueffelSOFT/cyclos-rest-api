<?php
/**
 * VouchersQueryFilters
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;
use \Cyclos\Api\ObjectSerializer;

/**
 * VouchersQueryFilters Class Doc Comment
 *
 * @category Class
 * @description Definitions for searching vouchers as admin
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VouchersQueryFilters extends QueryFilters 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VouchersQueryFilters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'amount_range' => 'float[]',
'creation_period' => '\DateTime[]',
'expiration_period' => '\DateTime[]',
'redeem_period' => '\DateTime[]',
'token' => 'string',
'types' => 'string[]',
'statuses' => '\Cyclos\Api\Model\VoucherStatusEnum[]',
'creation_type' => '\Cyclos\Api\Model\VoucherCreationTypeEnum',
'printed' => 'bool',
'buyer' => 'string',
'redeemer' => 'string',
'buyer_groups' => 'string[]',
'redeemer_groups' => 'string[]',
'order_by' => '\Cyclos\Api\Model\VoucherOrderByEnum'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'amount_range' => 'number',
'creation_period' => 'date-time',
'expiration_period' => 'date-time',
'redeem_period' => 'date-time',
'token' => null,
'types' => null,
'statuses' => null,
'creation_type' => null,
'printed' => null,
'buyer' => null,
'redeemer' => null,
'buyer_groups' => null,
'redeemer_groups' => null,
'order_by' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount_range' => 'amountRange',
'creation_period' => 'creationPeriod',
'expiration_period' => 'expirationPeriod',
'redeem_period' => 'redeemPeriod',
'token' => 'token',
'types' => 'types',
'statuses' => 'statuses',
'creation_type' => 'creationType',
'printed' => 'printed',
'buyer' => 'buyer',
'redeemer' => 'redeemer',
'buyer_groups' => 'buyerGroups',
'redeemer_groups' => 'redeemerGroups',
'order_by' => 'orderBy'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount_range' => 'setAmountRange',
'creation_period' => 'setCreationPeriod',
'expiration_period' => 'setExpirationPeriod',
'redeem_period' => 'setRedeemPeriod',
'token' => 'setToken',
'types' => 'setTypes',
'statuses' => 'setStatuses',
'creation_type' => 'setCreationType',
'printed' => 'setPrinted',
'buyer' => 'setBuyer',
'redeemer' => 'setRedeemer',
'buyer_groups' => 'setBuyerGroups',
'redeemer_groups' => 'setRedeemerGroups',
'order_by' => 'setOrderBy'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount_range' => 'getAmountRange',
'creation_period' => 'getCreationPeriod',
'expiration_period' => 'getExpirationPeriod',
'redeem_period' => 'getRedeemPeriod',
'token' => 'getToken',
'types' => 'getTypes',
'statuses' => 'getStatuses',
'creation_type' => 'getCreationType',
'printed' => 'getPrinted',
'buyer' => 'getBuyer',
'redeemer' => 'getRedeemer',
'buyer_groups' => 'getBuyerGroups',
'redeemer_groups' => 'getRedeemerGroups',
'order_by' => 'getOrderBy'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['amount_range'] = isset($data['amount_range']) ? $data['amount_range'] : null;
        $this->container['creation_period'] = isset($data['creation_period']) ? $data['creation_period'] : null;
        $this->container['expiration_period'] = isset($data['expiration_period']) ? $data['expiration_period'] : null;
        $this->container['redeem_period'] = isset($data['redeem_period']) ? $data['redeem_period'] : null;
        $this->container['token'] = isset($data['token']) ? $data['token'] : null;
        $this->container['types'] = isset($data['types']) ? $data['types'] : null;
        $this->container['statuses'] = isset($data['statuses']) ? $data['statuses'] : null;
        $this->container['creation_type'] = isset($data['creation_type']) ? $data['creation_type'] : null;
        $this->container['printed'] = isset($data['printed']) ? $data['printed'] : null;
        $this->container['buyer'] = isset($data['buyer']) ? $data['buyer'] : null;
        $this->container['redeemer'] = isset($data['redeemer']) ? $data['redeemer'] : null;
        $this->container['buyer_groups'] = isset($data['buyer_groups']) ? $data['buyer_groups'] : null;
        $this->container['redeemer_groups'] = isset($data['redeemer_groups']) ? $data['redeemer_groups'] : null;
        $this->container['order_by'] = isset($data['order_by']) ? $data['order_by'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount_range
     *
     * @return float[]
     */
    public function getAmountRange()
    {
        return $this->container['amount_range'];
    }

    /**
     * Sets amount_range
     *
     * @param float[] $amount_range The minimum / maximum voucher amount
     *
     * @return $this
     */
    public function setAmountRange($amount_range)
    {
        $this->container['amount_range'] = $amount_range;

        return $this;
    }

    /**
     * Gets creation_period
     *
     * @return \DateTime[]
     */
    public function getCreationPeriod()
    {
        return $this->container['creation_period'];
    }

    /**
     * Sets creation_period
     *
     * @param \DateTime[] $creation_period The minimum / maximum voucher creation date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.
     *
     * @return $this
     */
    public function setCreationPeriod($creation_period)
    {
        $this->container['creation_period'] = $creation_period;

        return $this;
    }

    /**
     * Gets expiration_period
     *
     * @return \DateTime[]
     */
    public function getExpirationPeriod()
    {
        return $this->container['expiration_period'];
    }

    /**
     * Sets expiration_period
     *
     * @param \DateTime[] $expiration_period The minimum / maximum voucher expiration date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.
     *
     * @return $this
     */
    public function setExpirationPeriod($expiration_period)
    {
        $this->container['expiration_period'] = $expiration_period;

        return $this;
    }

    /**
     * Gets redeem_period
     *
     * @return \DateTime[]
     */
    public function getRedeemPeriod()
    {
        return $this->container['redeem_period'];
    }

    /**
     * Sets redeem_period
     *
     * @param \DateTime[] $redeem_period The minimum / maximum voucher redeem date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.
     *
     * @return $this
     */
    public function setRedeemPeriod($redeem_period)
    {
        $this->container['redeem_period'] = $redeem_period;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token The voucher token (with or without mask)
     *
     * @return $this
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets types
     *
     * @return string[]
     */
    public function getTypes()
    {
        return $this->container['types'];
    }

    /**
     * Sets types
     *
     * @param string[] $types The ids or internal names of voucher types
     *
     * @return $this
     */
    public function setTypes($types)
    {
        $this->container['types'] = $types;

        return $this;
    }

    /**
     * Gets statuses
     *
     * @return \Cyclos\Api\Model\VoucherStatusEnum[]
     */
    public function getStatuses()
    {
        return $this->container['statuses'];
    }

    /**
     * Sets statuses
     *
     * @param \Cyclos\Api\Model\VoucherStatusEnum[] $statuses statuses
     *
     * @return $this
     */
    public function setStatuses($statuses)
    {
        $this->container['statuses'] = $statuses;

        return $this;
    }

    /**
     * Gets creation_type
     *
     * @return \Cyclos\Api\Model\VoucherCreationTypeEnum
     */
    public function getCreationType()
    {
        return $this->container['creation_type'];
    }

    /**
     * Sets creation_type
     *
     * @param \Cyclos\Api\Model\VoucherCreationTypeEnum $creation_type creation_type
     *
     * @return $this
     */
    public function setCreationType($creation_type)
    {
        $this->container['creation_type'] = $creation_type;

        return $this;
    }

    /**
     * Gets printed
     *
     * @return bool
     */
    public function getPrinted()
    {
        return $this->container['printed'];
    }

    /**
     * Sets printed
     *
     * @param bool $printed If it is passed, filter if the voucher was printed or not.
     *
     * @return $this
     */
    public function setPrinted($printed)
    {
        $this->container['printed'] = $printed;

        return $this;
    }

    /**
     * Gets buyer
     *
     * @return string
     */
    public function getBuyer()
    {
        return $this->container['buyer'];
    }

    /**
     * Sets buyer
     *
     * @param string $buyer The buyer of the voucher. A user identification value, such as id, username, e-mail, phone, etc. Id is always allowed, others depend on Cyclos configuration. Note that a valid numeric value is always considered as id. For example, when using another identification method that can be numeric only, prefix the value with a single quote (like in Excel spreadsheets), for example, `'1234567890`;
     *
     * @return $this
     */
    public function setBuyer($buyer)
    {
        $this->container['buyer'] = $buyer;

        return $this;
    }

    /**
     * Gets redeemer
     *
     * @return string
     */
    public function getRedeemer()
    {
        return $this->container['redeemer'];
    }

    /**
     * Sets redeemer
     *
     * @param string $redeemer The redeemer of the voucher. A user identification value, such as id, username, e-mail, phone, etc. Id is always allowed, others depend on Cyclos configuration. Note that a valid numeric value is always considered as id. For example, when using another identification method that can be numeric only, prefix the value with a single quote (like in Excel spreadsheets), for example, `'1234567890`;
     *
     * @return $this
     */
    public function setRedeemer($redeemer)
    {
        $this->container['redeemer'] = $redeemer;

        return $this;
    }

    /**
     * Gets buyer_groups
     *
     * @return string[]
     */
    public function getBuyerGroups()
    {
        return $this->container['buyer_groups'];
    }

    /**
     * Sets buyer_groups
     *
     * @param string[] $buyer_groups The ids or internal names of buyers groups
     *
     * @return $this
     */
    public function setBuyerGroups($buyer_groups)
    {
        $this->container['buyer_groups'] = $buyer_groups;

        return $this;
    }

    /**
     * Gets redeemer_groups
     *
     * @return string[]
     */
    public function getRedeemerGroups()
    {
        return $this->container['redeemer_groups'];
    }

    /**
     * Sets redeemer_groups
     *
     * @param string[] $redeemer_groups The ids or internal names of redeemers groups
     *
     * @return $this
     */
    public function setRedeemerGroups($redeemer_groups)
    {
        $this->container['redeemer_groups'] = $redeemer_groups;

        return $this;
    }

    /**
     * Gets order_by
     *
     * @return \Cyclos\Api\Model\VoucherOrderByEnum
     */
    public function getOrderBy()
    {
        return $this->container['order_by'];
    }

    /**
     * Sets order_by
     *
     * @param \Cyclos\Api\Model\VoucherOrderByEnum $order_by order_by
     *
     * @return $this
     */
    public function setOrderBy($order_by)
    {
        $this->container['order_by'] = $order_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
