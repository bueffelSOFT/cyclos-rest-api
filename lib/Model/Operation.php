<?php
/**
 * Operation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;
use \Cyclos\Api\ObjectSerializer;

/**
 * Operation Class Doc Comment
 *
 * @category Class
 * @description Contains definitions used to run a custom operation
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Operation extends InternalNamedEntity 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Operation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'icon' => 'string',
'label' => 'string',
'information_text' => 'string',
'confirmation_text' => 'string',
'require_confirmation_password' => 'bool',
'has_file_upload' => 'bool',
'allow_export' => 'bool',
'allow_print' => 'bool',
'missing_optional_parameters' => 'string[]',
'missing_required_parameters' => 'string[]',
'show_form_for_missing_optional_parameters' => 'bool',
'can_run_directly' => 'bool',
'scope' => '\Cyclos\Api\Model\OperationScopeEnum',
'result_type' => '',
'admin_menu' => '',
'user_menu' => ''    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'icon' => null,
'label' => null,
'information_text' => null,
'confirmation_text' => null,
'require_confirmation_password' => null,
'has_file_upload' => null,
'allow_export' => null,
'allow_print' => null,
'missing_optional_parameters' => null,
'missing_required_parameters' => null,
'show_form_for_missing_optional_parameters' => null,
'can_run_directly' => null,
'scope' => null,
'result_type' => null,
'admin_menu' => null,
'user_menu' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'icon' => 'icon',
'label' => 'label',
'information_text' => 'informationText',
'confirmation_text' => 'confirmationText',
'require_confirmation_password' => 'requireConfirmationPassword',
'has_file_upload' => 'hasFileUpload',
'allow_export' => 'allowExport',
'allow_print' => 'allowPrint',
'missing_optional_parameters' => 'missingOptionalParameters',
'missing_required_parameters' => 'missingRequiredParameters',
'show_form_for_missing_optional_parameters' => 'showFormForMissingOptionalParameters',
'can_run_directly' => 'canRunDirectly',
'scope' => 'scope',
'result_type' => 'resultType',
'admin_menu' => 'adminMenu',
'user_menu' => 'userMenu'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'icon' => 'setIcon',
'label' => 'setLabel',
'information_text' => 'setInformationText',
'confirmation_text' => 'setConfirmationText',
'require_confirmation_password' => 'setRequireConfirmationPassword',
'has_file_upload' => 'setHasFileUpload',
'allow_export' => 'setAllowExport',
'allow_print' => 'setAllowPrint',
'missing_optional_parameters' => 'setMissingOptionalParameters',
'missing_required_parameters' => 'setMissingRequiredParameters',
'show_form_for_missing_optional_parameters' => 'setShowFormForMissingOptionalParameters',
'can_run_directly' => 'setCanRunDirectly',
'scope' => 'setScope',
'result_type' => 'setResultType',
'admin_menu' => 'setAdminMenu',
'user_menu' => 'setUserMenu'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'icon' => 'getIcon',
'label' => 'getLabel',
'information_text' => 'getInformationText',
'confirmation_text' => 'getConfirmationText',
'require_confirmation_password' => 'getRequireConfirmationPassword',
'has_file_upload' => 'getHasFileUpload',
'allow_export' => 'getAllowExport',
'allow_print' => 'getAllowPrint',
'missing_optional_parameters' => 'getMissingOptionalParameters',
'missing_required_parameters' => 'getMissingRequiredParameters',
'show_form_for_missing_optional_parameters' => 'getShowFormForMissingOptionalParameters',
'can_run_directly' => 'getCanRunDirectly',
'scope' => 'getScope',
'result_type' => 'getResultType',
'admin_menu' => 'getAdminMenu',
'user_menu' => 'getUserMenu'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['icon'] = isset($data['icon']) ? $data['icon'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['information_text'] = isset($data['information_text']) ? $data['information_text'] : null;
        $this->container['confirmation_text'] = isset($data['confirmation_text']) ? $data['confirmation_text'] : null;
        $this->container['require_confirmation_password'] = isset($data['require_confirmation_password']) ? $data['require_confirmation_password'] : null;
        $this->container['has_file_upload'] = isset($data['has_file_upload']) ? $data['has_file_upload'] : null;
        $this->container['allow_export'] = isset($data['allow_export']) ? $data['allow_export'] : null;
        $this->container['allow_print'] = isset($data['allow_print']) ? $data['allow_print'] : null;
        $this->container['missing_optional_parameters'] = isset($data['missing_optional_parameters']) ? $data['missing_optional_parameters'] : null;
        $this->container['missing_required_parameters'] = isset($data['missing_required_parameters']) ? $data['missing_required_parameters'] : null;
        $this->container['show_form_for_missing_optional_parameters'] = isset($data['show_form_for_missing_optional_parameters']) ? $data['show_form_for_missing_optional_parameters'] : null;
        $this->container['can_run_directly'] = isset($data['can_run_directly']) ? $data['can_run_directly'] : null;
        $this->container['scope'] = isset($data['scope']) ? $data['scope'] : null;
        $this->container['result_type'] = isset($data['result_type']) ? $data['result_type'] : null;
        $this->container['admin_menu'] = isset($data['admin_menu']) ? $data['admin_menu'] : null;
        $this->container['user_menu'] = isset($data['user_menu']) ? $data['user_menu'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets icon
     *
     * @return string
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string $icon The character that represents the icon in the Cyclos font
     *
     * @return $this
     */
    public function setIcon($icon)
    {
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label A representative label about the operation
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets information_text
     *
     * @return string
     */
    public function getInformationText()
    {
        return $this->container['information_text'];
    }

    /**
     * Sets information_text
     *
     * @param string $information_text A message to be displayed to the user when displaying the parameters form. Only returned in contexts where the operation can be executed.
     *
     * @return $this
     */
    public function setInformationText($information_text)
    {
        $this->container['information_text'] = $information_text;

        return $this;
    }

    /**
     * Gets confirmation_text
     *
     * @return string
     */
    public function getConfirmationText()
    {
        return $this->container['confirmation_text'];
    }

    /**
     * Sets confirmation_text
     *
     * @param string $confirmation_text A message to be shown to the user in order to confirm the operation execution. Only returned in contexts where the operation can be executed.
     *
     * @return $this
     */
    public function setConfirmationText($confirmation_text)
    {
        $this->container['confirmation_text'] = $confirmation_text;

        return $this;
    }

    /**
     * Gets require_confirmation_password
     *
     * @return bool
     */
    public function getRequireConfirmationPassword()
    {
        return $this->container['require_confirmation_password'];
    }

    /**
     * Sets require_confirmation_password
     *
     * @param bool $require_confirmation_password Indicates whether this operation requires confirmation password. Only returned in contexts where the operation can be executed.
     *
     * @return $this
     */
    public function setRequireConfirmationPassword($require_confirmation_password)
    {
        $this->container['require_confirmation_password'] = $require_confirmation_password;

        return $this;
    }

    /**
     * Gets has_file_upload
     *
     * @return bool
     */
    public function getHasFileUpload()
    {
        return $this->container['has_file_upload'];
    }

    /**
     * Sets has_file_upload
     *
     * @param bool $has_file_upload Indicates whether this operation accepts a file upload as input. Only returned in contexts where the operation can be executed.
     *
     * @return $this
     */
    public function setHasFileUpload($has_file_upload)
    {
        $this->container['has_file_upload'] = $has_file_upload;

        return $this;
    }

    /**
     * Gets allow_export
     *
     * @return bool
     */
    public function getAllowExport()
    {
        return $this->container['allow_export'];
    }

    /**
     * Sets allow_export
     *
     * @param bool $allow_export Does this operation allows exporting the results as CSV? Only returned if `resultType` is `resultPage`. Only returned in contexts where the operation can be executed.
     *
     * @return $this
     */
    public function setAllowExport($allow_export)
    {
        $this->container['allow_export'] = $allow_export;

        return $this;
    }

    /**
     * Gets allow_print
     *
     * @return bool
     */
    public function getAllowPrint()
    {
        return $this->container['allow_print'];
    }

    /**
     * Sets allow_print
     *
     * @param bool $allow_print Does this operation allows printing the results as PDF? Only returned if `resultType` is `resultPage`. Only returned in contexts where the operation can be executed.
     *
     * @return $this
     */
    public function setAllowPrint($allow_print)
    {
        $this->container['allow_print'] = $allow_print;

        return $this;
    }

    /**
     * Gets missing_optional_parameters
     *
     * @return string[]
     */
    public function getMissingOptionalParameters()
    {
        return $this->container['missing_optional_parameters'];
    }

    /**
     * Sets missing_optional_parameters
     *
     * @param string[] $missing_optional_parameters The optional custom fields without a value. The front-end could opt-in to rely on the `showFormForMissingOptionalParameters` flag to determine whether to show or not an input form if there's a missing poptional form field. Only returned in contexts where the operation can be executed.
     *
     * @return $this
     */
    public function setMissingOptionalParameters($missing_optional_parameters)
    {
        $this->container['missing_optional_parameters'] = $missing_optional_parameters;

        return $this;
    }

    /**
     * Gets missing_required_parameters
     *
     * @return string[]
     */
    public function getMissingRequiredParameters()
    {
        return $this->container['missing_required_parameters'];
    }

    /**
     * Sets missing_required_parameters
     *
     * @param string[] $missing_required_parameters The required custom fields without a value. This means the operation will fail with a validation error if the parameters present in this list are not given when run it. Only returned in contexts where the operation can be executed.
     *
     * @return $this
     */
    public function setMissingRequiredParameters($missing_required_parameters)
    {
        $this->container['missing_required_parameters'] = $missing_required_parameters;

        return $this;
    }

    /**
     * Gets show_form_for_missing_optional_parameters
     *
     * @return bool
     */
    public function getShowFormForMissingOptionalParameters()
    {
        return $this->container['show_form_for_missing_optional_parameters'];
    }

    /**
     * Sets show_form_for_missing_optional_parameters
     *
     * @param bool $show_form_for_missing_optional_parameters Indicates whether a form to enter the missing optional parameters must be shown. Only returned if the `missingOptionalParameters` list is not empty and `scope` is  `internal`. Only returned in contexts where the operation can be executed.
     *
     * @return $this
     */
    public function setShowFormForMissingOptionalParameters($show_form_for_missing_optional_parameters)
    {
        $this->container['show_form_for_missing_optional_parameters'] = $show_form_for_missing_optional_parameters;

        return $this;
    }

    /**
     * Gets can_run_directly
     *
     * @return bool
     */
    public function getCanRunDirectly()
    {
        return $this->container['can_run_directly'];
    }

    /**
     * Sets can_run_directly
     *
     * @param bool $can_run_directly Use the other flags instead. This flag was decomposed in several others to allow better control at the moment of run a custom operation. For example, if your front-end asks for the confirmation password in a popup instead of in its own page and  the only thing you need to run the operation is that (i.e thereare no missing parameters, no file upload, etc)  then you could show the popup to collect the password and then run the custom operation directly in the same page on which you are.   Indicates whether this operation can be executed directly, without showing a form page. More specifically, this flag is true if:  - There are no confirmation text nor informational text - File upload is not allowed - Confirmation password is not required - All required parameters were set - All optional parametes were set or, if not, the option to show the form in case of missing parameters is false.  Only returned in contexts where the operation can be executed.
     *
     * @return $this
     */
    public function setCanRunDirectly($can_run_directly)
    {
        $this->container['can_run_directly'] = $can_run_directly;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return \Cyclos\Api\Model\OperationScopeEnum
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param \Cyclos\Api\Model\OperationScopeEnum $scope scope
     *
     * @return $this
     */
    public function setScope($scope)
    {
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets result_type
     *
     * @return 
     */
    public function getResultType()
    {
        return $this->container['result_type'];
    }

    /**
     * Sets result_type
     *
     * @param  $result_type The type of data returned after the operation is executed. Only returned in contexts where the operation can be executed.
     *
     * @return $this
     */
    public function setResultType($result_type)
    {
        $this->container['result_type'] = $result_type;

        return $this;
    }

    /**
     * Gets admin_menu
     *
     * @return 
     */
    public function getAdminMenu()
    {
        return $this->container['admin_menu'];
    }

    /**
     * Sets admin_menu
     *
     * @param  $admin_menu In which administration menu the operation shows up. Only returned in contexts where the operation can be executed.
     *
     * @return $this
     */
    public function setAdminMenu($admin_menu)
    {
        $this->container['admin_menu'] = $admin_menu;

        return $this;
    }

    /**
     * Gets user_menu
     *
     * @return 
     */
    public function getUserMenu()
    {
        return $this->container['user_menu'];
    }

    /**
     * Sets user_menu
     *
     * @param  $user_menu In which user menu the operation shows up. Only returned in contexts where the operation can be executed.
     *
     * @return $this
     */
    public function setUserMenu($user_menu)
    {
        $this->container['user_menu'] = $user_menu;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
