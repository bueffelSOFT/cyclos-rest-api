<?php
/**
 * PhoneBasicData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;

use \ArrayAccess;
use \Cyclos\Api\ObjectSerializer;

/**
 * PhoneBasicData Class Doc Comment
 *
 * @category Class
 * @description Contains data shared by both PhoneDataForNew and PhoneDataForEdit
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PhoneBasicData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PhoneBasicData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'country' => 'string',
'always_show_international_number' => 'bool',
'example' => 'string',
'extension_enabled' => 'bool',
'sms_enabled' => 'bool',
'enable_privacy' => 'bool',
'manage_privacy' => 'bool',
'manually_verify' => 'bool',
'confirmation_password_input' => 'AllOfPhoneBasicDataConfirmationPasswordInput',
'type' => '\Cyclos\Api\Model\PhoneKind'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'country' => null,
'always_show_international_number' => null,
'example' => null,
'extension_enabled' => null,
'sms_enabled' => null,
'enable_privacy' => null,
'manage_privacy' => null,
'manually_verify' => null,
'confirmation_password_input' => null,
'type' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'country' => 'country',
'always_show_international_number' => 'alwaysShowInternationalNumber',
'example' => 'example',
'extension_enabled' => 'extensionEnabled',
'sms_enabled' => 'smsEnabled',
'enable_privacy' => 'enablePrivacy',
'manage_privacy' => 'managePrivacy',
'manually_verify' => 'manuallyVerify',
'confirmation_password_input' => 'confirmationPasswordInput',
'type' => 'type'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'country' => 'setCountry',
'always_show_international_number' => 'setAlwaysShowInternationalNumber',
'example' => 'setExample',
'extension_enabled' => 'setExtensionEnabled',
'sms_enabled' => 'setSmsEnabled',
'enable_privacy' => 'setEnablePrivacy',
'manage_privacy' => 'setManagePrivacy',
'manually_verify' => 'setManuallyVerify',
'confirmation_password_input' => 'setConfirmationPasswordInput',
'type' => 'setType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'country' => 'getCountry',
'always_show_international_number' => 'getAlwaysShowInternationalNumber',
'example' => 'getExample',
'extension_enabled' => 'getExtensionEnabled',
'sms_enabled' => 'getSmsEnabled',
'enable_privacy' => 'getEnablePrivacy',
'manage_privacy' => 'getManagePrivacy',
'manually_verify' => 'getManuallyVerify',
'confirmation_password_input' => 'getConfirmationPasswordInput',
'type' => 'getType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['always_show_international_number'] = isset($data['always_show_international_number']) ? $data['always_show_international_number'] : null;
        $this->container['example'] = isset($data['example']) ? $data['example'] : null;
        $this->container['extension_enabled'] = isset($data['extension_enabled']) ? $data['extension_enabled'] : null;
        $this->container['sms_enabled'] = isset($data['sms_enabled']) ? $data['sms_enabled'] : null;
        $this->container['enable_privacy'] = isset($data['enable_privacy']) ? $data['enable_privacy'] : null;
        $this->container['manage_privacy'] = isset($data['manage_privacy']) ? $data['manage_privacy'] : null;
        $this->container['manually_verify'] = isset($data['manually_verify']) ? $data['manually_verify'] : null;
        $this->container['confirmation_password_input'] = isset($data['confirmation_password_input']) ? $data['confirmation_password_input'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country The 2-letter country code used by default for numbers. Unless an international number is specified (using the `+` prefix), the phone number is assumed to belong to this country.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets always_show_international_number
     *
     * @return bool
     */
    public function getAlwaysShowInternationalNumber()
    {
        return $this->container['always_show_international_number'];
    }

    /**
     * Sets always_show_international_number
     *
     * @param bool $always_show_international_number Indicates the it is configured to always format numbers using the international format. If set to false, numbers will be formatted in the national format.
     *
     * @return $this
     */
    public function setAlwaysShowInternationalNumber($always_show_international_number)
    {
        $this->container['always_show_international_number'] = $always_show_international_number;

        return $this;
    }

    /**
     * Gets example
     *
     * @return string
     */
    public function getExample()
    {
        return $this->container['example'];
    }

    /**
     * Sets example
     *
     * @param string $example An example phone number. Can be either a land-line or mobile phone number example, depending on this phone kind phone
     *
     * @return $this
     */
    public function setExample($example)
    {
        $this->container['example'] = $example;

        return $this;
    }

    /**
     * Gets extension_enabled
     *
     * @return bool
     */
    public function getExtensionEnabled()
    {
        return $this->container['extension_enabled'];
    }

    /**
     * Sets extension_enabled
     *
     * @param bool $extension_enabled Only returned for land line phones. Indicates whether the extension is enabled.
     *
     * @return $this
     */
    public function setExtensionEnabled($extension_enabled)
    {
        $this->container['extension_enabled'] = $extension_enabled;

        return $this;
    }

    /**
     * Gets sms_enabled
     *
     * @return bool
     */
    public function getSmsEnabled()
    {
        return $this->container['sms_enabled'];
    }

    /**
     * Sets sms_enabled
     *
     * @param bool $sms_enabled Only returned for mobile phones. Indicates whether outbound SMS is enabled in Cyclos
     *
     * @return $this
     */
    public function setSmsEnabled($sms_enabled)
    {
        $this->container['sms_enabled'] = $sms_enabled;

        return $this;
    }

    /**
     * Gets enable_privacy
     *
     * @return bool
     */
    public function getEnablePrivacy()
    {
        return $this->container['enable_privacy'];
    }

    /**
     * Sets enable_privacy
     *
     * @param bool $enable_privacy Indicates whether privacy can be used for this phone
     *
     * @return $this
     */
    public function setEnablePrivacy($enable_privacy)
    {
        $this->container['enable_privacy'] = $enable_privacy;

        return $this;
    }

    /**
     * Gets manage_privacy
     *
     * @return bool
     */
    public function getManagePrivacy()
    {
        return $this->container['manage_privacy'];
    }

    /**
     * Sets manage_privacy
     *
     * @param bool $manage_privacy Can the authenticated user manage the privacy of this phone?
     *
     * @return $this
     */
    public function setManagePrivacy($manage_privacy)
    {
        $this->container['manage_privacy'] = $manage_privacy;

        return $this;
    }

    /**
     * Gets manually_verify
     *
     * @return bool
     */
    public function getManuallyVerify()
    {
        return $this->container['manually_verify'];
    }

    /**
     * Sets manually_verify
     *
     * @param bool $manually_verify Can the authenticated user manully verify a mobile phone?
     *
     * @return $this
     */
    public function setManuallyVerify($manually_verify)
    {
        $this->container['manually_verify'] = $manually_verify;

        return $this;
    }

    /**
     * Gets confirmation_password_input
     *
     * @return AllOfPhoneBasicDataConfirmationPasswordInput
     */
    public function getConfirmationPasswordInput()
    {
        return $this->container['confirmation_password_input'];
    }

    /**
     * Sets confirmation_password_input
     *
     * @param AllOfPhoneBasicDataConfirmationPasswordInput $confirmation_password_input If a confirmation password is used, contains the definitions on how to request that password from the user. This confirmation password is required when performing sensible actions. Sometimes this is dynamic, for example, the confirmation might be configured to be used only once per session, or operations like payments may have a limit per day to be without confirmation (pinless).
     *
     * @return $this
     */
    public function setConfirmationPasswordInput($confirmation_password_input)
    {
        $this->container['confirmation_password_input'] = $confirmation_password_input;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Cyclos\Api\Model\PhoneKind
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Cyclos\Api\Model\PhoneKind $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
