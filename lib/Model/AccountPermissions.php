<?php
/**
 * AccountPermissions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;

use \ArrayAccess;
use \Cyclos\Api\ObjectSerializer;

/**
 * AccountPermissions Class Doc Comment
 *
 * @category Class
 * @description Permissions over an account
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountPermissions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountPermissions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account' => '\Cyclos\Api\Model\AccountWithCurrency',
'visible' => 'bool',
'view_status' => 'bool',
'system_payments' => '\Cyclos\Api\Model\RelatedTransferType[]',
'user_payments' => '\Cyclos\Api\Model\RelatedTransferType[]',
'self_payments' => '\Cyclos\Api\Model\RelatedTransferType[]',
'pos_payments' => '\Cyclos\Api\Model\RelatedTransferType[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account' => null,
'visible' => null,
'view_status' => null,
'system_payments' => null,
'user_payments' => null,
'self_payments' => null,
'pos_payments' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account' => 'account',
'visible' => 'visible',
'view_status' => 'viewStatus',
'system_payments' => 'systemPayments',
'user_payments' => 'userPayments',
'self_payments' => 'selfPayments',
'pos_payments' => 'posPayments'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account' => 'setAccount',
'visible' => 'setVisible',
'view_status' => 'setViewStatus',
'system_payments' => 'setSystemPayments',
'user_payments' => 'setUserPayments',
'self_payments' => 'setSelfPayments',
'pos_payments' => 'setPosPayments'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account' => 'getAccount',
'visible' => 'getVisible',
'view_status' => 'getViewStatus',
'system_payments' => 'getSystemPayments',
'user_payments' => 'getUserPayments',
'self_payments' => 'getSelfPayments',
'pos_payments' => 'getPosPayments'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account'] = isset($data['account']) ? $data['account'] : null;
        $this->container['visible'] = isset($data['visible']) ? $data['visible'] : null;
        $this->container['view_status'] = isset($data['view_status']) ? $data['view_status'] : null;
        $this->container['system_payments'] = isset($data['system_payments']) ? $data['system_payments'] : null;
        $this->container['user_payments'] = isset($data['user_payments']) ? $data['user_payments'] : null;
        $this->container['self_payments'] = isset($data['self_payments']) ? $data['self_payments'] : null;
        $this->container['pos_payments'] = isset($data['pos_payments']) ? $data['pos_payments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account
     *
     * @return \Cyclos\Api\Model\AccountWithCurrency
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \Cyclos\Api\Model\AccountWithCurrency $account account
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return bool
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param bool $visible Whether the account also is visible for the logged user or, if false means it is only accessible. A non visible account still is operative, i.e the user could make/receive payments from/to it (i.e is accessible) but can not make a transfers history search for it.
     *
     * @return $this
     */
    public function setVisible($visible)
    {
        $this->container['visible'] = $visible;

        return $this;
    }

    /**
     * Gets view_status
     *
     * @return bool
     */
    public function getViewStatus()
    {
        return $this->container['view_status'];
    }

    /**
     * Sets view_status
     *
     * @param bool $view_status Indicates whether the logged user can see the account status for this account. Some restricted operators can view the account history, but not the account status (balance and so on).
     *
     * @return $this
     */
    public function setViewStatus($view_status)
    {
        $this->container['view_status'] = $view_status;

        return $this;
    }

    /**
     * Gets system_payments
     *
     * @return \Cyclos\Api\Model\RelatedTransferType[]
     */
    public function getSystemPayments()
    {
        return $this->container['system_payments'];
    }

    /**
     * Sets system_payments
     *
     * @param \Cyclos\Api\Model\RelatedTransferType[] $system_payments Payment types allowed to be performed to system accounts.
     *
     * @return $this
     */
    public function setSystemPayments($system_payments)
    {
        $this->container['system_payments'] = $system_payments;

        return $this;
    }

    /**
     * Gets user_payments
     *
     * @return \Cyclos\Api\Model\RelatedTransferType[]
     */
    public function getUserPayments()
    {
        return $this->container['user_payments'];
    }

    /**
     * Sets user_payments
     *
     * @param \Cyclos\Api\Model\RelatedTransferType[] $user_payments Payment types allowed to be performed to other users
     *
     * @return $this
     */
    public function setUserPayments($user_payments)
    {
        $this->container['user_payments'] = $user_payments;

        return $this;
    }

    /**
     * Gets self_payments
     *
     * @return \Cyclos\Api\Model\RelatedTransferType[]
     */
    public function getSelfPayments()
    {
        return $this->container['self_payments'];
    }

    /**
     * Sets self_payments
     *
     * @param \Cyclos\Api\Model\RelatedTransferType[] $self_payments Payment types allowed to be performed to other self accounts. Only returned for user accounts.
     *
     * @return $this
     */
    public function setSelfPayments($self_payments)
    {
        $this->container['self_payments'] = $self_payments;

        return $this;
    }

    /**
     * Gets pos_payments
     *
     * @return \Cyclos\Api\Model\RelatedTransferType[]
     */
    public function getPosPayments()
    {
        return $this->container['pos_payments'];
    }

    /**
     * Sets pos_payments
     *
     * @param \Cyclos\Api\Model\RelatedTransferType[] $pos_payments Payment types allowed to be used on POS (receive payments from other users). Only returned for user accounts.
     *
     * @return $this
     */
    public function setPosPayments($pos_payments)
    {
        $this->container['pos_payments'] = $pos_payments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
