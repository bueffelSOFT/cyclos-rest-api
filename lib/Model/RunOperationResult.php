<?php
/**
 * RunOperationResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;

use \ArrayAccess;
use \Cyclos\Api\ObjectSerializer;

/**
 * RunOperationResult Class Doc Comment
 *
 * @category Class
 * @description Defines what is returned when a custom operation is executed. The actual property that are filled depend on the &#x60;resultType&#x60; property. Not returned when the &#x60;resultType&#x60; is file. In that case, the response content will be the file content
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RunOperationResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RunOperationResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'title' => 'string',
'content' => 'string',
'notification' => 'string',
'url' => 'string',
'back_to' => 'AllOfRunOperationResultBackTo',
'back_to_root' => 'bool',
're_run' => 'bool',
'auto_run_action_id' => 'string',
'columns' => '\Cyclos\Api\Model\RunOperationResultColumn[]',
'rows' => 'map[string,object][]',
'actions' => '\Cyclos\Api\Model\RunOperationAction[]',
'result_type' => '\Cyclos\Api\Model\OperationResultTypeEnum',
'notification_level' => 'AllOfRunOperationResultNotificationLevel'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'title' => null,
'content' => null,
'notification' => null,
'url' => null,
'back_to' => null,
'back_to_root' => null,
're_run' => null,
'auto_run_action_id' => null,
'columns' => null,
'rows' => null,
'actions' => null,
'result_type' => null,
'notification_level' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'title',
'content' => 'content',
'notification' => 'notification',
'url' => 'url',
'back_to' => 'backTo',
'back_to_root' => 'backToRoot',
're_run' => 'reRun',
'auto_run_action_id' => 'autoRunActionId',
'columns' => 'columns',
'rows' => 'rows',
'actions' => 'actions',
'result_type' => 'resultType',
'notification_level' => 'notificationLevel'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
'content' => 'setContent',
'notification' => 'setNotification',
'url' => 'setUrl',
'back_to' => 'setBackTo',
'back_to_root' => 'setBackToRoot',
're_run' => 'setReRun',
'auto_run_action_id' => 'setAutoRunActionId',
'columns' => 'setColumns',
'rows' => 'setRows',
'actions' => 'setActions',
'result_type' => 'setResultType',
'notification_level' => 'setNotificationLevel'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
'content' => 'getContent',
'notification' => 'getNotification',
'url' => 'getUrl',
'back_to' => 'getBackTo',
'back_to_root' => 'getBackToRoot',
're_run' => 'getReRun',
'auto_run_action_id' => 'getAutoRunActionId',
'columns' => 'getColumns',
'rows' => 'getRows',
'actions' => 'getActions',
'result_type' => 'getResultType',
'notification_level' => 'getNotificationLevel'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['notification'] = isset($data['notification']) ? $data['notification'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['back_to'] = isset($data['back_to']) ? $data['back_to'] : null;
        $this->container['back_to_root'] = isset($data['back_to_root']) ? $data['back_to_root'] : null;
        $this->container['re_run'] = isset($data['re_run']) ? $data['re_run'] : null;
        $this->container['auto_run_action_id'] = isset($data['auto_run_action_id']) ? $data['auto_run_action_id'] : null;
        $this->container['columns'] = isset($data['columns']) ? $data['columns'] : null;
        $this->container['rows'] = isset($data['rows']) ? $data['rows'] : null;
        $this->container['actions'] = isset($data['actions']) ? $data['actions'] : null;
        $this->container['result_type'] = isset($data['result_type']) ? $data['result_type'] : null;
        $this->container['notification_level'] = isset($data['notification_level']) ? $data['notification_level'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The text title. May be returned only if `resultType` is either `plainText`, `richText` or `resultPage`.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string $content The execution result content. Only returned if `resultType` is either `plainText` or `richText`.
     *
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets notification
     *
     * @return string
     */
    public function getNotification()
    {
        return $this->container['notification'];
    }

    /**
     * Sets notification
     *
     * @param string $notification The execution result as string that should be shown as a notification. Only returned if `resultType` is `notification`.
     *
     * @return $this
     */
    public function setNotification($notification)
    {
        $this->container['notification'] = $notification;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The execution result as an URL, to which the client should be redirected. Only returned if `resultType` is either `externalRedirect` or `url`.
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets back_to
     *
     * @return AllOfRunOperationResultBackTo
     */
    public function getBackTo()
    {
        return $this->container['back_to'];
    }

    /**
     * Sets back_to
     *
     * @param AllOfRunOperationResultBackTo $back_to Either the id or internal name of the custom operation to go back after run the operation.
     *
     * @return $this
     */
    public function setBackTo($back_to)
    {
        $this->container['back_to'] = $back_to;

        return $this;
    }

    /**
     * Gets back_to_root
     *
     * @return bool
     */
    public function getBackToRoot()
    {
        return $this->container['back_to_root'];
    }

    /**
     * Sets back_to_root
     *
     * @param bool $back_to_root A boolean value indicating if the client application must go back to the page that originated the custom  operation executions.
     *
     * @return $this
     */
    public function setBackToRoot($back_to_root)
    {
        $this->container['back_to_root'] = $back_to_root;

        return $this;
    }

    /**
     * Gets re_run
     *
     * @return bool
     */
    public function getReRun()
    {
        return $this->container['re_run'];
    }

    /**
     * Sets re_run
     *
     * @param bool $re_run A boolean value indicating if the custom operation we went back to or the current action container operation must be re-run before display it.
     *
     * @return $this
     */
    public function setReRun($re_run)
    {
        $this->container['re_run'] = $re_run;

        return $this;
    }

    /**
     * Gets auto_run_action_id
     *
     * @return string
     */
    public function getAutoRunActionId()
    {
        return $this->container['auto_run_action_id'];
    }

    /**
     * Sets auto_run_action_id
     *
     * @param string $auto_run_action_id If it is present, it indicates the id of the action that should be executed automatically.
     *
     * @return $this
     */
    public function setAutoRunActionId($auto_run_action_id)
    {
        $this->container['auto_run_action_id'] = $auto_run_action_id;

        return $this;
    }

    /**
     * Gets columns
     *
     * @return \Cyclos\Api\Model\RunOperationResultColumn[]
     */
    public function getColumns()
    {
        return $this->container['columns'];
    }

    /**
     * Sets columns
     *
     * @param \Cyclos\Api\Model\RunOperationResultColumn[] $columns Contains the definitions for each column in the result. Only returned if `resultType` is `resultPage`.
     *
     * @return $this
     */
    public function setColumns($columns)
    {
        $this->container['columns'] = $columns;

        return $this;
    }

    /**
     * Gets rows
     *
     * @return map[string,object][]
     */
    public function getRows()
    {
        return $this->container['rows'];
    }

    /**
     * Sets rows
     *
     * @param map[string,object][] $rows Each row is an object containing the cells for that row, keyed by each column's `property`. Only returned if `resultType` is `resultPage`.
     *
     * @return $this
     */
    public function setRows($rows)
    {
        $this->container['rows'] = $rows;

        return $this;
    }

    /**
     * Gets actions
     *
     * @return \Cyclos\Api\Model\RunOperationAction[]
     */
    public function getActions()
    {
        return $this->container['actions'];
    }

    /**
     * Sets actions
     *
     * @param \Cyclos\Api\Model\RunOperationAction[] $actions Actions are other internal custom operations that can be executed from this custom operation. The returned parameters should be passed to the server when running this action.
     *
     * @return $this
     */
    public function setActions($actions)
    {
        $this->container['actions'] = $actions;

        return $this;
    }

    /**
     * Gets result_type
     *
     * @return \Cyclos\Api\Model\OperationResultTypeEnum
     */
    public function getResultType()
    {
        return $this->container['result_type'];
    }

    /**
     * Sets result_type
     *
     * @param \Cyclos\Api\Model\OperationResultTypeEnum $result_type result_type
     *
     * @return $this
     */
    public function setResultType($result_type)
    {
        $this->container['result_type'] = $result_type;

        return $this;
    }

    /**
     * Gets notification_level
     *
     * @return AllOfRunOperationResultNotificationLevel
     */
    public function getNotificationLevel()
    {
        return $this->container['notification_level'];
    }

    /**
     * Sets notification_level
     *
     * @param AllOfRunOperationResultNotificationLevel $notification_level Only returned if `resultType` is `notification`.
     *
     * @return $this
     */
    public function setNotificationLevel($notification_level)
    {
        $this->container['notification_level'] = $notification_level;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
