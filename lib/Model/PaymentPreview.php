<?php
/**
 * PaymentPreview
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;
use \Cyclos\Api\ObjectSerializer;

/**
 * PaymentPreview Class Doc Comment
 *
 * @category Class
 * @description Preview of either a direct or scheduled payment
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentPreview extends InternalTransactionPreview 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentPreview';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'main_amount' => 'float',
'fees' => '\Cyclos\Api\Model\TransferFeePreview[]',
'installments' => '\Cyclos\Api\Model\ScheduledPaymentInstallmentPreview[]',
'payment' => '',
'a_rate' => 'float',
'd_rate' => 'float',
'previous_d_rate' => 'float',
'transfer_d_rate' => 'float'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'main_amount' => 'number',
'fees' => null,
'installments' => null,
'payment' => null,
'a_rate' => 'number',
'd_rate' => 'number',
'previous_d_rate' => 'number',
'transfer_d_rate' => 'number'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'main_amount' => 'mainAmount',
'fees' => 'fees',
'installments' => 'installments',
'payment' => 'payment',
'a_rate' => 'ARate',
'd_rate' => 'DRate',
'previous_d_rate' => 'previousDRate',
'transfer_d_rate' => 'transferDRate'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'main_amount' => 'setMainAmount',
'fees' => 'setFees',
'installments' => 'setInstallments',
'payment' => 'setPayment',
'a_rate' => 'setARate',
'd_rate' => 'setDRate',
'previous_d_rate' => 'setPreviousDRate',
'transfer_d_rate' => 'setTransferDRate'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'main_amount' => 'getMainAmount',
'fees' => 'getFees',
'installments' => 'getInstallments',
'payment' => 'getPayment',
'a_rate' => 'getARate',
'd_rate' => 'getDRate',
'previous_d_rate' => 'getPreviousDRate',
'transfer_d_rate' => 'getTransferDRate'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['main_amount'] = isset($data['main_amount']) ? $data['main_amount'] : null;
        $this->container['fees'] = isset($data['fees']) ? $data['fees'] : null;
        $this->container['installments'] = isset($data['installments']) ? $data['installments'] : null;
        $this->container['payment'] = isset($data['payment']) ? $data['payment'] : null;
        $this->container['a_rate'] = isset($data['a_rate']) ? $data['a_rate'] : null;
        $this->container['d_rate'] = isset($data['d_rate']) ? $data['d_rate'] : null;
        $this->container['previous_d_rate'] = isset($data['previous_d_rate']) ? $data['previous_d_rate'] : null;
        $this->container['transfer_d_rate'] = isset($data['transfer_d_rate']) ? $data['transfer_d_rate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets main_amount
     *
     * @return float
     */
    public function getMainAmount()
    {
        return $this->container['main_amount'];
    }

    /**
     * Sets main_amount
     *
     * @param float $main_amount This reflects the new transaction amount. Depending on the configured fees, it could happen that the fee amount is deducted from transaction amount. If no fees deduct, it will be the same as transaction amount.  E.g: payment from A to B by 100 units with two fees: 10 units deducted from payment amount and other of 15 not deducted. Then the `totalAmount` will be 115, 90 for the `mainAmount`, 10 for the first fee and 15 for  the other fee.
     *
     * @return $this
     */
    public function setMainAmount($main_amount)
    {
        $this->container['main_amount'] = $main_amount;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return \Cyclos\Api\Model\TransferFeePreview[]
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param \Cyclos\Api\Model\TransferFeePreview[] $fees Only returned for direct payments. Contains the fees that would be paid by the payer if the payment is confirmed.
     *
     * @return $this
     */
    public function setFees($fees)
    {
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets installments
     *
     * @return \Cyclos\Api\Model\ScheduledPaymentInstallmentPreview[]
     */
    public function getInstallments()
    {
        return $this->container['installments'];
    }

    /**
     * Sets installments
     *
     * @param \Cyclos\Api\Model\ScheduledPaymentInstallmentPreview[] $installments Only returned for scheduled payments. Contains the previews of each installment, if the payment is confirmed.
     *
     * @return $this
     */
    public function setInstallments($installments)
    {
        $this->container['installments'] = $installments;

        return $this;
    }

    /**
     * Gets payment
     *
     * @return 
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     *
     * @param  $payment Depending on the configuration, some script might alter the payment object, for example, filling in custom fields. This object can be used to show the actual data to the user, and to be posted again to the `POST /{owner}/payments/` path.
     *
     * @return $this
     */
    public function setPayment($payment)
    {
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets a_rate
     *
     * @return float
     */
    public function getARate()
    {
        return $this->container['a_rate'];
    }

    /**
     * Sets a_rate
     *
     * @param float $a_rate The balance aging counter used for this payment
     *
     * @return $this
     */
    public function setARate($a_rate)
    {
        $this->container['a_rate'] = $a_rate;

        return $this;
    }

    /**
     * Gets d_rate
     *
     * @return float
     */
    public function getDRate()
    {
        return $this->container['d_rate'];
    }

    /**
     * Sets d_rate
     *
     * @param float $d_rate The balance maturity used for this payment
     *
     * @return $this
     */
    public function setDRate($d_rate)
    {
        $this->container['d_rate'] = $d_rate;

        return $this;
    }

    /**
     * Gets previous_d_rate
     *
     * @return float
     */
    public function getPreviousDRate()
    {
        return $this->container['previous_d_rate'];
    }

    /**
     * Sets previous_d_rate
     *
     * @param float $previous_d_rate The number of days until the present balance reaches its maturity
     *
     * @return $this
     */
    public function setPreviousDRate($previous_d_rate)
    {
        $this->container['previous_d_rate'] = $previous_d_rate;

        return $this;
    }

    /**
     * Gets transfer_d_rate
     *
     * @return float
     */
    public function getTransferDRate()
    {
        return $this->container['transfer_d_rate'];
    }

    /**
     * Sets transfer_d_rate
     *
     * @param float $transfer_d_rate The maturity used for this payment
     *
     * @return $this
     */
    public function setTransferDRate($transfer_d_rate)
    {
        $this->container['transfer_d_rate'] = $transfer_d_rate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
