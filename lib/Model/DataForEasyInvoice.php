<?php
/**
 * DataForEasyInvoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;

use \ArrayAccess;
use \Cyclos\Api\ObjectSerializer;

/**
 * DataForEasyInvoice Class Doc Comment
 *
 * @category Class
 * @description Contains data for an easy invoice. When called as guest, a subset of the fields are returned.
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DataForEasyInvoice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForEasyInvoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'to' => 'AllOfDataForEasyInvoiceTo',
'amount' => 'float',
'currency' => '\Cyclos\Api\Model\Currency',
'payment_type_data' => 'AllOfDataForEasyInvoicePaymentTypeData',
'device_confirmation_availability' => 'AllOfDataForEasyInvoiceDeviceConfirmationAvailability',
'payment_types' => '\Cyclos\Api\Model\TransferTypeWithCurrency[]',
'custom_values' => '\Cyclos\Api\Model\CustomFieldValue[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'to' => null,
'amount' => 'number',
'currency' => null,
'payment_type_data' => null,
'device_confirmation_availability' => null,
'payment_types' => null,
'custom_values' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'to' => 'to',
'amount' => 'amount',
'currency' => 'currency',
'payment_type_data' => 'paymentTypeData',
'device_confirmation_availability' => 'deviceConfirmationAvailability',
'payment_types' => 'paymentTypes',
'custom_values' => 'customValues'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'to' => 'setTo',
'amount' => 'setAmount',
'currency' => 'setCurrency',
'payment_type_data' => 'setPaymentTypeData',
'device_confirmation_availability' => 'setDeviceConfirmationAvailability',
'payment_types' => 'setPaymentTypes',
'custom_values' => 'setCustomValues'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'to' => 'getTo',
'amount' => 'getAmount',
'currency' => 'getCurrency',
'payment_type_data' => 'getPaymentTypeData',
'device_confirmation_availability' => 'getDeviceConfirmationAvailability',
'payment_types' => 'getPaymentTypes',
'custom_values' => 'getCustomValues'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['payment_type_data'] = isset($data['payment_type_data']) ? $data['payment_type_data'] : null;
        $this->container['device_confirmation_availability'] = isset($data['device_confirmation_availability']) ? $data['device_confirmation_availability'] : null;
        $this->container['payment_types'] = isset($data['payment_types']) ? $data['payment_types'] : null;
        $this->container['custom_values'] = isset($data['custom_values']) ? $data['custom_values'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets to
     *
     * @return AllOfDataForEasyInvoiceTo
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param AllOfDataForEasyInvoiceTo $to The destination user details. Is only returned if called with a logged user or if the user's group is visible to guests accoerding to the current configuration.
     *
     * @return $this
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount The easy invoice amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \Cyclos\Api\Model\Currency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Cyclos\Api\Model\Currency $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets payment_type_data
     *
     * @return AllOfDataForEasyInvoicePaymentTypeData
     */
    public function getPaymentTypeData()
    {
        return $this->container['payment_type_data'];
    }

    /**
     * Sets payment_type_data
     *
     * @param AllOfDataForEasyInvoicePaymentTypeData $payment_type_data Contains the detailed data for the selected (or first) payment type. Only returned if there is a logged user. The custom fields will only contain those without a fixed value.
     *
     * @return $this
     */
    public function setPaymentTypeData($payment_type_data)
    {
        $this->container['payment_type_data'] = $payment_type_data;

        return $this;
    }

    /**
     * Gets device_confirmation_availability
     *
     * @return AllOfDataForEasyInvoiceDeviceConfirmationAvailability
     */
    public function getDeviceConfirmationAvailability()
    {
        return $this->container['device_confirmation_availability'];
    }

    /**
     * Sets device_confirmation_availability
     *
     * @param AllOfDataForEasyInvoiceDeviceConfirmationAvailability $device_confirmation_availability Only returned if there is not a logged user. Whether the confirmation with a trusted device is not used, optional or required.
     *
     * @return $this
     */
    public function setDeviceConfirmationAvailability($device_confirmation_availability)
    {
        $this->container['device_confirmation_availability'] = $device_confirmation_availability;

        return $this;
    }

    /**
     * Gets payment_types
     *
     * @return \Cyclos\Api\Model\TransferTypeWithCurrency[]
     */
    public function getPaymentTypes()
    {
        return $this->container['payment_types'];
    }

    /**
     * Sets payment_types
     *
     * @param \Cyclos\Api\Model\TransferTypeWithCurrency[] $payment_types Only returned if there is a logged user, and a specific payment type was not informed. Contains the allowed payment types to the given user.
     *
     * @return $this
     */
    public function setPaymentTypes($payment_types)
    {
        $this->container['payment_types'] = $payment_types;

        return $this;
    }

    /**
     * Gets custom_values
     *
     * @return \Cyclos\Api\Model\CustomFieldValue[]
     */
    public function getCustomValues()
    {
        return $this->container['custom_values'];
    }

    /**
     * Sets custom_values
     *
     * @param \Cyclos\Api\Model\CustomFieldValue[] $custom_values The list of custom field values with a fixed value, as requested.
     *
     * @return $this
     */
    public function setCustomValues($custom_values)
    {
        $this->container['custom_values'] = $custom_values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
