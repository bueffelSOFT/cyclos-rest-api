<?php
/**
 * MobileBaseData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;

use \ArrayAccess;
use \Cyclos\Api\ObjectSerializer;

/**
 * MobileBaseData Class Doc Comment
 *
 * @category Class
 * @description Contains basic definitions for the data for UI results for the mobile
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MobileBaseData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MobileBaseData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cyclos_version' => 'string',
'current_client_time' => '\DateTime',
'locale' => 'string',
'allowed_locales' => '\Cyclos\Api\Model\UserLocale[]',
'root_url' => 'string',
'theme' => 'AllOfMobileBaseDataTheme',
'translations' => 'AllOfMobileBaseDataTranslations',
'max_image_width' => 'int',
'max_image_height' => 'int',
'max_upload_size' => 'int',
'jpeg_quality' => 'int',
'map_browser_api_key' => 'string',
'number_format' => '\Cyclos\Api\Model\NumberFormatEnum',
'date_format' => '\Cyclos\Api\Model\DateFormatEnum',
'time_format' => '\Cyclos\Api\Model\TimeFormatEnum'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cyclos_version' => null,
'current_client_time' => 'date-time',
'locale' => null,
'allowed_locales' => null,
'root_url' => null,
'theme' => null,
'translations' => null,
'max_image_width' => null,
'max_image_height' => null,
'max_upload_size' => null,
'jpeg_quality' => null,
'map_browser_api_key' => null,
'number_format' => null,
'date_format' => null,
'time_format' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cyclos_version' => 'cyclosVersion',
'current_client_time' => 'currentClientTime',
'locale' => 'locale',
'allowed_locales' => 'allowedLocales',
'root_url' => 'rootUrl',
'theme' => 'theme',
'translations' => 'translations',
'max_image_width' => 'maxImageWidth',
'max_image_height' => 'maxImageHeight',
'max_upload_size' => 'maxUploadSize',
'jpeg_quality' => 'jpegQuality',
'map_browser_api_key' => 'mapBrowserApiKey',
'number_format' => 'numberFormat',
'date_format' => 'dateFormat',
'time_format' => 'timeFormat'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cyclos_version' => 'setCyclosVersion',
'current_client_time' => 'setCurrentClientTime',
'locale' => 'setLocale',
'allowed_locales' => 'setAllowedLocales',
'root_url' => 'setRootUrl',
'theme' => 'setTheme',
'translations' => 'setTranslations',
'max_image_width' => 'setMaxImageWidth',
'max_image_height' => 'setMaxImageHeight',
'max_upload_size' => 'setMaxUploadSize',
'jpeg_quality' => 'setJpegQuality',
'map_browser_api_key' => 'setMapBrowserApiKey',
'number_format' => 'setNumberFormat',
'date_format' => 'setDateFormat',
'time_format' => 'setTimeFormat'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cyclos_version' => 'getCyclosVersion',
'current_client_time' => 'getCurrentClientTime',
'locale' => 'getLocale',
'allowed_locales' => 'getAllowedLocales',
'root_url' => 'getRootUrl',
'theme' => 'getTheme',
'translations' => 'getTranslations',
'max_image_width' => 'getMaxImageWidth',
'max_image_height' => 'getMaxImageHeight',
'max_upload_size' => 'getMaxUploadSize',
'jpeg_quality' => 'getJpegQuality',
'map_browser_api_key' => 'getMapBrowserApiKey',
'number_format' => 'getNumberFormat',
'date_format' => 'getDateFormat',
'time_format' => 'getTimeFormat'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cyclos_version'] = isset($data['cyclos_version']) ? $data['cyclos_version'] : null;
        $this->container['current_client_time'] = isset($data['current_client_time']) ? $data['current_client_time'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['allowed_locales'] = isset($data['allowed_locales']) ? $data['allowed_locales'] : null;
        $this->container['root_url'] = isset($data['root_url']) ? $data['root_url'] : null;
        $this->container['theme'] = isset($data['theme']) ? $data['theme'] : null;
        $this->container['translations'] = isset($data['translations']) ? $data['translations'] : null;
        $this->container['max_image_width'] = isset($data['max_image_width']) ? $data['max_image_width'] : null;
        $this->container['max_image_height'] = isset($data['max_image_height']) ? $data['max_image_height'] : null;
        $this->container['max_upload_size'] = isset($data['max_upload_size']) ? $data['max_upload_size'] : null;
        $this->container['jpeg_quality'] = isset($data['jpeg_quality']) ? $data['jpeg_quality'] : null;
        $this->container['map_browser_api_key'] = isset($data['map_browser_api_key']) ? $data['map_browser_api_key'] : null;
        $this->container['number_format'] = isset($data['number_format']) ? $data['number_format'] : null;
        $this->container['date_format'] = isset($data['date_format']) ? $data['date_format'] : null;
        $this->container['time_format'] = isset($data['time_format']) ? $data['time_format'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cyclos_version
     *
     * @return string
     */
    public function getCyclosVersion()
    {
        return $this->container['cyclos_version'];
    }

    /**
     * Sets cyclos_version
     *
     * @param string $cyclos_version The version of the Cyclos server
     *
     * @return $this
     */
    public function setCyclosVersion($cyclos_version)
    {
        $this->container['cyclos_version'] = $cyclos_version;

        return $this;
    }

    /**
     * Gets current_client_time
     *
     * @return \DateTime
     */
    public function getCurrentClientTime()
    {
        return $this->container['current_client_time'];
    }

    /**
     * Sets current_client_time
     *
     * @param \DateTime $current_client_time The current client time according to the server
     *
     * @return $this
     */
    public function setCurrentClientTime($current_client_time)
    {
        $this->container['current_client_time'] = $current_client_time;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale The current locale
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets allowed_locales
     *
     * @return \Cyclos\Api\Model\UserLocale[]
     */
    public function getAllowedLocales()
    {
        return $this->container['allowed_locales'];
    }

    /**
     * Sets allowed_locales
     *
     * @param \Cyclos\Api\Model\UserLocale[] $allowed_locales The locales the user can select for example to change the language.
     *
     * @return $this
     */
    public function setAllowedLocales($allowed_locales)
    {
        $this->container['allowed_locales'] = $allowed_locales;

        return $this;
    }

    /**
     * Gets root_url
     *
     * @return string
     */
    public function getRootUrl()
    {
        return $this->container['root_url'];
    }

    /**
     * Sets root_url
     *
     * @param string $root_url The main URL set in the configuration
     *
     * @return $this
     */
    public function setRootUrl($root_url)
    {
        $this->container['root_url'] = $root_url;

        return $this;
    }

    /**
     * Gets theme
     *
     * @return AllOfMobileBaseDataTheme
     */
    public function getTheme()
    {
        return $this->container['theme'];
    }

    /**
     * Sets theme
     *
     * @param AllOfMobileBaseDataTheme $theme The mobile theme. Only returned when changed.
     *
     * @return $this
     */
    public function setTheme($theme)
    {
        $this->container['theme'] = $theme;

        return $this;
    }

    /**
     * Gets translations
     *
     * @return AllOfMobileBaseDataTranslations
     */
    public function getTranslations()
    {
        return $this->container['translations'];
    }

    /**
     * Sets translations
     *
     * @param AllOfMobileBaseDataTranslations $translations The mobile translations. Only returned when changed.
     *
     * @return $this
     */
    public function setTranslations($translations)
    {
        $this->container['translations'] = $translations;

        return $this;
    }

    /**
     * Gets max_image_width
     *
     * @return int
     */
    public function getMaxImageWidth()
    {
        return $this->container['max_image_width'];
    }

    /**
     * Sets max_image_width
     *
     * @param int $max_image_width Maximum width (in pixels) for uploaded images
     *
     * @return $this
     */
    public function setMaxImageWidth($max_image_width)
    {
        $this->container['max_image_width'] = $max_image_width;

        return $this;
    }

    /**
     * Gets max_image_height
     *
     * @return int
     */
    public function getMaxImageHeight()
    {
        return $this->container['max_image_height'];
    }

    /**
     * Sets max_image_height
     *
     * @param int $max_image_height Maximum height (in pixels) for uploaded images
     *
     * @return $this
     */
    public function setMaxImageHeight($max_image_height)
    {
        $this->container['max_image_height'] = $max_image_height;

        return $this;
    }

    /**
     * Gets max_upload_size
     *
     * @return int
     */
    public function getMaxUploadSize()
    {
        return $this->container['max_upload_size'];
    }

    /**
     * Sets max_upload_size
     *
     * @param int $max_upload_size Maximum size (in bytes) for uploaded files
     *
     * @return $this
     */
    public function setMaxUploadSize($max_upload_size)
    {
        $this->container['max_upload_size'] = $max_upload_size;

        return $this;
    }

    /**
     * Gets jpeg_quality
     *
     * @return int
     */
    public function getJpegQuality()
    {
        return $this->container['jpeg_quality'];
    }

    /**
     * Sets jpeg_quality
     *
     * @param int $jpeg_quality Quality for JPEG image types (higher means better quality)
     *
     * @return $this
     */
    public function setJpegQuality($jpeg_quality)
    {
        $this->container['jpeg_quality'] = $jpeg_quality;

        return $this;
    }

    /**
     * Gets map_browser_api_key
     *
     * @return string
     */
    public function getMapBrowserApiKey()
    {
        return $this->container['map_browser_api_key'];
    }

    /**
     * Sets map_browser_api_key
     *
     * @param string $map_browser_api_key The Google Maps browser API key
     *
     * @return $this
     */
    public function setMapBrowserApiKey($map_browser_api_key)
    {
        $this->container['map_browser_api_key'] = $map_browser_api_key;

        return $this;
    }

    /**
     * Gets number_format
     *
     * @return \Cyclos\Api\Model\NumberFormatEnum
     */
    public function getNumberFormat()
    {
        return $this->container['number_format'];
    }

    /**
     * Sets number_format
     *
     * @param \Cyclos\Api\Model\NumberFormatEnum $number_format number_format
     *
     * @return $this
     */
    public function setNumberFormat($number_format)
    {
        $this->container['number_format'] = $number_format;

        return $this;
    }

    /**
     * Gets date_format
     *
     * @return \Cyclos\Api\Model\DateFormatEnum
     */
    public function getDateFormat()
    {
        return $this->container['date_format'];
    }

    /**
     * Sets date_format
     *
     * @param \Cyclos\Api\Model\DateFormatEnum $date_format date_format
     *
     * @return $this
     */
    public function setDateFormat($date_format)
    {
        $this->container['date_format'] = $date_format;

        return $this;
    }

    /**
     * Gets time_format
     *
     * @return \Cyclos\Api\Model\TimeFormatEnum
     */
    public function getTimeFormat()
    {
        return $this->container['time_format'];
    }

    /**
     * Sets time_format
     *
     * @param \Cyclos\Api\Model\TimeFormatEnum $time_format time_format
     *
     * @return $this
     */
    public function setTimeFormat($time_format)
    {
        $this->container['time_format'] = $time_format;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
