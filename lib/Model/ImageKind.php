<?php
/**
 * ImageKind
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;
use \Cyclos\Api\ObjectSerializer;

/**
 * ImageKind Class Doc Comment
 *
 * @category Class
 * @description Determines the kind of an image Possible values are: - &#x60;contactInfo&#x60;: An image of an additional contact information - &#x60;customFieldValue&#x60;: An image used as custom field value - &#x60;marketplace&#x60;: Advertisement images are associated with an advertisement, be it simple or for web shop. - &#x60;marketplaceCategory&#x60;: An image of an advertisement (simple or webshop) - &#x60;profile&#x60;: User profile images are those associated with the user profile. The first profile image is used to depict the user on search results. - &#x60;systemCustom&#x60;: System custom images are additional images an administrator that can be used on rich text contents. - &#x60;temp&#x60;: A temporary image which can upload for later associating with an entity being registered (for example, user or advertisement). - &#x60;userCustom&#x60;: User custom images are additional images that can be used on rich text contents. - &#x60;voucherType&#x60;: An image of a voucher type
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ImageKind
{
    /**
     * Possible values of this enum
     */
    const CONTACT_INFO = 'contactInfo';
const CUSTOM_FIELD_VALUE = 'customFieldValue';
const MARKETPLACE = 'marketplace';
const MARKETPLACE_CATEGORY = 'marketplaceCategory';
const PROFILE = 'profile';
const SYSTEM_CUSTOM = 'systemCustom';
const TEMP = 'temp';
const USER_CUSTOM = 'userCustom';
const VOUCHER_TYPE = 'voucherType';
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public static function getAllowableEnumValues()
    {
        return [
            self::CONTACT_INFO,
self::CUSTOM_FIELD_VALUE,
self::MARKETPLACE,
self::MARKETPLACE_CATEGORY,
self::PROFILE,
self::SYSTEM_CUSTOM,
self::TEMP,
self::USER_CUSTOM,
self::VOUCHER_TYPE,        ];
    }
}
