<?php
/**
 * BaseTransQueryFilters
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;
use \Cyclos\Api\ObjectSerializer;

/**
 * BaseTransQueryFilters Class Doc Comment
 *
 * @category Class
 * @description Base definitions for searching either transactions or transfers
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BaseTransQueryFilters extends QueryFilters 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BaseTransQueryFilters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'date_period' => '\DateTime[]',
'transfer_filters' => 'string[]',
'transfer_types' => 'string[]',
'transaction_number' => 'string',
'user' => 'string',
'groups' => 'string[]',
'by' => 'string',
'broker' => 'string',
'brokers' => 'string[]',
'channels' => 'string[]',
'excluded_ids' => 'string[]',
'access_clients' => 'string[]',
'include_generated_by_access_client' => 'bool',
'from_current_access_client' => 'bool',
'amount_range' => 'float[]',
'order_by' => '\Cyclos\Api\Model\TransOrderByEnum'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'date_period' => 'date-time',
'transfer_filters' => null,
'transfer_types' => null,
'transaction_number' => null,
'user' => null,
'groups' => null,
'by' => null,
'broker' => null,
'brokers' => null,
'channels' => null,
'excluded_ids' => null,
'access_clients' => null,
'include_generated_by_access_client' => null,
'from_current_access_client' => null,
'amount_range' => 'number',
'order_by' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date_period' => 'datePeriod',
'transfer_filters' => 'transferFilters',
'transfer_types' => 'transferTypes',
'transaction_number' => 'transactionNumber',
'user' => 'user',
'groups' => 'groups',
'by' => 'by',
'broker' => 'broker',
'brokers' => 'brokers',
'channels' => 'channels',
'excluded_ids' => 'excludedIds',
'access_clients' => 'accessClients',
'include_generated_by_access_client' => 'includeGeneratedByAccessClient',
'from_current_access_client' => 'fromCurrentAccessClient',
'amount_range' => 'amountRange',
'order_by' => 'orderBy'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date_period' => 'setDatePeriod',
'transfer_filters' => 'setTransferFilters',
'transfer_types' => 'setTransferTypes',
'transaction_number' => 'setTransactionNumber',
'user' => 'setUser',
'groups' => 'setGroups',
'by' => 'setBy',
'broker' => 'setBroker',
'brokers' => 'setBrokers',
'channels' => 'setChannels',
'excluded_ids' => 'setExcludedIds',
'access_clients' => 'setAccessClients',
'include_generated_by_access_client' => 'setIncludeGeneratedByAccessClient',
'from_current_access_client' => 'setFromCurrentAccessClient',
'amount_range' => 'setAmountRange',
'order_by' => 'setOrderBy'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date_period' => 'getDatePeriod',
'transfer_filters' => 'getTransferFilters',
'transfer_types' => 'getTransferTypes',
'transaction_number' => 'getTransactionNumber',
'user' => 'getUser',
'groups' => 'getGroups',
'by' => 'getBy',
'broker' => 'getBroker',
'brokers' => 'getBrokers',
'channels' => 'getChannels',
'excluded_ids' => 'getExcludedIds',
'access_clients' => 'getAccessClients',
'include_generated_by_access_client' => 'getIncludeGeneratedByAccessClient',
'from_current_access_client' => 'getFromCurrentAccessClient',
'amount_range' => 'getAmountRange',
'order_by' => 'getOrderBy'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['date_period'] = isset($data['date_period']) ? $data['date_period'] : null;
        $this->container['transfer_filters'] = isset($data['transfer_filters']) ? $data['transfer_filters'] : null;
        $this->container['transfer_types'] = isset($data['transfer_types']) ? $data['transfer_types'] : null;
        $this->container['transaction_number'] = isset($data['transaction_number']) ? $data['transaction_number'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['groups'] = isset($data['groups']) ? $data['groups'] : null;
        $this->container['by'] = isset($data['by']) ? $data['by'] : null;
        $this->container['broker'] = isset($data['broker']) ? $data['broker'] : null;
        $this->container['brokers'] = isset($data['brokers']) ? $data['brokers'] : null;
        $this->container['channels'] = isset($data['channels']) ? $data['channels'] : null;
        $this->container['excluded_ids'] = isset($data['excluded_ids']) ? $data['excluded_ids'] : null;
        $this->container['access_clients'] = isset($data['access_clients']) ? $data['access_clients'] : null;
        $this->container['include_generated_by_access_client'] = isset($data['include_generated_by_access_client']) ? $data['include_generated_by_access_client'] : null;
        $this->container['from_current_access_client'] = isset($data['from_current_access_client']) ? $data['from_current_access_client'] : null;
        $this->container['amount_range'] = isset($data['amount_range']) ? $data['amount_range'] : null;
        $this->container['order_by'] = isset($data['order_by']) ? $data['order_by'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date_period
     *
     * @return \DateTime[]
     */
    public function getDatePeriod()
    {
        return $this->container['date_period'];
    }

    /**
     * Sets date_period
     *
     * @param \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.
     *
     * @return $this
     */
    public function setDatePeriod($date_period)
    {
        $this->container['date_period'] = $date_period;

        return $this;
    }

    /**
     * Gets transfer_filters
     *
     * @return string[]
     */
    public function getTransferFilters()
    {
        return $this->container['transfer_filters'];
    }

    /**
     * Sets transfer_filters
     *
     * @param string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format `accountType.transferFilter`.
     *
     * @return $this
     */
    public function setTransferFilters($transfer_filters)
    {
        $this->container['transfer_filters'] = $transfer_filters;

        return $this;
    }

    /**
     * Gets transfer_types
     *
     * @return string[]
     */
    public function getTransferTypes()
    {
        return $this->container['transfer_types'];
    }

    /**
     * Sets transfer_types
     *
     * @param string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format `accountType.transferType`.
     *
     * @return $this
     */
    public function setTransferTypes($transfer_types)
    {
        $this->container['transfer_types'] = $transfer_types;

        return $this;
    }

    /**
     * Gets transaction_number
     *
     * @return string
     */
    public function getTransactionNumber()
    {
        return $this->container['transaction_number'];
    }

    /**
     * Sets transaction_number
     *
     * @param string $transaction_number The transaction number of the matching transfer
     *
     * @return $this
     */
    public function setTransactionNumber($transaction_number)
    {
        $this->container['transaction_number'] = $transaction_number;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string $user Reference a user that should have either received / performed the transfer.
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return string[]
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator.
     *
     * @return $this
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets by
     *
     * @return string
     */
    public function getBy()
    {
        return $this->container['by'];
    }

    /**
     * Sets by
     *
     * @param string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator.
     *
     * @return $this
     */
    public function setBy($by)
    {
        $this->container['by'] = $by;

        return $this;
    }

    /**
     * Gets broker
     *
     * @return string
     */
    public function getBroker()
    {
        return $this->container['broker'];
    }

    /**
     * Sets broker
     *
     * @param string $broker DEPRECATED: Use `brokers` instead.  Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator.
     *
     * @return $this
     */
    public function setBroker($broker)
    {
        $this->container['broker'] = $broker;

        return $this;
    }

    /**
     * Gets brokers
     *
     * @return string[]
     */
    public function getBrokers()
    {
        return $this->container['brokers'];
    }

    /**
     * Sets brokers
     *
     * @param string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator.
     *
     * @return $this
     */
    public function setBrokers($brokers)
    {
        $this->container['brokers'] = $brokers;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return string[]
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator.
     *
     * @return $this
     */
    public function setChannels($channels)
    {
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets excluded_ids
     *
     * @return string[]
     */
    public function getExcludedIds()
    {
        return $this->container['excluded_ids'];
    }

    /**
     * Sets excluded_ids
     *
     * @param string[] $excluded_ids List of transfers ids to be excluded from the result.
     *
     * @return $this
     */
    public function setExcludedIds($excluded_ids)
    {
        $this->container['excluded_ids'] = $excluded_ids;

        return $this;
    }

    /**
     * Gets access_clients
     *
     * @return string[]
     */
    public function getAccessClients()
    {
        return $this->container['access_clients'];
    }

    /**
     * Sets access_clients
     *
     * @param string[] $access_clients References to access clients (id or token) used to perform / receive the transfer.
     *
     * @return $this
     */
    public function setAccessClients($access_clients)
    {
        $this->container['access_clients'] = $access_clients;

        return $this;
    }

    /**
     * Gets include_generated_by_access_client
     *
     * @return bool
     */
    public function getIncludeGeneratedByAccessClient()
    {
        return $this->container['include_generated_by_access_client'];
    }

    /**
     * Sets include_generated_by_access_client
     *
     * @param bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a `ticket` or `paymentRequest` was processed then a new transfer will be generated.
     *
     * @return $this
     */
    public function setIncludeGeneratedByAccessClient($include_generated_by_access_client)
    {
        $this->container['include_generated_by_access_client'] = $include_generated_by_access_client;

        return $this;
    }

    /**
     * Gets from_current_access_client
     *
     * @return bool
     */
    public function getFromCurrentAccessClient()
    {
        return $this->container['from_current_access_client'];
    }

    /**
     * Sets from_current_access_client
     *
     * @param bool $from_current_access_client Flag indicating whether to include only transfers by the current access client.
     *
     * @return $this
     */
    public function setFromCurrentAccessClient($from_current_access_client)
    {
        $this->container['from_current_access_client'] = $from_current_access_client;

        return $this;
    }

    /**
     * Gets amount_range
     *
     * @return float[]
     */
    public function getAmountRange()
    {
        return $this->container['amount_range'];
    }

    /**
     * Sets amount_range
     *
     * @param float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.
     *
     * @return $this
     */
    public function setAmountRange($amount_range)
    {
        $this->container['amount_range'] = $amount_range;

        return $this;
    }

    /**
     * Gets order_by
     *
     * @return \Cyclos\Api\Model\TransOrderByEnum
     */
    public function getOrderBy()
    {
        return $this->container['order_by'];
    }

    /**
     * Sets order_by
     *
     * @param \Cyclos\Api\Model\TransOrderByEnum $order_by order_by
     *
     * @return $this
     */
    public function setOrderBy($order_by)
    {
        $this->container['order_by'] = $order_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
