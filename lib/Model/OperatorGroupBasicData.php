<?php
/**
 * OperatorGroupBasicData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;

use \ArrayAccess;
use \Cyclos\Api\ObjectSerializer;

/**
 * OperatorGroupBasicData Class Doc Comment
 *
 * @category Class
 * @description Contains data shared by both OperatorGroupDataForNew and OperatorGroupDataForEdit
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OperatorGroupBasicData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OperatorGroupBasicData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'user' => 'AllOfOperatorGroupBasicDataUser',
'can_chargeback_payments' => 'bool',
'can_receive_payments' => 'bool',
'can_request_payments' => 'bool',
'can_redeem_vouchers' => 'bool',
'can_view_advertisements' => 'bool',
'can_manage_advertisements' => 'bool',
'can_block_token' => 'bool',
'can_cancel_token' => 'bool',
'can_enable_token' => 'bool',
'can_unblock_token' => 'bool',
'broker' => 'bool',
'can_have_messages' => 'bool',
'can_have_notifications' => 'bool',
'operations' => '\Cyclos\Api\Model\Operation[]',
'record_types' => '\Cyclos\Api\Model\RecordType[]',
'account_types' => '\Cyclos\Api\Model\AccountType[]',
'payment_types' => '\Cyclos\Api\Model\TransferTypeWithCurrency[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'user' => null,
'can_chargeback_payments' => null,
'can_receive_payments' => null,
'can_request_payments' => null,
'can_redeem_vouchers' => null,
'can_view_advertisements' => null,
'can_manage_advertisements' => null,
'can_block_token' => null,
'can_cancel_token' => null,
'can_enable_token' => null,
'can_unblock_token' => null,
'broker' => null,
'can_have_messages' => null,
'can_have_notifications' => null,
'operations' => null,
'record_types' => null,
'account_types' => null,
'payment_types' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user' => 'user',
'can_chargeback_payments' => 'canChargebackPayments',
'can_receive_payments' => 'canReceivePayments',
'can_request_payments' => 'canRequestPayments',
'can_redeem_vouchers' => 'canRedeemVouchers',
'can_view_advertisements' => 'canViewAdvertisements',
'can_manage_advertisements' => 'canManageAdvertisements',
'can_block_token' => 'canBlockToken',
'can_cancel_token' => 'canCancelToken',
'can_enable_token' => 'canEnableToken',
'can_unblock_token' => 'canUnblockToken',
'broker' => 'broker',
'can_have_messages' => 'canHaveMessages',
'can_have_notifications' => 'canHaveNotifications',
'operations' => 'operations',
'record_types' => 'recordTypes',
'account_types' => 'accountTypes',
'payment_types' => 'paymentTypes'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user' => 'setUser',
'can_chargeback_payments' => 'setCanChargebackPayments',
'can_receive_payments' => 'setCanReceivePayments',
'can_request_payments' => 'setCanRequestPayments',
'can_redeem_vouchers' => 'setCanRedeemVouchers',
'can_view_advertisements' => 'setCanViewAdvertisements',
'can_manage_advertisements' => 'setCanManageAdvertisements',
'can_block_token' => 'setCanBlockToken',
'can_cancel_token' => 'setCanCancelToken',
'can_enable_token' => 'setCanEnableToken',
'can_unblock_token' => 'setCanUnblockToken',
'broker' => 'setBroker',
'can_have_messages' => 'setCanHaveMessages',
'can_have_notifications' => 'setCanHaveNotifications',
'operations' => 'setOperations',
'record_types' => 'setRecordTypes',
'account_types' => 'setAccountTypes',
'payment_types' => 'setPaymentTypes'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user' => 'getUser',
'can_chargeback_payments' => 'getCanChargebackPayments',
'can_receive_payments' => 'getCanReceivePayments',
'can_request_payments' => 'getCanRequestPayments',
'can_redeem_vouchers' => 'getCanRedeemVouchers',
'can_view_advertisements' => 'getCanViewAdvertisements',
'can_manage_advertisements' => 'getCanManageAdvertisements',
'can_block_token' => 'getCanBlockToken',
'can_cancel_token' => 'getCanCancelToken',
'can_enable_token' => 'getCanEnableToken',
'can_unblock_token' => 'getCanUnblockToken',
'broker' => 'getBroker',
'can_have_messages' => 'getCanHaveMessages',
'can_have_notifications' => 'getCanHaveNotifications',
'operations' => 'getOperations',
'record_types' => 'getRecordTypes',
'account_types' => 'getAccountTypes',
'payment_types' => 'getPaymentTypes'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['can_chargeback_payments'] = isset($data['can_chargeback_payments']) ? $data['can_chargeback_payments'] : null;
        $this->container['can_receive_payments'] = isset($data['can_receive_payments']) ? $data['can_receive_payments'] : null;
        $this->container['can_request_payments'] = isset($data['can_request_payments']) ? $data['can_request_payments'] : null;
        $this->container['can_redeem_vouchers'] = isset($data['can_redeem_vouchers']) ? $data['can_redeem_vouchers'] : null;
        $this->container['can_view_advertisements'] = isset($data['can_view_advertisements']) ? $data['can_view_advertisements'] : null;
        $this->container['can_manage_advertisements'] = isset($data['can_manage_advertisements']) ? $data['can_manage_advertisements'] : null;
        $this->container['can_block_token'] = isset($data['can_block_token']) ? $data['can_block_token'] : null;
        $this->container['can_cancel_token'] = isset($data['can_cancel_token']) ? $data['can_cancel_token'] : null;
        $this->container['can_enable_token'] = isset($data['can_enable_token']) ? $data['can_enable_token'] : null;
        $this->container['can_unblock_token'] = isset($data['can_unblock_token']) ? $data['can_unblock_token'] : null;
        $this->container['broker'] = isset($data['broker']) ? $data['broker'] : null;
        $this->container['can_have_messages'] = isset($data['can_have_messages']) ? $data['can_have_messages'] : null;
        $this->container['can_have_notifications'] = isset($data['can_have_notifications']) ? $data['can_have_notifications'] : null;
        $this->container['operations'] = isset($data['operations']) ? $data['operations'] : null;
        $this->container['record_types'] = isset($data['record_types']) ? $data['record_types'] : null;
        $this->container['account_types'] = isset($data['account_types']) ? $data['account_types'] : null;
        $this->container['payment_types'] = isset($data['payment_types']) ? $data['payment_types'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user
     *
     * @return AllOfOperatorGroupBasicDataUser
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param AllOfOperatorGroupBasicDataUser $user Details of the user that is the owner of the operator group
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets can_chargeback_payments
     *
     * @return bool
     */
    public function getCanChargebackPayments()
    {
        return $this->container['can_chargeback_payments'];
    }

    /**
     * Sets can_chargeback_payments
     *
     * @param bool $can_chargeback_payments Can the permission to chargeback payments be granted?
     *
     * @return $this
     */
    public function setCanChargebackPayments($can_chargeback_payments)
    {
        $this->container['can_chargeback_payments'] = $can_chargeback_payments;

        return $this;
    }

    /**
     * Gets can_receive_payments
     *
     * @return bool
     */
    public function getCanReceivePayments()
    {
        return $this->container['can_receive_payments'];
    }

    /**
     * Sets can_receive_payments
     *
     * @param bool $can_receive_payments Can the permission to receive payments be granted?
     *
     * @return $this
     */
    public function setCanReceivePayments($can_receive_payments)
    {
        $this->container['can_receive_payments'] = $can_receive_payments;

        return $this;
    }

    /**
     * Gets can_request_payments
     *
     * @return bool
     */
    public function getCanRequestPayments()
    {
        return $this->container['can_request_payments'];
    }

    /**
     * Sets can_request_payments
     *
     * @param bool $can_request_payments Can the permission to request payments be granted?
     *
     * @return $this
     */
    public function setCanRequestPayments($can_request_payments)
    {
        $this->container['can_request_payments'] = $can_request_payments;

        return $this;
    }

    /**
     * Gets can_redeem_vouchers
     *
     * @return bool
     */
    public function getCanRedeemVouchers()
    {
        return $this->container['can_redeem_vouchers'];
    }

    /**
     * Sets can_redeem_vouchers
     *
     * @param bool $can_redeem_vouchers Can the permission to redeem vouchers be granted?
     *
     * @return $this
     */
    public function setCanRedeemVouchers($can_redeem_vouchers)
    {
        $this->container['can_redeem_vouchers'] = $can_redeem_vouchers;

        return $this;
    }

    /**
     * Gets can_view_advertisements
     *
     * @return bool
     */
    public function getCanViewAdvertisements()
    {
        return $this->container['can_view_advertisements'];
    }

    /**
     * Sets can_view_advertisements
     *
     * @param bool $can_view_advertisements Can the permission to view advertisements be granted?
     *
     * @return $this
     */
    public function setCanViewAdvertisements($can_view_advertisements)
    {
        $this->container['can_view_advertisements'] = $can_view_advertisements;

        return $this;
    }

    /**
     * Gets can_manage_advertisements
     *
     * @return bool
     */
    public function getCanManageAdvertisements()
    {
        return $this->container['can_manage_advertisements'];
    }

    /**
     * Sets can_manage_advertisements
     *
     * @param bool $can_manage_advertisements Can the permission to manage advertisements be granted?
     *
     * @return $this
     */
    public function setCanManageAdvertisements($can_manage_advertisements)
    {
        $this->container['can_manage_advertisements'] = $can_manage_advertisements;

        return $this;
    }

    /**
     * Gets can_block_token
     *
     * @return bool
     */
    public function getCanBlockToken()
    {
        return $this->container['can_block_token'];
    }

    /**
     * Sets can_block_token
     *
     * @param bool $can_block_token Can the permission to block tokens (cards) be granted?
     *
     * @return $this
     */
    public function setCanBlockToken($can_block_token)
    {
        $this->container['can_block_token'] = $can_block_token;

        return $this;
    }

    /**
     * Gets can_cancel_token
     *
     * @return bool
     */
    public function getCanCancelToken()
    {
        return $this->container['can_cancel_token'];
    }

    /**
     * Sets can_cancel_token
     *
     * @param bool $can_cancel_token Can the permission to cancel tokens (cards) be granted?
     *
     * @return $this
     */
    public function setCanCancelToken($can_cancel_token)
    {
        $this->container['can_cancel_token'] = $can_cancel_token;

        return $this;
    }

    /**
     * Gets can_enable_token
     *
     * @return bool
     */
    public function getCanEnableToken()
    {
        return $this->container['can_enable_token'];
    }

    /**
     * Sets can_enable_token
     *
     * @param bool $can_enable_token Can the permission to enable tokens (cards) be granted?
     *
     * @return $this
     */
    public function setCanEnableToken($can_enable_token)
    {
        $this->container['can_enable_token'] = $can_enable_token;

        return $this;
    }

    /**
     * Gets can_unblock_token
     *
     * @return bool
     */
    public function getCanUnblockToken()
    {
        return $this->container['can_unblock_token'];
    }

    /**
     * Sets can_unblock_token
     *
     * @param bool $can_unblock_token Can the permission to unblock tokens (cards) be granted?
     *
     * @return $this
     */
    public function setCanUnblockToken($can_unblock_token)
    {
        $this->container['can_unblock_token'] = $can_unblock_token;

        return $this;
    }

    /**
     * Gets broker
     *
     * @return bool
     */
    public function getBroker()
    {
        return $this->container['broker'];
    }

    /**
     * Sets broker
     *
     * @param bool $broker Indicates whether the owner user is a broker. If so, can delegate brokering operations to operators.
     *
     * @return $this
     */
    public function setBroker($broker)
    {
        $this->container['broker'] = $broker;

        return $this;
    }

    /**
     * Gets can_have_messages
     *
     * @return bool
     */
    public function getCanHaveMessages()
    {
        return $this->container['can_have_messages'];
    }

    /**
     * Sets can_have_messages
     *
     * @param bool $can_have_messages Can the permission over messages be granted?
     *
     * @return $this
     */
    public function setCanHaveMessages($can_have_messages)
    {
        $this->container['can_have_messages'] = $can_have_messages;

        return $this;
    }

    /**
     * Gets can_have_notifications
     *
     * @return bool
     */
    public function getCanHaveNotifications()
    {
        return $this->container['can_have_notifications'];
    }

    /**
     * Sets can_have_notifications
     *
     * @param bool $can_have_notifications Can the permission over notificationsto be granted?
     *
     * @return $this
     */
    public function setCanHaveNotifications($can_have_notifications)
    {
        $this->container['can_have_notifications'] = $can_have_notifications;

        return $this;
    }

    /**
     * Gets operations
     *
     * @return \Cyclos\Api\Model\Operation[]
     */
    public function getOperations()
    {
        return $this->container['operations'];
    }

    /**
     * Sets operations
     *
     * @param \Cyclos\Api\Model\Operation[] $operations Custom operations that can be granted
     *
     * @return $this
     */
    public function setOperations($operations)
    {
        $this->container['operations'] = $operations;

        return $this;
    }

    /**
     * Gets record_types
     *
     * @return \Cyclos\Api\Model\RecordType[]
     */
    public function getRecordTypes()
    {
        return $this->container['record_types'];
    }

    /**
     * Sets record_types
     *
     * @param \Cyclos\Api\Model\RecordType[] $record_types Record types that can be granted
     *
     * @return $this
     */
    public function setRecordTypes($record_types)
    {
        $this->container['record_types'] = $record_types;

        return $this;
    }

    /**
     * Gets account_types
     *
     * @return \Cyclos\Api\Model\AccountType[]
     */
    public function getAccountTypes()
    {
        return $this->container['account_types'];
    }

    /**
     * Sets account_types
     *
     * @param \Cyclos\Api\Model\AccountType[] $account_types Account types details for the account settings
     *
     * @return $this
     */
    public function setAccountTypes($account_types)
    {
        $this->container['account_types'] = $account_types;

        return $this;
    }

    /**
     * Gets payment_types
     *
     * @return \Cyclos\Api\Model\TransferTypeWithCurrency[]
     */
    public function getPaymentTypes()
    {
        return $this->container['payment_types'];
    }

    /**
     * Sets payment_types
     *
     * @param \Cyclos\Api\Model\TransferTypeWithCurrency[] $payment_types Payment types details for the payment settings
     *
     * @return $this
     */
    public function setPaymentTypes($payment_types)
    {
        $this->container['payment_types'] = $payment_types;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
