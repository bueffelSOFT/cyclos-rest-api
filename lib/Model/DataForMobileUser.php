<?php
/**
 * DataForMobileUser
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;
use \Cyclos\Api\ObjectSerializer;

/**
 * DataForMobileUser Class Doc Comment
 *
 * @category Class
 * @description Contains definitions for the data for UI for users
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DataForMobileUser extends MobileBaseData 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForMobileUser';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'auto_complete_results' => 'int',
'hide_users_search_menu' => 'bool',
'auth' => '\Cyclos\Api\Model\Auth',
'name_of_user' => 'string',
'mobile_help' => '',
'pos_help' => '',
'pages' => '\Cyclos\Api\Model\MobilePage[]',
'operations' => '\Cyclos\Api\Model\Operation[]',
'can_receive_from_nfc_tag' => 'bool',
'can_activate_as_trusted_device' => 'bool',
'personalize_other_users' => 'bool',
'mobile_camera_on_payment' => 'bool',
'principals_allowing_qr_code' => '\Cyclos\Api\Model\Principal[]',
'scan_qr' => 'bool',
'enable_bluetooth_printer' => 'bool',
'shopping_cart_web_shop_count' => 'int',
'notifications_status' => '',
'allowed_operations' => '\Cyclos\Api\Model\MobileOperationEnum[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'auto_complete_results' => null,
'hide_users_search_menu' => null,
'auth' => null,
'name_of_user' => null,
'mobile_help' => null,
'pos_help' => null,
'pages' => null,
'operations' => null,
'can_receive_from_nfc_tag' => null,
'can_activate_as_trusted_device' => null,
'personalize_other_users' => null,
'mobile_camera_on_payment' => null,
'principals_allowing_qr_code' => null,
'scan_qr' => null,
'enable_bluetooth_printer' => null,
'shopping_cart_web_shop_count' => null,
'notifications_status' => null,
'allowed_operations' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_complete_results' => 'autoCompleteResults',
'hide_users_search_menu' => 'hideUsersSearchMenu',
'auth' => 'auth',
'name_of_user' => 'nameOfUser',
'mobile_help' => 'mobileHelp',
'pos_help' => 'posHelp',
'pages' => 'pages',
'operations' => 'operations',
'can_receive_from_nfc_tag' => 'canReceiveFromNfcTag',
'can_activate_as_trusted_device' => 'canActivateAsTrustedDevice',
'personalize_other_users' => 'personalizeOtherUsers',
'mobile_camera_on_payment' => 'mobileCameraOnPayment',
'principals_allowing_qr_code' => 'principalsAllowingQRCode',
'scan_qr' => 'scanQr',
'enable_bluetooth_printer' => 'enableBluetoothPrinter',
'shopping_cart_web_shop_count' => 'shoppingCartWebShopCount',
'notifications_status' => 'notificationsStatus',
'allowed_operations' => 'allowedOperations'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_complete_results' => 'setAutoCompleteResults',
'hide_users_search_menu' => 'setHideUsersSearchMenu',
'auth' => 'setAuth',
'name_of_user' => 'setNameOfUser',
'mobile_help' => 'setMobileHelp',
'pos_help' => 'setPosHelp',
'pages' => 'setPages',
'operations' => 'setOperations',
'can_receive_from_nfc_tag' => 'setCanReceiveFromNfcTag',
'can_activate_as_trusted_device' => 'setCanActivateAsTrustedDevice',
'personalize_other_users' => 'setPersonalizeOtherUsers',
'mobile_camera_on_payment' => 'setMobileCameraOnPayment',
'principals_allowing_qr_code' => 'setPrincipalsAllowingQrCode',
'scan_qr' => 'setScanQr',
'enable_bluetooth_printer' => 'setEnableBluetoothPrinter',
'shopping_cart_web_shop_count' => 'setShoppingCartWebShopCount',
'notifications_status' => 'setNotificationsStatus',
'allowed_operations' => 'setAllowedOperations'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_complete_results' => 'getAutoCompleteResults',
'hide_users_search_menu' => 'getHideUsersSearchMenu',
'auth' => 'getAuth',
'name_of_user' => 'getNameOfUser',
'mobile_help' => 'getMobileHelp',
'pos_help' => 'getPosHelp',
'pages' => 'getPages',
'operations' => 'getOperations',
'can_receive_from_nfc_tag' => 'getCanReceiveFromNfcTag',
'can_activate_as_trusted_device' => 'getCanActivateAsTrustedDevice',
'personalize_other_users' => 'getPersonalizeOtherUsers',
'mobile_camera_on_payment' => 'getMobileCameraOnPayment',
'principals_allowing_qr_code' => 'getPrincipalsAllowingQrCode',
'scan_qr' => 'getScanQr',
'enable_bluetooth_printer' => 'getEnableBluetoothPrinter',
'shopping_cart_web_shop_count' => 'getShoppingCartWebShopCount',
'notifications_status' => 'getNotificationsStatus',
'allowed_operations' => 'getAllowedOperations'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['auto_complete_results'] = isset($data['auto_complete_results']) ? $data['auto_complete_results'] : null;
        $this->container['hide_users_search_menu'] = isset($data['hide_users_search_menu']) ? $data['hide_users_search_menu'] : null;
        $this->container['auth'] = isset($data['auth']) ? $data['auth'] : null;
        $this->container['name_of_user'] = isset($data['name_of_user']) ? $data['name_of_user'] : null;
        $this->container['mobile_help'] = isset($data['mobile_help']) ? $data['mobile_help'] : null;
        $this->container['pos_help'] = isset($data['pos_help']) ? $data['pos_help'] : null;
        $this->container['pages'] = isset($data['pages']) ? $data['pages'] : null;
        $this->container['operations'] = isset($data['operations']) ? $data['operations'] : null;
        $this->container['can_receive_from_nfc_tag'] = isset($data['can_receive_from_nfc_tag']) ? $data['can_receive_from_nfc_tag'] : null;
        $this->container['can_activate_as_trusted_device'] = isset($data['can_activate_as_trusted_device']) ? $data['can_activate_as_trusted_device'] : null;
        $this->container['personalize_other_users'] = isset($data['personalize_other_users']) ? $data['personalize_other_users'] : null;
        $this->container['mobile_camera_on_payment'] = isset($data['mobile_camera_on_payment']) ? $data['mobile_camera_on_payment'] : null;
        $this->container['principals_allowing_qr_code'] = isset($data['principals_allowing_qr_code']) ? $data['principals_allowing_qr_code'] : null;
        $this->container['scan_qr'] = isset($data['scan_qr']) ? $data['scan_qr'] : null;
        $this->container['enable_bluetooth_printer'] = isset($data['enable_bluetooth_printer']) ? $data['enable_bluetooth_printer'] : null;
        $this->container['shopping_cart_web_shop_count'] = isset($data['shopping_cart_web_shop_count']) ? $data['shopping_cart_web_shop_count'] : null;
        $this->container['notifications_status'] = isset($data['notifications_status']) ? $data['notifications_status'] : null;
        $this->container['allowed_operations'] = isset($data['allowed_operations']) ? $data['allowed_operations'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto_complete_results
     *
     * @return int
     */
    public function getAutoCompleteResults()
    {
        return $this->container['auto_complete_results'];
    }

    /**
     * Sets auto_complete_results
     *
     * @param int $auto_complete_results Number of search results for user autocomplete component
     *
     * @return $this
     */
    public function setAutoCompleteResults($auto_complete_results)
    {
        $this->container['auto_complete_results'] = $auto_complete_results;

        return $this;
    }

    /**
     * Gets hide_users_search_menu
     *
     * @return bool
     */
    public function getHideUsersSearchMenu()
    {
        return $this->container['hide_users_search_menu'];
    }

    /**
     * Sets hide_users_search_menu
     *
     * @param bool $hide_users_search_menu Indicates if the user search menu should be hidden.
     *
     * @return $this
     */
    public function setHideUsersSearchMenu($hide_users_search_menu)
    {
        $this->container['hide_users_search_menu'] = $hide_users_search_menu;

        return $this;
    }

    /**
     * Gets auth
     *
     * @return \Cyclos\Api\Model\Auth
     */
    public function getAuth()
    {
        return $this->container['auth'];
    }

    /**
     * Sets auth
     *
     * @param \Cyclos\Api\Model\Auth $auth auth
     *
     * @return $this
     */
    public function setAuth($auth)
    {
        $this->container['auth'] = $auth;

        return $this;
    }

    /**
     * Gets name_of_user
     *
     * @return string
     */
    public function getNameOfUser()
    {
        return $this->container['name_of_user'];
    }

    /**
     * Sets name_of_user
     *
     * @param string $name_of_user The name of the current user (if any)
     *
     * @return $this
     */
    public function setNameOfUser($name_of_user)
    {
        $this->container['name_of_user'] = $name_of_user;

        return $this;
    }

    /**
     * Gets mobile_help
     *
     * @return 
     */
    public function getMobileHelp()
    {
        return $this->container['mobile_help'];
    }

    /**
     * Sets mobile_help
     *
     * @param  $mobile_help The help content for mobile mode
     *
     * @return $this
     */
    public function setMobileHelp($mobile_help)
    {
        $this->container['mobile_help'] = $mobile_help;

        return $this;
    }

    /**
     * Gets pos_help
     *
     * @return 
     */
    public function getPosHelp()
    {
        return $this->container['pos_help'];
    }

    /**
     * Sets pos_help
     *
     * @param  $pos_help The help content for mobile mode
     *
     * @return $this
     */
    public function setPosHelp($pos_help)
    {
        $this->container['pos_help'] = $pos_help;

        return $this;
    }

    /**
     * Gets pages
     *
     * @return \Cyclos\Api\Model\MobilePage[]
     */
    public function getPages()
    {
        return $this->container['pages'];
    }

    /**
     * Sets pages
     *
     * @param \Cyclos\Api\Model\MobilePage[] $pages The visible mobile pages
     *
     * @return $this
     */
    public function setPages($pages)
    {
        $this->container['pages'] = $pages;

        return $this;
    }

    /**
     * Gets operations
     *
     * @return \Cyclos\Api\Model\Operation[]
     */
    public function getOperations()
    {
        return $this->container['operations'];
    }

    /**
     * Sets operations
     *
     * @param \Cyclos\Api\Model\Operation[] $operations The custom operations the user can run
     *
     * @return $this
     */
    public function setOperations($operations)
    {
        $this->container['operations'] = $operations;

        return $this;
    }

    /**
     * Gets can_receive_from_nfc_tag
     *
     * @return bool
     */
    public function getCanReceiveFromNfcTag()
    {
        return $this->container['can_receive_from_nfc_tag'];
    }

    /**
     * Sets can_receive_from_nfc_tag
     *
     * @param bool $can_receive_from_nfc_tag Indicates whether there is at least one NFC tag the user can use to receive payments
     *
     * @return $this
     */
    public function setCanReceiveFromNfcTag($can_receive_from_nfc_tag)
    {
        $this->container['can_receive_from_nfc_tag'] = $can_receive_from_nfc_tag;

        return $this;
    }

    /**
     * Gets can_activate_as_trusted_device
     *
     * @return bool
     */
    public function getCanActivateAsTrustedDevice()
    {
        return $this->container['can_activate_as_trusted_device'];
    }

    /**
     * Sets can_activate_as_trusted_device
     *
     * @param bool $can_activate_as_trusted_device Indicates whether there is an allowed medium to activate the device as trusted
     *
     * @return $this
     */
    public function setCanActivateAsTrustedDevice($can_activate_as_trusted_device)
    {
        $this->container['can_activate_as_trusted_device'] = $can_activate_as_trusted_device;

        return $this;
    }

    /**
     * Gets personalize_other_users
     *
     * @return bool
     */
    public function getPersonalizeOtherUsers()
    {
        return $this->container['personalize_other_users'];
    }

    /**
     * Sets personalize_other_users
     *
     * @param bool $personalize_other_users Indicates if the current user can personalize NFC tags for other users (as member)
     *
     * @return $this
     */
    public function setPersonalizeOtherUsers($personalize_other_users)
    {
        $this->container['personalize_other_users'] = $personalize_other_users;

        return $this;
    }

    /**
     * Gets mobile_camera_on_payment
     *
     * @return bool
     */
    public function getMobileCameraOnPayment()
    {
        return $this->container['mobile_camera_on_payment'];
    }

    /**
     * Sets mobile_camera_on_payment
     *
     * @param bool $mobile_camera_on_payment Indicates whether the scan QR code option should be displayed for payments
     *
     * @return $this
     */
    public function setMobileCameraOnPayment($mobile_camera_on_payment)
    {
        $this->container['mobile_camera_on_payment'] = $mobile_camera_on_payment;

        return $this;
    }

    /**
     * Gets principals_allowing_qr_code
     *
     * @return \Cyclos\Api\Model\Principal[]
     */
    public function getPrincipalsAllowingQrCode()
    {
        return $this->container['principals_allowing_qr_code'];
    }

    /**
     * Sets principals_allowing_qr_code
     *
     * @param \Cyclos\Api\Model\Principal[] $principals_allowing_qr_code Indicates the possible principals which are allowed to be used in QR code generation
     *
     * @return $this
     */
    public function setPrincipalsAllowingQrCode($principals_allowing_qr_code)
    {
        $this->container['principals_allowing_qr_code'] = $principals_allowing_qr_code;

        return $this;
    }

    /**
     * Gets scan_qr
     *
     * @return bool
     */
    public function getScanQr()
    {
        return $this->container['scan_qr'];
    }

    /**
     * Sets scan_qr
     *
     * @param bool $scan_qr Indicates whether the scan QR code option (global) should be displayed by checking if the user can approve a ticket, or has a QR/Barcode for make payments, or has an easy invoice channel enabled
     *
     * @return $this
     */
    public function setScanQr($scan_qr)
    {
        $this->container['scan_qr'] = $scan_qr;

        return $this;
    }

    /**
     * Gets enable_bluetooth_printer
     *
     * @return bool
     */
    public function getEnableBluetoothPrinter()
    {
        return $this->container['enable_bluetooth_printer'];
    }

    /**
     * Sets enable_bluetooth_printer
     *
     * @param bool $enable_bluetooth_printer Whether the bluetooth printer is enabled or not
     *
     * @return $this
     */
    public function setEnableBluetoothPrinter($enable_bluetooth_printer)
    {
        $this->container['enable_bluetooth_printer'] = $enable_bluetooth_printer;

        return $this;
    }

    /**
     * Gets shopping_cart_web_shop_count
     *
     * @return int
     */
    public function getShoppingCartWebShopCount()
    {
        return $this->container['shopping_cart_web_shop_count'];
    }

    /**
     * Sets shopping_cart_web_shop_count
     *
     * @param int $shopping_cart_web_shop_count The total number of webshop ads present in the shopping cart
     *
     * @return $this
     */
    public function setShoppingCartWebShopCount($shopping_cart_web_shop_count)
    {
        $this->container['shopping_cart_web_shop_count'] = $shopping_cart_web_shop_count;

        return $this;
    }

    /**
     * Gets notifications_status
     *
     * @return 
     */
    public function getNotificationsStatus()
    {
        return $this->container['notifications_status'];
    }

    /**
     * Sets notifications_status
     *
     * @param  $notifications_status Status of user notifications, like new received or unread notifications
     *
     * @return $this
     */
    public function setNotificationsStatus($notifications_status)
    {
        $this->container['notifications_status'] = $notifications_status;

        return $this;
    }

    /**
     * Gets allowed_operations
     *
     * @return \Cyclos\Api\Model\MobileOperationEnum[]
     */
    public function getAllowedOperations()
    {
        return $this->container['allowed_operations'];
    }

    /**
     * Sets allowed_operations
     *
     * @param \Cyclos\Api\Model\MobileOperationEnum[] $allowed_operations allowed_operations
     *
     * @return $this
     */
    public function setAllowedOperations($allowed_operations)
    {
        $this->container['allowed_operations'] = $allowed_operations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
