<?php
/**
 * BaseAuth
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;

use \ArrayAccess;
use \Cyclos\Api\ObjectSerializer;

/**
 * BaseAuth Class Doc Comment
 *
 * @category Class
 * @description Contains relevant information for the authenticated user and his granted permissions.
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BaseAuth implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BaseAuth';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'user' => 'AllOfBaseAuthUser',
'language' => 'AllOfBaseAuthLanguage',
'global' => 'bool',
'system_administrator' => 'bool',
'alias_operator' => 'bool',
'permissions' => 'AllOfBaseAuthPermissions',
'session_token' => 'string',
'trusted_session' => 'bool',
'access_client' => 'AllOfBaseAuthAccessClient',
'principal_type' => 'AllOfBaseAuthPrincipalType',
'principal' => 'string',
'password_type' => 'AllOfBaseAuthPasswordType',
'secondary_password_type' => 'AllOfBaseAuthSecondaryPasswordType',
'expired_password' => 'bool',
'pending_agreements' => 'bool',
'expired_secondary_password' => 'bool',
'pending_secondary_password' => 'bool',
'allow_pin' => 'bool',
'role' => 'AllOfBaseAuthRole'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'user' => null,
'language' => null,
'global' => null,
'system_administrator' => null,
'alias_operator' => null,
'permissions' => null,
'session_token' => null,
'trusted_session' => null,
'access_client' => null,
'principal_type' => null,
'principal' => null,
'password_type' => null,
'secondary_password_type' => null,
'expired_password' => null,
'pending_agreements' => null,
'expired_secondary_password' => null,
'pending_secondary_password' => null,
'allow_pin' => null,
'role' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user' => 'user',
'language' => 'language',
'global' => 'global',
'system_administrator' => 'systemAdministrator',
'alias_operator' => 'aliasOperator',
'permissions' => 'permissions',
'session_token' => 'sessionToken',
'trusted_session' => 'trustedSession',
'access_client' => 'accessClient',
'principal_type' => 'principalType',
'principal' => 'principal',
'password_type' => 'passwordType',
'secondary_password_type' => 'secondaryPasswordType',
'expired_password' => 'expiredPassword',
'pending_agreements' => 'pendingAgreements',
'expired_secondary_password' => 'expiredSecondaryPassword',
'pending_secondary_password' => 'pendingSecondaryPassword',
'allow_pin' => 'allowPin',
'role' => 'role'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user' => 'setUser',
'language' => 'setLanguage',
'global' => 'setGlobal',
'system_administrator' => 'setSystemAdministrator',
'alias_operator' => 'setAliasOperator',
'permissions' => 'setPermissions',
'session_token' => 'setSessionToken',
'trusted_session' => 'setTrustedSession',
'access_client' => 'setAccessClient',
'principal_type' => 'setPrincipalType',
'principal' => 'setPrincipal',
'password_type' => 'setPasswordType',
'secondary_password_type' => 'setSecondaryPasswordType',
'expired_password' => 'setExpiredPassword',
'pending_agreements' => 'setPendingAgreements',
'expired_secondary_password' => 'setExpiredSecondaryPassword',
'pending_secondary_password' => 'setPendingSecondaryPassword',
'allow_pin' => 'setAllowPin',
'role' => 'setRole'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user' => 'getUser',
'language' => 'getLanguage',
'global' => 'getGlobal',
'system_administrator' => 'getSystemAdministrator',
'alias_operator' => 'getAliasOperator',
'permissions' => 'getPermissions',
'session_token' => 'getSessionToken',
'trusted_session' => 'getTrustedSession',
'access_client' => 'getAccessClient',
'principal_type' => 'getPrincipalType',
'principal' => 'getPrincipal',
'password_type' => 'getPasswordType',
'secondary_password_type' => 'getSecondaryPasswordType',
'expired_password' => 'getExpiredPassword',
'pending_agreements' => 'getPendingAgreements',
'expired_secondary_password' => 'getExpiredSecondaryPassword',
'pending_secondary_password' => 'getPendingSecondaryPassword',
'allow_pin' => 'getAllowPin',
'role' => 'getRole'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['global'] = isset($data['global']) ? $data['global'] : null;
        $this->container['system_administrator'] = isset($data['system_administrator']) ? $data['system_administrator'] : null;
        $this->container['alias_operator'] = isset($data['alias_operator']) ? $data['alias_operator'] : null;
        $this->container['permissions'] = isset($data['permissions']) ? $data['permissions'] : null;
        $this->container['session_token'] = isset($data['session_token']) ? $data['session_token'] : null;
        $this->container['trusted_session'] = isset($data['trusted_session']) ? $data['trusted_session'] : null;
        $this->container['access_client'] = isset($data['access_client']) ? $data['access_client'] : null;
        $this->container['principal_type'] = isset($data['principal_type']) ? $data['principal_type'] : null;
        $this->container['principal'] = isset($data['principal']) ? $data['principal'] : null;
        $this->container['password_type'] = isset($data['password_type']) ? $data['password_type'] : null;
        $this->container['secondary_password_type'] = isset($data['secondary_password_type']) ? $data['secondary_password_type'] : null;
        $this->container['expired_password'] = isset($data['expired_password']) ? $data['expired_password'] : null;
        $this->container['pending_agreements'] = isset($data['pending_agreements']) ? $data['pending_agreements'] : null;
        $this->container['expired_secondary_password'] = isset($data['expired_secondary_password']) ? $data['expired_secondary_password'] : null;
        $this->container['pending_secondary_password'] = isset($data['pending_secondary_password']) ? $data['pending_secondary_password'] : null;
        $this->container['allow_pin'] = isset($data['allow_pin']) ? $data['allow_pin'] : null;
        $this->container['role'] = isset($data['role']) ? $data['role'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user
     *
     * @return AllOfBaseAuthUser
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param AllOfBaseAuthUser $user The authenticated user, if any.
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets language
     *
     * @return AllOfBaseAuthLanguage
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param AllOfBaseAuthLanguage $language The current language version
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets global
     *
     * @return bool
     */
    public function getGlobal()
    {
        return $this->container['global'];
    }

    /**
     * Sets global
     *
     * @param bool $global Indicates whether this user belongs to global mode. Only returned if there is an authenticated user.
     *
     * @return $this
     */
    public function setGlobal($global)
    {
        $this->container['global'] = $global;

        return $this;
    }

    /**
     * Gets system_administrator
     *
     * @return bool
     */
    public function getSystemAdministrator()
    {
        return $this->container['system_administrator'];
    }

    /**
     * Sets system_administrator
     *
     * @param bool $system_administrator Indicates whether this user is a system administrator, that is, either belongs to the global system administrators group or to the network system administrators group. Only returned if `role` is `administrator`.
     *
     * @return $this
     */
    public function setSystemAdministrator($system_administrator)
    {
        $this->container['system_administrator'] = $system_administrator;

        return $this;
    }

    /**
     * Gets alias_operator
     *
     * @return bool
     */
    public function getAliasOperator()
    {
        return $this->container['alias_operator'];
    }

    /**
     * Sets alias_operator
     *
     * @param bool $alias_operator Indicates whether this user is an operator which is an alias of his owner member, that is, has all member permissions, and is not restricted to an operator group. Only returned if `role` is `operator`.
     *
     * @return $this
     */
    public function setAliasOperator($alias_operator)
    {
        $this->container['alias_operator'] = $alias_operator;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return AllOfBaseAuthPermissions
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param AllOfBaseAuthPermissions $permissions The granted permissions for the authenticated user or guest
     *
     * @return $this
     */
    public function setPermissions($permissions)
    {
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets session_token
     *
     * @return string
     */
    public function getSessionToken()
    {
        return $this->container['session_token'];
    }

    /**
     * Sets session_token
     *
     * @param string $session_token A token that must be passed in on the Session-Token header on subsequent requests instead of the login name and password. Only returned if using a session authentication.
     *
     * @return $this
     */
    public function setSessionToken($session_token)
    {
        $this->container['session_token'] = $session_token;

        return $this;
    }

    /**
     * Gets trusted_session
     *
     * @return bool
     */
    public function getTrustedSession()
    {
        return $this->container['trusted_session'];
    }

    /**
     * Sets trusted_session
     *
     * @param bool $trusted_session Whether the current session is a trusted one or not. If trusted then no confirmation password (if any) will be required for subsequent requests in the same session. Only returned if using a session authentication.
     *
     * @return $this
     */
    public function setTrustedSession($trusted_session)
    {
        $this->container['trusted_session'] = $trusted_session;

        return $this;
    }

    /**
     * Gets access_client
     *
     * @return AllOfBaseAuthAccessClient
     */
    public function getAccessClient()
    {
        return $this->container['access_client'];
    }

    /**
     * Sets access_client
     *
     * @param AllOfBaseAuthAccessClient $access_client Only returned when authenticated as access client, contains information about it
     *
     * @return $this
     */
    public function setAccessClient($access_client)
    {
        $this->container['access_client'] = $access_client;

        return $this;
    }

    /**
     * Gets principal_type
     *
     * @return AllOfBaseAuthPrincipalType
     */
    public function getPrincipalType()
    {
        return $this->container['principal_type'];
    }

    /**
     * Sets principal_type
     *
     * @param AllOfBaseAuthPrincipalType $principal_type Returns a reference to the principal type used for authentication. May be some of the built-in types (login name, e-mail, mobile phone or account number), a profile field, a token type or an access client type
     *
     * @return $this
     */
    public function setPrincipalType($principal_type)
    {
        $this->container['principal_type'] = $principal_type;

        return $this;
    }

    /**
     * Gets principal
     *
     * @return string
     */
    public function getPrincipal()
    {
        return $this->container['principal'];
    }

    /**
     * Sets principal
     *
     * @param string $principal The principal (user identification) used on authentication. Can be the value of the login name, e-mail, account number, custom field or token used on authentication or at the moment of login. Is not returned when the authentication was performed via access client.
     *
     * @return $this
     */
    public function setPrincipal($principal)
    {
        $this->container['principal'] = $principal;

        return $this;
    }

    /**
     * Gets password_type
     *
     * @return AllOfBaseAuthPasswordType
     */
    public function getPasswordType()
    {
        return $this->container['password_type'];
    }

    /**
     * Sets password_type
     *
     * @param AllOfBaseAuthPasswordType $password_type Returns a reference to the password type used on this channel.
     *
     * @return $this
     */
    public function setPasswordType($password_type)
    {
        $this->container['password_type'] = $password_type;

        return $this;
    }

    /**
     * Gets secondary_password_type
     *
     * @return AllOfBaseAuthSecondaryPasswordType
     */
    public function getSecondaryPasswordType()
    {
        return $this->container['secondary_password_type'];
    }

    /**
     * Sets secondary_password_type
     *
     * @param AllOfBaseAuthSecondaryPasswordType $secondary_password_type Returns a reference to the login confirmation password type used on this channel, if any.
     *
     * @return $this
     */
    public function setSecondaryPasswordType($secondary_password_type)
    {
        $this->container['secondary_password_type'] = $secondary_password_type;

        return $this;
    }

    /**
     * Gets expired_password
     *
     * @return bool
     */
    public function getExpiredPassword()
    {
        return $this->container['expired_password'];
    }

    /**
     * Sets expired_password
     *
     * @param bool $expired_password Returns whether the current access password is expired. If so, the user will have to change the password, or all other actions will be denied.
     *
     * @return $this
     */
    public function setExpiredPassword($expired_password)
    {
        $this->container['expired_password'] = $expired_password;

        return $this;
    }

    /**
     * Gets pending_agreements
     *
     * @return bool
     */
    public function getPendingAgreements()
    {
        return $this->container['pending_agreements'];
    }

    /**
     * Sets pending_agreements
     *
     * @param bool $pending_agreements Returns whether the current user has some agreements pending accept. If so, a call to `GET /agreements/pending` should be performed to get the content of the pending agreements, and then a `POST /agreements/pending{id_or_internal_name}` to accept each agreement.
     *
     * @return $this
     */
    public function setPendingAgreements($pending_agreements)
    {
        $this->container['pending_agreements'] = $pending_agreements;

        return $this;
    }

    /**
     * Gets expired_secondary_password
     *
     * @return bool
     */
    public function getExpiredSecondaryPassword()
    {
        return $this->container['expired_secondary_password'];
    }

    /**
     * Sets expired_secondary_password
     *
     * @param bool $expired_secondary_password Returns whether the current secondary access password is expired. If so, the user will have to change the password, or all other actions will be denied.
     *
     * @return $this
     */
    public function setExpiredSecondaryPassword($expired_secondary_password)
    {
        $this->container['expired_secondary_password'] = $expired_secondary_password;

        return $this;
    }

    /**
     * Gets pending_secondary_password
     *
     * @return bool
     */
    public function getPendingSecondaryPassword()
    {
        return $this->container['pending_secondary_password'];
    }

    /**
     * Sets pending_secondary_password
     *
     * @param bool $pending_secondary_password Returns whether the current session requires a secondary password. If so, the user will have to validate it using its secondary access password, otherwise, all other actions will be denied.
     *
     * @return $this
     */
    public function setPendingSecondaryPassword($pending_secondary_password)
    {
        $this->container['pending_secondary_password'] = $pending_secondary_password;

        return $this;
    }

    /**
     * Gets allow_pin
     *
     * @return bool
     */
    public function getAllowPin()
    {
        return $this->container['allow_pin'];
    }

    /**
     * Sets allow_pin
     *
     * @param bool $allow_pin Returns whether the configuration for the current channel has device PIN enabled.
     *
     * @return $this
     */
    public function setAllowPin($allow_pin)
    {
        $this->container['allow_pin'] = $allow_pin;

        return $this;
    }

    /**
     * Gets role
     *
     * @return AllOfBaseAuthRole
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param AllOfBaseAuthRole $role The main user role. Only returned if there is an authenticated user.
     *
     * @return $this
     */
    public function setRole($role)
    {
        $this->container['role'] = $role;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
