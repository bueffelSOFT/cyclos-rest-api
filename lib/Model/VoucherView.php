<?php
/**
 * VoucherView
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;
use \Cyclos\Api\ObjectSerializer;

/**
 * VoucherView Class Doc Comment
 *
 * @category Class
 * @description Details of a voucher
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VoucherView extends VoucherResult 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VoucherView';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'title' => 'string',
'description' => 'string',
'buy' => '',
'redeem_date' => '\DateTime',
'redeem' => '',
'can_cancel' => 'bool',
'can_change_expiration_date' => 'bool',
'show_configuration' => 'bool',
'show_qr_code' => 'bool',
'redeem_after_date_reached' => 'bool',
'creation_type' => '\Cyclos\Api\Model\VoucherCreationTypeEnum',
'cancel_action' => '\Cyclos\Api\Model\VoucherCancelActionEnum',
'refund' => '',
'confirmation_password_input' => ''    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'title' => null,
'description' => null,
'buy' => null,
'redeem_date' => 'date-time',
'redeem' => null,
'can_cancel' => null,
'can_change_expiration_date' => null,
'show_configuration' => null,
'show_qr_code' => null,
'redeem_after_date_reached' => null,
'creation_type' => null,
'cancel_action' => null,
'refund' => null,
'confirmation_password_input' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'title',
'description' => 'description',
'buy' => 'buy',
'redeem_date' => 'redeemDate',
'redeem' => 'redeem',
'can_cancel' => 'canCancel',
'can_change_expiration_date' => 'canChangeExpirationDate',
'show_configuration' => 'showConfiguration',
'show_qr_code' => 'showQrCode',
'redeem_after_date_reached' => 'redeemAfterDateReached',
'creation_type' => 'creationType',
'cancel_action' => 'cancelAction',
'refund' => 'refund',
'confirmation_password_input' => 'confirmationPasswordInput'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
'description' => 'setDescription',
'buy' => 'setBuy',
'redeem_date' => 'setRedeemDate',
'redeem' => 'setRedeem',
'can_cancel' => 'setCanCancel',
'can_change_expiration_date' => 'setCanChangeExpirationDate',
'show_configuration' => 'setShowConfiguration',
'show_qr_code' => 'setShowQrCode',
'redeem_after_date_reached' => 'setRedeemAfterDateReached',
'creation_type' => 'setCreationType',
'cancel_action' => 'setCancelAction',
'refund' => 'setRefund',
'confirmation_password_input' => 'setConfirmationPasswordInput'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
'description' => 'getDescription',
'buy' => 'getBuy',
'redeem_date' => 'getRedeemDate',
'redeem' => 'getRedeem',
'can_cancel' => 'getCanCancel',
'can_change_expiration_date' => 'getCanChangeExpirationDate',
'show_configuration' => 'getShowConfiguration',
'show_qr_code' => 'getShowQrCode',
'redeem_after_date_reached' => 'getRedeemAfterDateReached',
'creation_type' => 'getCreationType',
'cancel_action' => 'getCancelAction',
'refund' => 'getRefund',
'confirmation_password_input' => 'getConfirmationPasswordInput'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['buy'] = isset($data['buy']) ? $data['buy'] : null;
        $this->container['redeem_date'] = isset($data['redeem_date']) ? $data['redeem_date'] : null;
        $this->container['redeem'] = isset($data['redeem']) ? $data['redeem'] : null;
        $this->container['can_cancel'] = isset($data['can_cancel']) ? $data['can_cancel'] : null;
        $this->container['can_change_expiration_date'] = isset($data['can_change_expiration_date']) ? $data['can_change_expiration_date'] : null;
        $this->container['show_configuration'] = isset($data['show_configuration']) ? $data['show_configuration'] : null;
        $this->container['show_qr_code'] = isset($data['show_qr_code']) ? $data['show_qr_code'] : null;
        $this->container['redeem_after_date_reached'] = isset($data['redeem_after_date_reached']) ? $data['redeem_after_date_reached'] : null;
        $this->container['creation_type'] = isset($data['creation_type']) ? $data['creation_type'] : null;
        $this->container['cancel_action'] = isset($data['cancel_action']) ? $data['cancel_action'] : null;
        $this->container['refund'] = isset($data['refund']) ? $data['refund'] : null;
        $this->container['confirmation_password_input'] = isset($data['confirmation_password_input']) ? $data['confirmation_password_input'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The voucher title when it was created.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The voucher description when it was created.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets buy
     *
     * @return 
     */
    public function getBuy()
    {
        return $this->container['buy'];
    }

    /**
     * Sets buy
     *
     * @param  $buy The transaction which bought this voucher, if any and visible.
     *
     * @return $this
     */
    public function setBuy($buy)
    {
        $this->container['buy'] = $buy;

        return $this;
    }

    /**
     * Gets redeem_date
     *
     * @return \DateTime
     */
    public function getRedeemDate()
    {
        return $this->container['redeem_date'];
    }

    /**
     * Sets redeem_date
     *
     * @param \DateTime $redeem_date The date the voucher was redeemer, if any.
     *
     * @return $this
     */
    public function setRedeemDate($redeem_date)
    {
        $this->container['redeem_date'] = $redeem_date;

        return $this;
    }

    /**
     * Gets redeem
     *
     * @return 
     */
    public function getRedeem()
    {
        return $this->container['redeem'];
    }

    /**
     * Sets redeem
     *
     * @param  $redeem The transaction which redeemed this voucher, if any and visible.
     *
     * @return $this
     */
    public function setRedeem($redeem)
    {
        $this->container['redeem'] = $redeem;

        return $this;
    }

    /**
     * Gets can_cancel
     *
     * @return bool
     */
    public function getCanCancel()
    {
        return $this->container['can_cancel'];
    }

    /**
     * Sets can_cancel
     *
     * @param bool $can_cancel This is redundant with `cancelAction`, is `false` if `cancelAction` is `null`, and `true` if `cancelAction` is not `null`.   Can the authenticated user cancel this voucher?
     *
     * @return $this
     */
    public function setCanCancel($can_cancel)
    {
        $this->container['can_cancel'] = $can_cancel;

        return $this;
    }

    /**
     * Gets can_change_expiration_date
     *
     * @return bool
     */
    public function getCanChangeExpirationDate()
    {
        return $this->container['can_change_expiration_date'];
    }

    /**
     * Sets can_change_expiration_date
     *
     * @param bool $can_change_expiration_date Can the authenticated user change this voucher's expiration date?
     *
     * @return $this
     */
    public function setCanChangeExpirationDate($can_change_expiration_date)
    {
        $this->container['can_change_expiration_date'] = $can_change_expiration_date;

        return $this;
    }

    /**
     * Gets show_configuration
     *
     * @return bool
     */
    public function getShowConfiguration()
    {
        return $this->container['show_configuration'];
    }

    /**
     * Sets show_configuration
     *
     * @param bool $show_configuration Should the voucher configuration be shown to users? This flag is `true` when there are multiple available configurations.
     *
     * @return $this
     */
    public function setShowConfiguration($show_configuration)
    {
        $this->container['show_configuration'] = $show_configuration;

        return $this;
    }

    /**
     * Gets show_qr_code
     *
     * @return bool
     */
    public function getShowQrCode()
    {
        return $this->container['show_qr_code'];
    }

    /**
     * Sets show_qr_code
     *
     * @param bool $show_qr_code Should the voucher token be shown as QR-code for users?
     *
     * @return $this
     */
    public function setShowQrCode($show_qr_code)
    {
        $this->container['show_qr_code'] = $show_qr_code;

        return $this;
    }

    /**
     * Gets redeem_after_date_reached
     *
     * @return bool
     */
    public function getRedeemAfterDateReached()
    {
        return $this->container['redeem_after_date_reached'];
    }

    /**
     * Sets redeem_after_date_reached
     *
     * @param bool $redeem_after_date_reached Should the voucher be available to be redeemed?
     *
     * @return $this
     */
    public function setRedeemAfterDateReached($redeem_after_date_reached)
    {
        $this->container['redeem_after_date_reached'] = $redeem_after_date_reached;

        return $this;
    }

    /**
     * Gets creation_type
     *
     * @return \Cyclos\Api\Model\VoucherCreationTypeEnum
     */
    public function getCreationType()
    {
        return $this->container['creation_type'];
    }

    /**
     * Sets creation_type
     *
     * @param \Cyclos\Api\Model\VoucherCreationTypeEnum $creation_type creation_type
     *
     * @return $this
     */
    public function setCreationType($creation_type)
    {
        $this->container['creation_type'] = $creation_type;

        return $this;
    }

    /**
     * Gets cancel_action
     *
     * @return \Cyclos\Api\Model\VoucherCancelActionEnum
     */
    public function getCancelAction()
    {
        return $this->container['cancel_action'];
    }

    /**
     * Sets cancel_action
     *
     * @param \Cyclos\Api\Model\VoucherCancelActionEnum $cancel_action cancel_action
     *
     * @return $this
     */
    public function setCancelAction($cancel_action)
    {
        $this->container['cancel_action'] = $cancel_action;

        return $this;
    }

    /**
     * Gets refund
     *
     * @return 
     */
    public function getRefund()
    {
        return $this->container['refund'];
    }

    /**
     * Sets refund
     *
     * @param  $refund The transaction which refunds this voucher, if any and visible.
     *
     * @return $this
     */
    public function setRefund($refund)
    {
        $this->container['refund'] = $refund;

        return $this;
    }

    /**
     * Gets confirmation_password_input
     *
     * @return 
     */
    public function getConfirmationPasswordInput()
    {
        return $this->container['confirmation_password_input'];
    }

    /**
     * Sets confirmation_password_input
     *
     * @param  $confirmation_password_input If a confirmation password is used, contains the definitions on how to request that password from the user. This confirmation password is required when performing sensible actions. Sometimes this is dynamic, for example, the confirmation might be configured to be used only once per session, or operations like payments may have a limit per day to be without confirmation (pinless).
     *
     * @return $this
     */
    public function setConfirmationPasswordInput($confirmation_password_input)
    {
        $this->container['confirmation_password_input'] = $confirmation_password_input;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
