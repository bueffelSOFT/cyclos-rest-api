<?php
/**
 * DataForTransaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;

use \ArrayAccess;
use \Cyclos\Api\ObjectSerializer;

/**
 * DataForTransaction Class Doc Comment
 *
 * @category Class
 * @description Contains basic configuration data used when performing a transaction. The path that returns it will normally receive the main transaction owner (system or user), plus 2 other optional parameters: - The other subject (system or user) that will either receive or perform   the payment. - The payment type. There are 3 possibilities when returning: - When the other subject wasn&#x27;t selected. In this case, will contain very   few information, mostly the accounts. - The other subject is selected, but not a payment type. If so, the   payment types will be returned, but not information on how to pick   the subject user, or the accounts. - Both other subject and payment type are selected: In this case   only the payment type data will be returned
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DataForTransaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataForTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accounts' => '\Cyclos\Api\Model\AccountWithStatus[]',
'from_kind' => 'AllOfDataForTransactionFromKind',
'from_user' => 'AllOfDataForTransactionFromUser',
'to_kind' => 'AllOfDataForTransactionToKind',
'to_user' => 'AllOfDataForTransactionToUser',
'payment_type_data' => 'AllOfDataForTransactionPaymentTypeData',
'payment_types' => '\Cyclos\Api\Model\TransferTypeWithCurrency[]',
'allow_autocomplete' => 'bool',
'allow_contacts' => 'bool',
'allowed_users' => '\Cyclos\Api\Model\User[]',
'principal_types' => '\Cyclos\Api\Model\PrincipalTypeInput[]',
'default_principal_type' => 'string',
'default_id_method' => 'AllOfDataForTransactionDefaultIdMethod'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accounts' => null,
'from_kind' => null,
'from_user' => null,
'to_kind' => null,
'to_user' => null,
'payment_type_data' => null,
'payment_types' => null,
'allow_autocomplete' => null,
'allow_contacts' => null,
'allowed_users' => null,
'principal_types' => null,
'default_principal_type' => null,
'default_id_method' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accounts' => 'accounts',
'from_kind' => 'fromKind',
'from_user' => 'fromUser',
'to_kind' => 'toKind',
'to_user' => 'toUser',
'payment_type_data' => 'paymentTypeData',
'payment_types' => 'paymentTypes',
'allow_autocomplete' => 'allowAutocomplete',
'allow_contacts' => 'allowContacts',
'allowed_users' => 'allowedUsers',
'principal_types' => 'principalTypes',
'default_principal_type' => 'defaultPrincipalType',
'default_id_method' => 'defaultIdMethod'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accounts' => 'setAccounts',
'from_kind' => 'setFromKind',
'from_user' => 'setFromUser',
'to_kind' => 'setToKind',
'to_user' => 'setToUser',
'payment_type_data' => 'setPaymentTypeData',
'payment_types' => 'setPaymentTypes',
'allow_autocomplete' => 'setAllowAutocomplete',
'allow_contacts' => 'setAllowContacts',
'allowed_users' => 'setAllowedUsers',
'principal_types' => 'setPrincipalTypes',
'default_principal_type' => 'setDefaultPrincipalType',
'default_id_method' => 'setDefaultIdMethod'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accounts' => 'getAccounts',
'from_kind' => 'getFromKind',
'from_user' => 'getFromUser',
'to_kind' => 'getToKind',
'to_user' => 'getToUser',
'payment_type_data' => 'getPaymentTypeData',
'payment_types' => 'getPaymentTypes',
'allow_autocomplete' => 'getAllowAutocomplete',
'allow_contacts' => 'getAllowContacts',
'allowed_users' => 'getAllowedUsers',
'principal_types' => 'getPrincipalTypes',
'default_principal_type' => 'getDefaultPrincipalType',
'default_id_method' => 'getDefaultIdMethod'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accounts'] = isset($data['accounts']) ? $data['accounts'] : null;
        $this->container['from_kind'] = isset($data['from_kind']) ? $data['from_kind'] : null;
        $this->container['from_user'] = isset($data['from_user']) ? $data['from_user'] : null;
        $this->container['to_kind'] = isset($data['to_kind']) ? $data['to_kind'] : null;
        $this->container['to_user'] = isset($data['to_user']) ? $data['to_user'] : null;
        $this->container['payment_type_data'] = isset($data['payment_type_data']) ? $data['payment_type_data'] : null;
        $this->container['payment_types'] = isset($data['payment_types']) ? $data['payment_types'] : null;
        $this->container['allow_autocomplete'] = isset($data['allow_autocomplete']) ? $data['allow_autocomplete'] : null;
        $this->container['allow_contacts'] = isset($data['allow_contacts']) ? $data['allow_contacts'] : null;
        $this->container['allowed_users'] = isset($data['allowed_users']) ? $data['allowed_users'] : null;
        $this->container['principal_types'] = isset($data['principal_types']) ? $data['principal_types'] : null;
        $this->container['default_principal_type'] = isset($data['default_principal_type']) ? $data['default_principal_type'] : null;
        $this->container['default_id_method'] = isset($data['default_id_method']) ? $data['default_id_method'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accounts
     *
     * @return \Cyclos\Api\Model\AccountWithStatus[]
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     *
     * @param \Cyclos\Api\Model\AccountWithStatus[] $accounts Only returned when the payment type is not selected. Contains the possible accounts which can be used either as source (when performing the payment) or destination (when receiving the payment, on POS).
     *
     * @return $this
     */
    public function setAccounts($accounts)
    {
        $this->container['accounts'] = $accounts;

        return $this;
    }

    /**
     * Gets from_kind
     *
     * @return AllOfDataForTransactionFromKind
     */
    public function getFromKind()
    {
        return $this->container['from_kind'];
    }

    /**
     * Sets from_kind
     *
     * @param AllOfDataForTransactionFromKind $from_kind Indicates the account kind that will perform the payment
     *
     * @return $this
     */
    public function setFromKind($from_kind)
    {
        $this->container['from_kind'] = $from_kind;

        return $this;
    }

    /**
     * Gets from_user
     *
     * @return AllOfDataForTransactionFromUser
     */
    public function getFromUser()
    {
        return $this->container['from_user'];
    }

    /**
     * Sets from_user
     *
     * @param AllOfDataForTransactionFromUser $from_user Only returned if `fromKind` is `user`. Is the payer user.
     *
     * @return $this
     */
    public function setFromUser($from_user)
    {
        $this->container['from_user'] = $from_user;

        return $this;
    }

    /**
     * Gets to_kind
     *
     * @return AllOfDataForTransactionToKind
     */
    public function getToKind()
    {
        return $this->container['to_kind'];
    }

    /**
     * Sets to_kind
     *
     * @param AllOfDataForTransactionToKind $to_kind Indicates the account kind that will receive the payment
     *
     * @return $this
     */
    public function setToKind($to_kind)
    {
        $this->container['to_kind'] = $to_kind;

        return $this;
    }

    /**
     * Gets to_user
     *
     * @return AllOfDataForTransactionToUser
     */
    public function getToUser()
    {
        return $this->container['to_user'];
    }

    /**
     * Sets to_user
     *
     * @param AllOfDataForTransactionToUser $to_user Only returned if `toKind` is `user`. Is the payee user.
     *
     * @return $this
     */
    public function setToUser($to_user)
    {
        $this->container['to_user'] = $to_user;

        return $this;
    }

    /**
     * Gets payment_type_data
     *
     * @return AllOfDataForTransactionPaymentTypeData
     */
    public function getPaymentTypeData()
    {
        return $this->container['payment_type_data'];
    }

    /**
     * Sets payment_type_data
     *
     * @param AllOfDataForTransactionPaymentTypeData $payment_type_data Contains the detailed data for the selected (or first) payment type
     *
     * @return $this
     */
    public function setPaymentTypeData($payment_type_data)
    {
        $this->container['payment_type_data'] = $payment_type_data;

        return $this;
    }

    /**
     * Gets payment_types
     *
     * @return \Cyclos\Api\Model\TransferTypeWithCurrency[]
     */
    public function getPaymentTypes()
    {
        return $this->container['payment_types'];
    }

    /**
     * Sets payment_types
     *
     * @param \Cyclos\Api\Model\TransferTypeWithCurrency[] $payment_types Only returned when the payment type is not selected. Contains the allowed payment types for a payment between the selected from and to owners.
     *
     * @return $this
     */
    public function setPaymentTypes($payment_types)
    {
        $this->container['payment_types'] = $payment_types;

        return $this;
    }

    /**
     * Gets allow_autocomplete
     *
     * @return bool
     */
    public function getAllowAutocomplete()
    {
        return $this->container['allow_autocomplete'];
    }

    /**
     * Sets allow_autocomplete
     *
     * @param bool $allow_autocomplete Only returned when no subject is selected. Indicates whether the payee can be obtaining by freely searching users
     *
     * @return $this
     */
    public function setAllowAutocomplete($allow_autocomplete)
    {
        $this->container['allow_autocomplete'] = $allow_autocomplete;

        return $this;
    }

    /**
     * Gets allow_contacts
     *
     * @return bool
     */
    public function getAllowContacts()
    {
        return $this->container['allow_contacts'];
    }

    /**
     * Sets allow_contacts
     *
     * @param bool $allow_contacts Only returned when no subject is selected. Indicates whether the payee can be obtaining from the contact list
     *
     * @return $this
     */
    public function setAllowContacts($allow_contacts)
    {
        $this->container['allow_contacts'] = $allow_contacts;

        return $this;
    }

    /**
     * Gets allowed_users
     *
     * @return \Cyclos\Api\Model\User[]
     */
    public function getAllowedUsers()
    {
        return $this->container['allowed_users'];
    }

    /**
     * Sets allowed_users
     *
     * @param \Cyclos\Api\Model\User[] $allowed_users If the authorized user is a restricted operator, it may be that the owner user has defined exactly to which users the operator can pay. If this is the case, this will be the list with such users.
     *
     * @return $this
     */
    public function setAllowedUsers($allowed_users)
    {
        $this->container['allowed_users'] = $allowed_users;

        return $this;
    }

    /**
     * Gets principal_types
     *
     * @return \Cyclos\Api\Model\PrincipalTypeInput[]
     */
    public function getPrincipalTypes()
    {
        return $this->container['principal_types'];
    }

    /**
     * Sets principal_types
     *
     * @param \Cyclos\Api\Model\PrincipalTypeInput[] $principal_types Only returned when no subject is selected. The possible principal types that can be used to locate the payee
     *
     * @return $this
     */
    public function setPrincipalTypes($principal_types)
    {
        $this->container['principal_types'] = $principal_types;

        return $this;
    }

    /**
     * Gets default_principal_type
     *
     * @return string
     */
    public function getDefaultPrincipalType()
    {
        return $this->container['default_principal_type'];
    }

    /**
     * Sets default_principal_type
     *
     * @param string $default_principal_type Only returned when no subject is selected. If the `defaultIdMethod` is `principalType`, contains the internal name or id of the principal type that should be the default. If there is a default, the user should be provided with the option to choose which principal type he's using. If there is no default, all possible principal types will be attempted. In this case, the UI will normally not show the option for which principal type should be used.
     *
     * @return $this
     */
    public function setDefaultPrincipalType($default_principal_type)
    {
        $this->container['default_principal_type'] = $default_principal_type;

        return $this;
    }

    /**
     * Gets default_id_method
     *
     * @return AllOfDataForTransactionDefaultIdMethod
     */
    public function getDefaultIdMethod()
    {
        return $this->container['default_id_method'];
    }

    /**
     * Sets default_id_method
     *
     * @param AllOfDataForTransactionDefaultIdMethod $default_id_method Only returned when no subject is selected. The default option for the identification method when performing a payment.
     *
     * @return $this
     */
    public function setDefaultIdMethod($default_id_method)
    {
        $this->container['default_id_method'] = $default_id_method;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
