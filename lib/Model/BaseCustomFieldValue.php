<?php
/**
 * BaseCustomFieldValue
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;
use \Cyclos\Api\ObjectSerializer;

/**
 * BaseCustomFieldValue Class Doc Comment
 *
 * @category Class
 * @description Holds detailed information about a custom field value. The actual value should be read from a property depending on the field type:   - If the type is either &#x60;string&#x60;,   &#x60;text&#x60;,   &#x60;richText&#x60; or   &#x60;url&#x60;, the property is on &#x60;stringValue&#x60;;   - If the type is &#x60;integer&#x60;, the property is   &#x60;integerValue&#x60;; - If the type is &#x60;decimal&#x60;,   the property is &#x60;decimalValue&#x60;;   - If the type is &#x60;date&#x60;, the property is   &#x60;dateValue&#x60;; - If the type is &#x60;boolean&#x60;, the property is &#x60;booleanValue&#x60;;  - If the type is either &#x60;singleSelection&#x60; or   &#x60;multiSelection&#x60;, the property is   &#x60;possibleValues&#x60;;   - If the type is &#x60;dynamicSelection&#x60;, the   property is &#x60;dynamicValue&#x60;;   - If the type is &#x60;file&#x60;, the property is   &#x60;fileValues&#x60;;   - If the type is &#x60;image&#x60;, the property is   &#x60;imageValues&#x60;;   - Finally, if the type is &#x60;linkedEntity&#x60;, it   depends on the value of the field&#x27;s &#x60;linkedEntityType&#x60;:     - If the entity type is &#x60;user&#x60;, the property     is &#x60;userValue&#x60;;     - If the entity type is &#x60;record&#x60;, the     property is &#x60;recordValue&#x60;;     - If the entity type is &#x60;transaction&#x60;, the     property is &#x60;transactionValue&#x60;;     - If the entity type is &#x60;transfer&#x60;, the     property is &#x60;transferValue&#x60;;     - If the entity type is &#x60;advertisement&#x60;, the     property is &#x60;adValue&#x60;.
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BaseCustomFieldValue extends Entity 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BaseCustomFieldValue';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'string_value' => 'string',
'date_value' => '\DateTime',
'boolean_value' => 'bool',
'integer_value' => 'int',
'decimal_value' => 'float',
'enumerated_values' => '\Cyclos\Api\Model\CustomFieldPossibleValue[]',
'dynamic_value' => '',
'file_values' => '\Cyclos\Api\Model\StoredFile[]',
'image_values' => '\Cyclos\Api\Model\Image[]',
'linked_entity_value' => '',
'ad_value' => '',
'transaction_value' => '',
'transfer_value' => '',
'record_value' => '',
'user_value' => ''    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'string_value' => null,
'date_value' => 'date-time',
'boolean_value' => null,
'integer_value' => null,
'decimal_value' => 'number',
'enumerated_values' => null,
'dynamic_value' => null,
'file_values' => null,
'image_values' => null,
'linked_entity_value' => null,
'ad_value' => null,
'transaction_value' => null,
'transfer_value' => null,
'record_value' => null,
'user_value' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'string_value' => 'stringValue',
'date_value' => 'dateValue',
'boolean_value' => 'booleanValue',
'integer_value' => 'integerValue',
'decimal_value' => 'decimalValue',
'enumerated_values' => 'enumeratedValues',
'dynamic_value' => 'dynamicValue',
'file_values' => 'fileValues',
'image_values' => 'imageValues',
'linked_entity_value' => 'linkedEntityValue',
'ad_value' => 'adValue',
'transaction_value' => 'transactionValue',
'transfer_value' => 'transferValue',
'record_value' => 'recordValue',
'user_value' => 'userValue'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'string_value' => 'setStringValue',
'date_value' => 'setDateValue',
'boolean_value' => 'setBooleanValue',
'integer_value' => 'setIntegerValue',
'decimal_value' => 'setDecimalValue',
'enumerated_values' => 'setEnumeratedValues',
'dynamic_value' => 'setDynamicValue',
'file_values' => 'setFileValues',
'image_values' => 'setImageValues',
'linked_entity_value' => 'setLinkedEntityValue',
'ad_value' => 'setAdValue',
'transaction_value' => 'setTransactionValue',
'transfer_value' => 'setTransferValue',
'record_value' => 'setRecordValue',
'user_value' => 'setUserValue'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'string_value' => 'getStringValue',
'date_value' => 'getDateValue',
'boolean_value' => 'getBooleanValue',
'integer_value' => 'getIntegerValue',
'decimal_value' => 'getDecimalValue',
'enumerated_values' => 'getEnumeratedValues',
'dynamic_value' => 'getDynamicValue',
'file_values' => 'getFileValues',
'image_values' => 'getImageValues',
'linked_entity_value' => 'getLinkedEntityValue',
'ad_value' => 'getAdValue',
'transaction_value' => 'getTransactionValue',
'transfer_value' => 'getTransferValue',
'record_value' => 'getRecordValue',
'user_value' => 'getUserValue'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['string_value'] = isset($data['string_value']) ? $data['string_value'] : null;
        $this->container['date_value'] = isset($data['date_value']) ? $data['date_value'] : null;
        $this->container['boolean_value'] = isset($data['boolean_value']) ? $data['boolean_value'] : null;
        $this->container['integer_value'] = isset($data['integer_value']) ? $data['integer_value'] : null;
        $this->container['decimal_value'] = isset($data['decimal_value']) ? $data['decimal_value'] : null;
        $this->container['enumerated_values'] = isset($data['enumerated_values']) ? $data['enumerated_values'] : null;
        $this->container['dynamic_value'] = isset($data['dynamic_value']) ? $data['dynamic_value'] : null;
        $this->container['file_values'] = isset($data['file_values']) ? $data['file_values'] : null;
        $this->container['image_values'] = isset($data['image_values']) ? $data['image_values'] : null;
        $this->container['linked_entity_value'] = isset($data['linked_entity_value']) ? $data['linked_entity_value'] : null;
        $this->container['ad_value'] = isset($data['ad_value']) ? $data['ad_value'] : null;
        $this->container['transaction_value'] = isset($data['transaction_value']) ? $data['transaction_value'] : null;
        $this->container['transfer_value'] = isset($data['transfer_value']) ? $data['transfer_value'] : null;
        $this->container['record_value'] = isset($data['record_value']) ? $data['record_value'] : null;
        $this->container['user_value'] = isset($data['user_value']) ? $data['user_value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets string_value
     *
     * @return string
     */
    public function getStringValue()
    {
        return $this->container['string_value'];
    }

    /**
     * Sets string_value
     *
     * @param string $string_value The field value if the field type is either `string`, `text`, `richText` or `url`.
     *
     * @return $this
     */
    public function setStringValue($string_value)
    {
        $this->container['string_value'] = $string_value;

        return $this;
    }

    /**
     * Gets date_value
     *
     * @return \DateTime
     */
    public function getDateValue()
    {
        return $this->container['date_value'];
    }

    /**
     * Sets date_value
     *
     * @param \DateTime $date_value The field value if the field type is `date`.
     *
     * @return $this
     */
    public function setDateValue($date_value)
    {
        $this->container['date_value'] = $date_value;

        return $this;
    }

    /**
     * Gets boolean_value
     *
     * @return bool
     */
    public function getBooleanValue()
    {
        return $this->container['boolean_value'];
    }

    /**
     * Sets boolean_value
     *
     * @param bool $boolean_value The field value if the field type is `boolean`.
     *
     * @return $this
     */
    public function setBooleanValue($boolean_value)
    {
        $this->container['boolean_value'] = $boolean_value;

        return $this;
    }

    /**
     * Gets integer_value
     *
     * @return int
     */
    public function getIntegerValue()
    {
        return $this->container['integer_value'];
    }

    /**
     * Sets integer_value
     *
     * @param int $integer_value The field value if the field type is `integer`.
     *
     * @return $this
     */
    public function setIntegerValue($integer_value)
    {
        $this->container['integer_value'] = $integer_value;

        return $this;
    }

    /**
     * Gets decimal_value
     *
     * @return float
     */
    public function getDecimalValue()
    {
        return $this->container['decimal_value'];
    }

    /**
     * Sets decimal_value
     *
     * @param float $decimal_value The field value if the field type is `decimal`.
     *
     * @return $this
     */
    public function setDecimalValue($decimal_value)
    {
        $this->container['decimal_value'] = $decimal_value;

        return $this;
    }

    /**
     * Gets enumerated_values
     *
     * @return \Cyclos\Api\Model\CustomFieldPossibleValue[]
     */
    public function getEnumeratedValues()
    {
        return $this->container['enumerated_values'];
    }

    /**
     * Sets enumerated_values
     *
     * @param \Cyclos\Api\Model\CustomFieldPossibleValue[] $enumerated_values The field value if the field type is either `singleSelection` or `multiSelection`. For single selections will either be an empty array or an array with a single element
     *
     * @return $this
     */
    public function setEnumeratedValues($enumerated_values)
    {
        $this->container['enumerated_values'] = $enumerated_values;

        return $this;
    }

    /**
     * Gets dynamic_value
     *
     * @return 
     */
    public function getDynamicValue()
    {
        return $this->container['dynamic_value'];
    }

    /**
     * Sets dynamic_value
     *
     * @param  $dynamic_value The field value if the field type is `dynamicSelection`.
     *
     * @return $this
     */
    public function setDynamicValue($dynamic_value)
    {
        $this->container['dynamic_value'] = $dynamic_value;

        return $this;
    }

    /**
     * Gets file_values
     *
     * @return \Cyclos\Api\Model\StoredFile[]
     */
    public function getFileValues()
    {
        return $this->container['file_values'];
    }

    /**
     * Sets file_values
     *
     * @param \Cyclos\Api\Model\StoredFile[] $file_values The field value if the field type is `file`
     *
     * @return $this
     */
    public function setFileValues($file_values)
    {
        $this->container['file_values'] = $file_values;

        return $this;
    }

    /**
     * Gets image_values
     *
     * @return \Cyclos\Api\Model\Image[]
     */
    public function getImageValues()
    {
        return $this->container['image_values'];
    }

    /**
     * Sets image_values
     *
     * @param \Cyclos\Api\Model\Image[] $image_values The field value if the field type is `image`
     *
     * @return $this
     */
    public function setImageValues($image_values)
    {
        $this->container['image_values'] = $image_values;

        return $this;
    }

    /**
     * Gets linked_entity_value
     *
     * @return 
     */
    public function getLinkedEntityValue()
    {
        return $this->container['linked_entity_value'];
    }

    /**
     * Sets linked_entity_value
     *
     * @param  $linked_entity_value Use one of the specific fields: - `userValue`: If the entity type is `user` - `recordValue`: If the entity type is `record` - `transactionValue`: If the entity type is `transaction` - `transferValue`: If the entity type is `transfer` - `adValue`: If the entity type is `advertisement`   The field value if the field type is `linkedEntity`.
     *
     * @return $this
     */
    public function setLinkedEntityValue($linked_entity_value)
    {
        $this->container['linked_entity_value'] = $linked_entity_value;

        return $this;
    }

    /**
     * Gets ad_value
     *
     * @return 
     */
    public function getAdValue()
    {
        return $this->container['ad_value'];
    }

    /**
     * Sets ad_value
     *
     * @param  $ad_value The field value if the field type is `linkedEntity` and the linked entity type is `advertisement`. If the currently set record is not accessible by the logged user, only the `name` field is sent, which contains the advertisement title.
     *
     * @return $this
     */
    public function setAdValue($ad_value)
    {
        $this->container['ad_value'] = $ad_value;

        return $this;
    }

    /**
     * Gets transaction_value
     *
     * @return 
     */
    public function getTransactionValue()
    {
        return $this->container['transaction_value'];
    }

    /**
     * Sets transaction_value
     *
     * @param  $transaction_value The field value if the field type is `linkedEntity` and the linked entity type is `transaction`. If the currently set transaction is not accessible by the logged user, only the `display` field is sent.
     *
     * @return $this
     */
    public function setTransactionValue($transaction_value)
    {
        $this->container['transaction_value'] = $transaction_value;

        return $this;
    }

    /**
     * Gets transfer_value
     *
     * @return 
     */
    public function getTransferValue()
    {
        return $this->container['transfer_value'];
    }

    /**
     * Sets transfer_value
     *
     * @param  $transfer_value The field value if the field type is `linkedEntity` and the linked entity type is `transfer`. If the currently set transfer is not accessible by the logged user, only the `display` field is sent.
     *
     * @return $this
     */
    public function setTransferValue($transfer_value)
    {
        $this->container['transfer_value'] = $transfer_value;

        return $this;
    }

    /**
     * Gets record_value
     *
     * @return 
     */
    public function getRecordValue()
    {
        return $this->container['record_value'];
    }

    /**
     * Sets record_value
     *
     * @param  $record_value The field value if the field type is `linkedEntity` and the linked entity type is `record`. If the currently set record is not accessible by the logged user, only the `display` field is sent.
     *
     * @return $this
     */
    public function setRecordValue($record_value)
    {
        $this->container['record_value'] = $record_value;

        return $this;
    }

    /**
     * Gets user_value
     *
     * @return 
     */
    public function getUserValue()
    {
        return $this->container['user_value'];
    }

    /**
     * Sets user_value
     *
     * @param  $user_value The field value if the field type is `linkedEntity` and the linked entity type is `user`. If the currently set user is not accessible by the logged user, only a limited set of fields is sent, namely `display` and `shortDisplay`.
     *
     * @return $this
     */
    public function setUserValue($user_value)
    {
        $this->container['user_value'] = $user_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
