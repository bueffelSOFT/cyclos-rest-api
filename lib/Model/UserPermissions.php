<?php
/**
 * UserPermissions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;

use \ArrayAccess;
use \Cyclos\Api\ObjectSerializer;

/**
 * UserPermissions Class Doc Comment
 *
 * @category Class
 * @description Determines permission the authenticated have over a specific user
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserPermissions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserPermissions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'profile' => '\Cyclos\Api\Model\UserProfilePermissions',
'passwords' => '\Cyclos\Api\Model\UserPasswordsPermissions',
'validation' => '\Cyclos\Api\Model\UserValidationPermissions',
'contact' => '\Cyclos\Api\Model\UserContactPermissions',
'brokering' => '\Cyclos\Api\Model\UserBrokeringPermissions',
'operators' => '\Cyclos\Api\Model\UserOperatorsPermissions',
'marketplace' => '\Cyclos\Api\Model\UserMarketplacePermissions',
'group' => '\Cyclos\Api\Model\UserGroupPermissions',
'status' => '\Cyclos\Api\Model\UserStatusPermissions',
'accounts' => '\Cyclos\Api\Model\AccountWithCurrency[]',
'balance_limits' => '\Cyclos\Api\Model\UserBalanceLimitsPermissions',
'payment' => '\Cyclos\Api\Model\UserPaymentPermissions',
'scheduled_payments' => '\Cyclos\Api\Model\UserScheduledPaymentsPermissions',
'recurring_payments' => '\Cyclos\Api\Model\UserRecurringPaymentsPermissions',
'payment_requests' => '\Cyclos\Api\Model\UserPaymentRequestsPermissions',
'authorized_payments' => '\Cyclos\Api\Model\UserAuthorizedPaymentsPermissions',
'tickets' => '\Cyclos\Api\Model\UserTicketsPermissions',
'external_payments' => '\Cyclos\Api\Model\UserExternalPaymentsPermissions',
'records' => '\Cyclos\Api\Model\OwnerRecordPermissions[]',
'documents' => '\Cyclos\Api\Model\UserDocumentsPermissions',
'session' => '\Cyclos\Api\Model\UserSessionPermissions',
'operations' => '\Cyclos\Api\Model\Operation[]',
'tokens' => '\Cyclos\Api\Model\TokenPermissions[]',
'personalize_nfc_tokens' => '\Cyclos\Api\Model\TokenType[]',
'vouchers' => '\Cyclos\Api\Model\UserVouchersPermissions',
'notification_settings' => '\Cyclos\Api\Model\UserNotificationSettingsPermissions'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'profile' => null,
'passwords' => null,
'validation' => null,
'contact' => null,
'brokering' => null,
'operators' => null,
'marketplace' => null,
'group' => null,
'status' => null,
'accounts' => null,
'balance_limits' => null,
'payment' => null,
'scheduled_payments' => null,
'recurring_payments' => null,
'payment_requests' => null,
'authorized_payments' => null,
'tickets' => null,
'external_payments' => null,
'records' => null,
'documents' => null,
'session' => null,
'operations' => null,
'tokens' => null,
'personalize_nfc_tokens' => null,
'vouchers' => null,
'notification_settings' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'profile' => 'profile',
'passwords' => 'passwords',
'validation' => 'validation',
'contact' => 'contact',
'brokering' => 'brokering',
'operators' => 'operators',
'marketplace' => 'marketplace',
'group' => 'group',
'status' => 'status',
'accounts' => 'accounts',
'balance_limits' => 'balanceLimits',
'payment' => 'payment',
'scheduled_payments' => 'scheduledPayments',
'recurring_payments' => 'recurringPayments',
'payment_requests' => 'paymentRequests',
'authorized_payments' => 'authorizedPayments',
'tickets' => 'tickets',
'external_payments' => 'externalPayments',
'records' => 'records',
'documents' => 'documents',
'session' => 'session',
'operations' => 'operations',
'tokens' => 'tokens',
'personalize_nfc_tokens' => 'personalizeNfcTokens',
'vouchers' => 'vouchers',
'notification_settings' => 'notificationSettings'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'profile' => 'setProfile',
'passwords' => 'setPasswords',
'validation' => 'setValidation',
'contact' => 'setContact',
'brokering' => 'setBrokering',
'operators' => 'setOperators',
'marketplace' => 'setMarketplace',
'group' => 'setGroup',
'status' => 'setStatus',
'accounts' => 'setAccounts',
'balance_limits' => 'setBalanceLimits',
'payment' => 'setPayment',
'scheduled_payments' => 'setScheduledPayments',
'recurring_payments' => 'setRecurringPayments',
'payment_requests' => 'setPaymentRequests',
'authorized_payments' => 'setAuthorizedPayments',
'tickets' => 'setTickets',
'external_payments' => 'setExternalPayments',
'records' => 'setRecords',
'documents' => 'setDocuments',
'session' => 'setSession',
'operations' => 'setOperations',
'tokens' => 'setTokens',
'personalize_nfc_tokens' => 'setPersonalizeNfcTokens',
'vouchers' => 'setVouchers',
'notification_settings' => 'setNotificationSettings'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'profile' => 'getProfile',
'passwords' => 'getPasswords',
'validation' => 'getValidation',
'contact' => 'getContact',
'brokering' => 'getBrokering',
'operators' => 'getOperators',
'marketplace' => 'getMarketplace',
'group' => 'getGroup',
'status' => 'getStatus',
'accounts' => 'getAccounts',
'balance_limits' => 'getBalanceLimits',
'payment' => 'getPayment',
'scheduled_payments' => 'getScheduledPayments',
'recurring_payments' => 'getRecurringPayments',
'payment_requests' => 'getPaymentRequests',
'authorized_payments' => 'getAuthorizedPayments',
'tickets' => 'getTickets',
'external_payments' => 'getExternalPayments',
'records' => 'getRecords',
'documents' => 'getDocuments',
'session' => 'getSession',
'operations' => 'getOperations',
'tokens' => 'getTokens',
'personalize_nfc_tokens' => 'getPersonalizeNfcTokens',
'vouchers' => 'getVouchers',
'notification_settings' => 'getNotificationSettings'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['profile'] = isset($data['profile']) ? $data['profile'] : null;
        $this->container['passwords'] = isset($data['passwords']) ? $data['passwords'] : null;
        $this->container['validation'] = isset($data['validation']) ? $data['validation'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['brokering'] = isset($data['brokering']) ? $data['brokering'] : null;
        $this->container['operators'] = isset($data['operators']) ? $data['operators'] : null;
        $this->container['marketplace'] = isset($data['marketplace']) ? $data['marketplace'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['accounts'] = isset($data['accounts']) ? $data['accounts'] : null;
        $this->container['balance_limits'] = isset($data['balance_limits']) ? $data['balance_limits'] : null;
        $this->container['payment'] = isset($data['payment']) ? $data['payment'] : null;
        $this->container['scheduled_payments'] = isset($data['scheduled_payments']) ? $data['scheduled_payments'] : null;
        $this->container['recurring_payments'] = isset($data['recurring_payments']) ? $data['recurring_payments'] : null;
        $this->container['payment_requests'] = isset($data['payment_requests']) ? $data['payment_requests'] : null;
        $this->container['authorized_payments'] = isset($data['authorized_payments']) ? $data['authorized_payments'] : null;
        $this->container['tickets'] = isset($data['tickets']) ? $data['tickets'] : null;
        $this->container['external_payments'] = isset($data['external_payments']) ? $data['external_payments'] : null;
        $this->container['records'] = isset($data['records']) ? $data['records'] : null;
        $this->container['documents'] = isset($data['documents']) ? $data['documents'] : null;
        $this->container['session'] = isset($data['session']) ? $data['session'] : null;
        $this->container['operations'] = isset($data['operations']) ? $data['operations'] : null;
        $this->container['tokens'] = isset($data['tokens']) ? $data['tokens'] : null;
        $this->container['personalize_nfc_tokens'] = isset($data['personalize_nfc_tokens']) ? $data['personalize_nfc_tokens'] : null;
        $this->container['vouchers'] = isset($data['vouchers']) ? $data['vouchers'] : null;
        $this->container['notification_settings'] = isset($data['notification_settings']) ? $data['notification_settings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets profile
     *
     * @return \Cyclos\Api\Model\UserProfilePermissions
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     *
     * @param \Cyclos\Api\Model\UserProfilePermissions $profile profile
     *
     * @return $this
     */
    public function setProfile($profile)
    {
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets passwords
     *
     * @return \Cyclos\Api\Model\UserPasswordsPermissions
     */
    public function getPasswords()
    {
        return $this->container['passwords'];
    }

    /**
     * Sets passwords
     *
     * @param \Cyclos\Api\Model\UserPasswordsPermissions $passwords passwords
     *
     * @return $this
     */
    public function setPasswords($passwords)
    {
        $this->container['passwords'] = $passwords;

        return $this;
    }

    /**
     * Gets validation
     *
     * @return \Cyclos\Api\Model\UserValidationPermissions
     */
    public function getValidation()
    {
        return $this->container['validation'];
    }

    /**
     * Sets validation
     *
     * @param \Cyclos\Api\Model\UserValidationPermissions $validation validation
     *
     * @return $this
     */
    public function setValidation($validation)
    {
        $this->container['validation'] = $validation;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \Cyclos\Api\Model\UserContactPermissions
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \Cyclos\Api\Model\UserContactPermissions $contact contact
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets brokering
     *
     * @return \Cyclos\Api\Model\UserBrokeringPermissions
     */
    public function getBrokering()
    {
        return $this->container['brokering'];
    }

    /**
     * Sets brokering
     *
     * @param \Cyclos\Api\Model\UserBrokeringPermissions $brokering brokering
     *
     * @return $this
     */
    public function setBrokering($brokering)
    {
        $this->container['brokering'] = $brokering;

        return $this;
    }

    /**
     * Gets operators
     *
     * @return \Cyclos\Api\Model\UserOperatorsPermissions
     */
    public function getOperators()
    {
        return $this->container['operators'];
    }

    /**
     * Sets operators
     *
     * @param \Cyclos\Api\Model\UserOperatorsPermissions $operators operators
     *
     * @return $this
     */
    public function setOperators($operators)
    {
        $this->container['operators'] = $operators;

        return $this;
    }

    /**
     * Gets marketplace
     *
     * @return \Cyclos\Api\Model\UserMarketplacePermissions
     */
    public function getMarketplace()
    {
        return $this->container['marketplace'];
    }

    /**
     * Sets marketplace
     *
     * @param \Cyclos\Api\Model\UserMarketplacePermissions $marketplace marketplace
     *
     * @return $this
     */
    public function setMarketplace($marketplace)
    {
        $this->container['marketplace'] = $marketplace;

        return $this;
    }

    /**
     * Gets group
     *
     * @return \Cyclos\Api\Model\UserGroupPermissions
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param \Cyclos\Api\Model\UserGroupPermissions $group group
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Cyclos\Api\Model\UserStatusPermissions
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Cyclos\Api\Model\UserStatusPermissions $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets accounts
     *
     * @return \Cyclos\Api\Model\AccountWithCurrency[]
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     *
     * @param \Cyclos\Api\Model\AccountWithCurrency[] $accounts Accounts which can be viewed by the authenticated user
     *
     * @return $this
     */
    public function setAccounts($accounts)
    {
        $this->container['accounts'] = $accounts;

        return $this;
    }

    /**
     * Gets balance_limits
     *
     * @return \Cyclos\Api\Model\UserBalanceLimitsPermissions
     */
    public function getBalanceLimits()
    {
        return $this->container['balance_limits'];
    }

    /**
     * Sets balance_limits
     *
     * @param \Cyclos\Api\Model\UserBalanceLimitsPermissions $balance_limits balance_limits
     *
     * @return $this
     */
    public function setBalanceLimits($balance_limits)
    {
        $this->container['balance_limits'] = $balance_limits;

        return $this;
    }

    /**
     * Gets payment
     *
     * @return \Cyclos\Api\Model\UserPaymentPermissions
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     *
     * @param \Cyclos\Api\Model\UserPaymentPermissions $payment payment
     *
     * @return $this
     */
    public function setPayment($payment)
    {
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets scheduled_payments
     *
     * @return \Cyclos\Api\Model\UserScheduledPaymentsPermissions
     */
    public function getScheduledPayments()
    {
        return $this->container['scheduled_payments'];
    }

    /**
     * Sets scheduled_payments
     *
     * @param \Cyclos\Api\Model\UserScheduledPaymentsPermissions $scheduled_payments scheduled_payments
     *
     * @return $this
     */
    public function setScheduledPayments($scheduled_payments)
    {
        $this->container['scheduled_payments'] = $scheduled_payments;

        return $this;
    }

    /**
     * Gets recurring_payments
     *
     * @return \Cyclos\Api\Model\UserRecurringPaymentsPermissions
     */
    public function getRecurringPayments()
    {
        return $this->container['recurring_payments'];
    }

    /**
     * Sets recurring_payments
     *
     * @param \Cyclos\Api\Model\UserRecurringPaymentsPermissions $recurring_payments recurring_payments
     *
     * @return $this
     */
    public function setRecurringPayments($recurring_payments)
    {
        $this->container['recurring_payments'] = $recurring_payments;

        return $this;
    }

    /**
     * Gets payment_requests
     *
     * @return \Cyclos\Api\Model\UserPaymentRequestsPermissions
     */
    public function getPaymentRequests()
    {
        return $this->container['payment_requests'];
    }

    /**
     * Sets payment_requests
     *
     * @param \Cyclos\Api\Model\UserPaymentRequestsPermissions $payment_requests payment_requests
     *
     * @return $this
     */
    public function setPaymentRequests($payment_requests)
    {
        $this->container['payment_requests'] = $payment_requests;

        return $this;
    }

    /**
     * Gets authorized_payments
     *
     * @return \Cyclos\Api\Model\UserAuthorizedPaymentsPermissions
     */
    public function getAuthorizedPayments()
    {
        return $this->container['authorized_payments'];
    }

    /**
     * Sets authorized_payments
     *
     * @param \Cyclos\Api\Model\UserAuthorizedPaymentsPermissions $authorized_payments authorized_payments
     *
     * @return $this
     */
    public function setAuthorizedPayments($authorized_payments)
    {
        $this->container['authorized_payments'] = $authorized_payments;

        return $this;
    }

    /**
     * Gets tickets
     *
     * @return \Cyclos\Api\Model\UserTicketsPermissions
     */
    public function getTickets()
    {
        return $this->container['tickets'];
    }

    /**
     * Sets tickets
     *
     * @param \Cyclos\Api\Model\UserTicketsPermissions $tickets tickets
     *
     * @return $this
     */
    public function setTickets($tickets)
    {
        $this->container['tickets'] = $tickets;

        return $this;
    }

    /**
     * Gets external_payments
     *
     * @return \Cyclos\Api\Model\UserExternalPaymentsPermissions
     */
    public function getExternalPayments()
    {
        return $this->container['external_payments'];
    }

    /**
     * Sets external_payments
     *
     * @param \Cyclos\Api\Model\UserExternalPaymentsPermissions $external_payments external_payments
     *
     * @return $this
     */
    public function setExternalPayments($external_payments)
    {
        $this->container['external_payments'] = $external_payments;

        return $this;
    }

    /**
     * Gets records
     *
     * @return \Cyclos\Api\Model\OwnerRecordPermissions[]
     */
    public function getRecords()
    {
        return $this->container['records'];
    }

    /**
     * Sets records
     *
     * @param \Cyclos\Api\Model\OwnerRecordPermissions[] $records Records types the authenticated user can view over the given user
     *
     * @return $this
     */
    public function setRecords($records)
    {
        $this->container['records'] = $records;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \Cyclos\Api\Model\UserDocumentsPermissions
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param \Cyclos\Api\Model\UserDocumentsPermissions $documents documents
     *
     * @return $this
     */
    public function setDocuments($documents)
    {
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets session
     *
     * @return \Cyclos\Api\Model\UserSessionPermissions
     */
    public function getSession()
    {
        return $this->container['session'];
    }

    /**
     * Sets session
     *
     * @param \Cyclos\Api\Model\UserSessionPermissions $session session
     *
     * @return $this
     */
    public function setSession($session)
    {
        $this->container['session'] = $session;

        return $this;
    }

    /**
     * Gets operations
     *
     * @return \Cyclos\Api\Model\Operation[]
     */
    public function getOperations()
    {
        return $this->container['operations'];
    }

    /**
     * Sets operations
     *
     * @param \Cyclos\Api\Model\Operation[] $operations Custom operations the authenticated user can run over the given user
     *
     * @return $this
     */
    public function setOperations($operations)
    {
        $this->container['operations'] = $operations;

        return $this;
    }

    /**
     * Gets tokens
     *
     * @return \Cyclos\Api\Model\TokenPermissions[]
     */
    public function getTokens()
    {
        return $this->container['tokens'];
    }

    /**
     * Sets tokens
     *
     * @param \Cyclos\Api\Model\TokenPermissions[] $tokens Permissions over tokens of each visible type.
     *
     * @return $this
     */
    public function setTokens($tokens)
    {
        $this->container['tokens'] = $tokens;

        return $this;
    }

    /**
     * Gets personalize_nfc_tokens
     *
     * @return \Cyclos\Api\Model\TokenType[]
     */
    public function getPersonalizeNfcTokens()
    {
        return $this->container['personalize_nfc_tokens'];
    }

    /**
     * Sets personalize_nfc_tokens
     *
     * @param \Cyclos\Api\Model\TokenType[] $personalize_nfc_tokens DEPRECATED: Filter the `tokens` list with `type.physicalType = 'nfcTag'` and `activate = true`.  NFC tokens the authenticated user can personalize for the given user
     *
     * @return $this
     */
    public function setPersonalizeNfcTokens($personalize_nfc_tokens)
    {
        $this->container['personalize_nfc_tokens'] = $personalize_nfc_tokens;

        return $this;
    }

    /**
     * Gets vouchers
     *
     * @return \Cyclos\Api\Model\UserVouchersPermissions
     */
    public function getVouchers()
    {
        return $this->container['vouchers'];
    }

    /**
     * Sets vouchers
     *
     * @param \Cyclos\Api\Model\UserVouchersPermissions $vouchers vouchers
     *
     * @return $this
     */
    public function setVouchers($vouchers)
    {
        $this->container['vouchers'] = $vouchers;

        return $this;
    }

    /**
     * Gets notification_settings
     *
     * @return \Cyclos\Api\Model\UserNotificationSettingsPermissions
     */
    public function getNotificationSettings()
    {
        return $this->container['notification_settings'];
    }

    /**
     * Sets notification_settings
     *
     * @param \Cyclos\Api\Model\UserNotificationSettingsPermissions $notification_settings notification_settings
     *
     * @return $this
     */
    public function setNotificationSettings($notification_settings)
    {
        $this->container['notification_settings'] = $notification_settings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
