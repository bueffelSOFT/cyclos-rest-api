<?php
/**
 * BaseUserDataForSearch
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;

use \ArrayAccess;
use \Cyclos\Api\ObjectSerializer;

/**
 * BaseUserDataForSearch Class Doc Comment
 *
 * @category Class
 * @description Contains basic data used to search users in distinct contexts
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BaseUserDataForSearch implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BaseUserDataForSearch';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allow_keywords' => 'bool',
'fields_in_search' => 'string[]',
'basic_fields' => '\Cyclos\Api\Model\BasicProfileFieldInput[]',
'custom_fields' => '\Cyclos\Api\Model\CustomFieldDetailed[]',
'groups' => '\Cyclos\Api\Model\Group[]',
'search_by_distance_data' => '\Cyclos\Api\Model\SearchByDistanceData',
'address_fields_in_search' => '\Cyclos\Api\Model\AddressQueryFieldEnum[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'allow_keywords' => null,
'fields_in_search' => null,
'basic_fields' => null,
'custom_fields' => null,
'groups' => null,
'search_by_distance_data' => null,
'address_fields_in_search' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_keywords' => 'allowKeywords',
'fields_in_search' => 'fieldsInSearch',
'basic_fields' => 'basicFields',
'custom_fields' => 'customFields',
'groups' => 'groups',
'search_by_distance_data' => 'searchByDistanceData',
'address_fields_in_search' => 'addressFieldsInSearch'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_keywords' => 'setAllowKeywords',
'fields_in_search' => 'setFieldsInSearch',
'basic_fields' => 'setBasicFields',
'custom_fields' => 'setCustomFields',
'groups' => 'setGroups',
'search_by_distance_data' => 'setSearchByDistanceData',
'address_fields_in_search' => 'setAddressFieldsInSearch'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_keywords' => 'getAllowKeywords',
'fields_in_search' => 'getFieldsInSearch',
'basic_fields' => 'getBasicFields',
'custom_fields' => 'getCustomFields',
'groups' => 'getGroups',
'search_by_distance_data' => 'getSearchByDistanceData',
'address_fields_in_search' => 'getAddressFieldsInSearch'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_keywords'] = isset($data['allow_keywords']) ? $data['allow_keywords'] : null;
        $this->container['fields_in_search'] = isset($data['fields_in_search']) ? $data['fields_in_search'] : null;
        $this->container['basic_fields'] = isset($data['basic_fields']) ? $data['basic_fields'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
        $this->container['groups'] = isset($data['groups']) ? $data['groups'] : null;
        $this->container['search_by_distance_data'] = isset($data['search_by_distance_data']) ? $data['search_by_distance_data'] : null;
        $this->container['address_fields_in_search'] = isset($data['address_fields_in_search']) ? $data['address_fields_in_search'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_keywords
     *
     * @return bool
     */
    public function getAllowKeywords()
    {
        return $this->container['allow_keywords'];
    }

    /**
     * Sets allow_keywords
     *
     * @param bool $allow_keywords Indicates whether using keywords is allowed
     *
     * @return $this
     */
    public function setAllowKeywords($allow_keywords)
    {
        $this->container['allow_keywords'] = $allow_keywords;

        return $this;
    }

    /**
     * Gets fields_in_search
     *
     * @return string[]
     */
    public function getFieldsInSearch()
    {
        return $this->container['fields_in_search'];
    }

    /**
     * Sets fields_in_search
     *
     * @param string[] $fields_in_search The internal names of either basic or custom profile fields which can be used as search filters (separated fields, not keywords).
     *
     * @return $this
     */
    public function setFieldsInSearch($fields_in_search)
    {
        $this->container['fields_in_search'] = $fields_in_search;

        return $this;
    }

    /**
     * Gets basic_fields
     *
     * @return \Cyclos\Api\Model\BasicProfileFieldInput[]
     */
    public function getBasicFields()
    {
        return $this->container['basic_fields'];
    }

    /**
     * Sets basic_fields
     *
     * @param \Cyclos\Api\Model\BasicProfileFieldInput[] $basic_fields The list of basic profile fields that can be used either as search filters (if the internal names are present in the `fieldsInSearch` property) or on the result list (if the internal names are present in the `fieldsInList` property).
     *
     * @return $this
     */
    public function setBasicFields($basic_fields)
    {
        $this->container['basic_fields'] = $basic_fields;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \Cyclos\Api\Model\CustomFieldDetailed[]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \Cyclos\Api\Model\CustomFieldDetailed[] $custom_fields The list of custom profile fields that can be used either as search filters (if the internal names are present in the `fieldsInSearch` property) or on the result list (if the internal names are present in the `fieldsInList` property)
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return \Cyclos\Api\Model\Group[]
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param \Cyclos\Api\Model\Group[] $groups The groups the authenticated user can use to filter users. Admins can always filter by groups, while users depend on a permission, which can be to only view group sets, only groups or none.
     *
     * @return $this
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets search_by_distance_data
     *
     * @return \Cyclos\Api\Model\SearchByDistanceData
     */
    public function getSearchByDistanceData()
    {
        return $this->container['search_by_distance_data'];
    }

    /**
     * Sets search_by_distance_data
     *
     * @param \Cyclos\Api\Model\SearchByDistanceData $search_by_distance_data search_by_distance_data
     *
     * @return $this
     */
    public function setSearchByDistanceData($search_by_distance_data)
    {
        $this->container['search_by_distance_data'] = $search_by_distance_data;

        return $this;
    }

    /**
     * Gets address_fields_in_search
     *
     * @return \Cyclos\Api\Model\AddressQueryFieldEnum[]
     */
    public function getAddressFieldsInSearch()
    {
        return $this->container['address_fields_in_search'];
    }

    /**
     * Sets address_fields_in_search
     *
     * @param \Cyclos\Api\Model\AddressQueryFieldEnum[] $address_fields_in_search address_fields_in_search
     *
     * @return $this
     */
    public function setAddressFieldsInSearch($address_fields_in_search)
    {
        $this->container['address_fields_in_search'] = $address_fields_in_search;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
