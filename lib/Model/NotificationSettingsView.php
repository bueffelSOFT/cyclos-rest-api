<?php
/**
 * NotificationSettingsView
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;
use \Cyclos\Api\ObjectSerializer;

/**
 * NotificationSettingsView Class Doc Comment
 *
 * @category Class
 * @description Contains the current notification settings for a given user. The regular user (member / broker) and administrator notification settings use different notification kinds.
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NotificationSettingsView extends BaseNotificationSettings 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NotificationSettingsView';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'notifications' => '\Cyclos\Api\Model\NotificationKindMediums[]',
'user_accounts' => '\Cyclos\Api\Model\AccountNotificationSettingsView[]',
'payments' => '\Cyclos\Api\Model\TransferType[]',
'authorizable_payments' => '\Cyclos\Api\Model\TransferType[]',
'external_payments_failed' => '\Cyclos\Api\Model\TransferType[]',
'external_payments_expired' => '\Cyclos\Api\Model\TransferType[]',
'voucher_configurations' => '\Cyclos\Api\Model\EntityReference[]',
'voucher_configurations_buying' => '\Cyclos\Api\Model\EntityReference[]',
'user_groups' => '\Cyclos\Api\Model\Group[]',
'system_alerts' => '\Cyclos\Api\Model\SystemAlertTypeEnum[]',
'user_alerts' => '\Cyclos\Api\Model\UserAlertTypeEnum[]',
'forward_message_categories' => '\Cyclos\Api\Model\EntityReference[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'notifications' => null,
'user_accounts' => null,
'payments' => null,
'authorizable_payments' => null,
'external_payments_failed' => null,
'external_payments_expired' => null,
'voucher_configurations' => null,
'voucher_configurations_buying' => null,
'user_groups' => null,
'system_alerts' => null,
'user_alerts' => null,
'forward_message_categories' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'notifications' => 'notifications',
'user_accounts' => 'userAccounts',
'payments' => 'payments',
'authorizable_payments' => 'authorizablePayments',
'external_payments_failed' => 'externalPaymentsFailed',
'external_payments_expired' => 'externalPaymentsExpired',
'voucher_configurations' => 'voucherConfigurations',
'voucher_configurations_buying' => 'voucherConfigurationsBuying',
'user_groups' => 'userGroups',
'system_alerts' => 'systemAlerts',
'user_alerts' => 'userAlerts',
'forward_message_categories' => 'forwardMessageCategories'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'notifications' => 'setNotifications',
'user_accounts' => 'setUserAccounts',
'payments' => 'setPayments',
'authorizable_payments' => 'setAuthorizablePayments',
'external_payments_failed' => 'setExternalPaymentsFailed',
'external_payments_expired' => 'setExternalPaymentsExpired',
'voucher_configurations' => 'setVoucherConfigurations',
'voucher_configurations_buying' => 'setVoucherConfigurationsBuying',
'user_groups' => 'setUserGroups',
'system_alerts' => 'setSystemAlerts',
'user_alerts' => 'setUserAlerts',
'forward_message_categories' => 'setForwardMessageCategories'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'notifications' => 'getNotifications',
'user_accounts' => 'getUserAccounts',
'payments' => 'getPayments',
'authorizable_payments' => 'getAuthorizablePayments',
'external_payments_failed' => 'getExternalPaymentsFailed',
'external_payments_expired' => 'getExternalPaymentsExpired',
'voucher_configurations' => 'getVoucherConfigurations',
'voucher_configurations_buying' => 'getVoucherConfigurationsBuying',
'user_groups' => 'getUserGroups',
'system_alerts' => 'getSystemAlerts',
'user_alerts' => 'getUserAlerts',
'forward_message_categories' => 'getForwardMessageCategories'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['notifications'] = isset($data['notifications']) ? $data['notifications'] : null;
        $this->container['user_accounts'] = isset($data['user_accounts']) ? $data['user_accounts'] : null;
        $this->container['payments'] = isset($data['payments']) ? $data['payments'] : null;
        $this->container['authorizable_payments'] = isset($data['authorizable_payments']) ? $data['authorizable_payments'] : null;
        $this->container['external_payments_failed'] = isset($data['external_payments_failed']) ? $data['external_payments_failed'] : null;
        $this->container['external_payments_expired'] = isset($data['external_payments_expired']) ? $data['external_payments_expired'] : null;
        $this->container['voucher_configurations'] = isset($data['voucher_configurations']) ? $data['voucher_configurations'] : null;
        $this->container['voucher_configurations_buying'] = isset($data['voucher_configurations_buying']) ? $data['voucher_configurations_buying'] : null;
        $this->container['user_groups'] = isset($data['user_groups']) ? $data['user_groups'] : null;
        $this->container['system_alerts'] = isset($data['system_alerts']) ? $data['system_alerts'] : null;
        $this->container['user_alerts'] = isset($data['user_alerts']) ? $data['user_alerts'] : null;
        $this->container['forward_message_categories'] = isset($data['forward_message_categories']) ? $data['forward_message_categories'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets notifications
     *
     * @return \Cyclos\Api\Model\NotificationKindMediums[]
     */
    public function getNotifications()
    {
        return $this->container['notifications'];
    }

    /**
     * Sets notifications
     *
     * @param \Cyclos\Api\Model\NotificationKindMediums[] $notifications Per notification kind, indicates the mediums it is sent. It is guaranteed that all and only the allowed kinds are sent.
     *
     * @return $this
     */
    public function setNotifications($notifications)
    {
        $this->container['notifications'] = $notifications;

        return $this;
    }

    /**
     * Gets user_accounts
     *
     * @return \Cyclos\Api\Model\AccountNotificationSettingsView[]
     */
    public function getUserAccounts()
    {
        return $this->container['user_accounts'];
    }

    /**
     * Sets user_accounts
     *
     * @param \Cyclos\Api\Model\AccountNotificationSettingsView[] $user_accounts Contains the settings for each user account. Only applicable for users (members / brokers), not administrators.
     *
     * @return $this
     */
    public function setUserAccounts($user_accounts)
    {
        $this->container['user_accounts'] = $user_accounts;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \Cyclos\Api\Model\TransferType[]
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \Cyclos\Api\Model\TransferType[] $payments The payment types to be notified for notifications of kind `adminPaymentPerformed`. Only applicable for administrators, not users (members / brokers).
     *
     * @return $this
     */
    public function setPayments($payments)
    {
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets authorizable_payments
     *
     * @return \Cyclos\Api\Model\TransferType[]
     */
    public function getAuthorizablePayments()
    {
        return $this->container['authorizable_payments'];
    }

    /**
     * Sets authorizable_payments
     *
     * @param \Cyclos\Api\Model\TransferType[] $authorizable_payments The payment types to be notified for notifications of kind `adminPaymentAwaitingAuthorization`. Only applicable for administrators, not users (members / brokers).
     *
     * @return $this
     */
    public function setAuthorizablePayments($authorizable_payments)
    {
        $this->container['authorizable_payments'] = $authorizable_payments;

        return $this;
    }

    /**
     * Gets external_payments_failed
     *
     * @return \Cyclos\Api\Model\TransferType[]
     */
    public function getExternalPaymentsFailed()
    {
        return $this->container['external_payments_failed'];
    }

    /**
     * Sets external_payments_failed
     *
     * @param \Cyclos\Api\Model\TransferType[] $external_payments_failed The payment types to be notified for notifications of kind `adminExternalPaymentPerformedFailed`. Only applicable for administrators, not users (members / brokers).
     *
     * @return $this
     */
    public function setExternalPaymentsFailed($external_payments_failed)
    {
        $this->container['external_payments_failed'] = $external_payments_failed;

        return $this;
    }

    /**
     * Gets external_payments_expired
     *
     * @return \Cyclos\Api\Model\TransferType[]
     */
    public function getExternalPaymentsExpired()
    {
        return $this->container['external_payments_expired'];
    }

    /**
     * Sets external_payments_expired
     *
     * @param \Cyclos\Api\Model\TransferType[] $external_payments_expired The payment types to be notified for notifications of kind `adminExternalPaymentExpired`. Only applicable for administrators, not users (members / brokers).
     *
     * @return $this
     */
    public function setExternalPaymentsExpired($external_payments_expired)
    {
        $this->container['external_payments_expired'] = $external_payments_expired;

        return $this;
    }

    /**
     * Gets voucher_configurations
     *
     * @return \Cyclos\Api\Model\EntityReference[]
     */
    public function getVoucherConfigurations()
    {
        return $this->container['voucher_configurations'];
    }

    /**
     * Sets voucher_configurations
     *
     * @param \Cyclos\Api\Model\EntityReference[] $voucher_configurations The voucher configurations to be notified for notifications of kinds `adminGeneratedVouchersAboutToExpire` and `adminGeneratedVouchersExpired`. Only applicable for administrators, not users (members / brokers).
     *
     * @return $this
     */
    public function setVoucherConfigurations($voucher_configurations)
    {
        $this->container['voucher_configurations'] = $voucher_configurations;

        return $this;
    }

    /**
     * Gets voucher_configurations_buying
     *
     * @return \Cyclos\Api\Model\EntityReference[]
     */
    public function getVoucherConfigurationsBuying()
    {
        return $this->container['voucher_configurations_buying'];
    }

    /**
     * Sets voucher_configurations_buying
     *
     * @param \Cyclos\Api\Model\EntityReference[] $voucher_configurations_buying The voucher configurations to be notified for notifications of kind `adminVoucherBuyingAboutToExpire`. Only applicable for administrators, not users (members / brokers).
     *
     * @return $this
     */
    public function setVoucherConfigurationsBuying($voucher_configurations_buying)
    {
        $this->container['voucher_configurations_buying'] = $voucher_configurations_buying;

        return $this;
    }

    /**
     * Gets user_groups
     *
     * @return \Cyclos\Api\Model\Group[]
     */
    public function getUserGroups()
    {
        return $this->container['user_groups'];
    }

    /**
     * Sets user_groups
     *
     * @param \Cyclos\Api\Model\Group[] $user_groups The groups to be notified for notifications of kind `adminUserRegistration`. Only applicable for administrators, not users (members / brokers).
     *
     * @return $this
     */
    public function setUserGroups($user_groups)
    {
        $this->container['user_groups'] = $user_groups;

        return $this;
    }

    /**
     * Gets system_alerts
     *
     * @return \Cyclos\Api\Model\SystemAlertTypeEnum[]
     */
    public function getSystemAlerts()
    {
        return $this->container['system_alerts'];
    }

    /**
     * Sets system_alerts
     *
     * @param \Cyclos\Api\Model\SystemAlertTypeEnum[] $system_alerts The kinds of system alerts to be notified for notifications of kind `adminSystemAlert`. Only applicable for administrators, not users (members / brokers).
     *
     * @return $this
     */
    public function setSystemAlerts($system_alerts)
    {
        $this->container['system_alerts'] = $system_alerts;

        return $this;
    }

    /**
     * Gets user_alerts
     *
     * @return \Cyclos\Api\Model\UserAlertTypeEnum[]
     */
    public function getUserAlerts()
    {
        return $this->container['user_alerts'];
    }

    /**
     * Sets user_alerts
     *
     * @param \Cyclos\Api\Model\UserAlertTypeEnum[] $user_alerts The kinds of user alerts to be notified for notifications of kind `adminUserAlert`. Only applicable for administrators, not users (members / brokers).
     *
     * @return $this
     */
    public function setUserAlerts($user_alerts)
    {
        $this->container['user_alerts'] = $user_alerts;

        return $this;
    }

    /**
     * Gets forward_message_categories
     *
     * @return \Cyclos\Api\Model\EntityReference[]
     */
    public function getForwardMessageCategories()
    {
        return $this->container['forward_message_categories'];
    }

    /**
     * Sets forward_message_categories
     *
     * @param \Cyclos\Api\Model\EntityReference[] $forward_message_categories The message categories to which new messages to system will be forwarded to the administrator e-mail. Not tied to any notification kind. Only applicable for administrators, not users (members / brokers).
     *
     * @return $this
     */
    public function setForwardMessageCategories($forward_message_categories)
    {
        $this->container['forward_message_categories'] = $forward_message_categories;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
