<?php
/**
 * UserNew
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Cyclos\Api\Model;
use \Cyclos\Api\ObjectSerializer;

/**
 * UserNew Class Doc Comment
 *
 * @category Class
 * @description Contains data used to register a user. All basic profile fields (full name, login name, e-mail, phones, addresses and image) can be enabled or disabled on Cyclos, via products. Also, the available custom fields and whether they can be hidden depend on the products the selected group has.
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserNew extends UserManage 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserNew';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'group' => 'string',
'broker' => 'string',
'mobile_phones' => '\Cyclos\Api\Model\PhoneNew[]',
'land_line_phones' => '\Cyclos\Api\Model\PhoneNew[]',
'passwords' => '\Cyclos\Api\Model\PasswordRegistration[]',
'skip_activation_email' => 'bool',
'addresses' => '\Cyclos\Api\Model\AddressNew[]',
'contact_infos' => '\Cyclos\Api\Model\ContactInfoNew[]',
'images' => 'string[]',
'captcha' => 'object',
'accept_agreement' => 'bool',
'as_member' => 'bool',
'security_question' => 'string',
'security_answer' => 'string',
'nfc_token' => 'object'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'group' => null,
'broker' => null,
'mobile_phones' => null,
'land_line_phones' => null,
'passwords' => null,
'skip_activation_email' => null,
'addresses' => null,
'contact_infos' => null,
'images' => null,
'captcha' => null,
'accept_agreement' => null,
'as_member' => null,
'security_question' => null,
'security_answer' => null,
'nfc_token' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'group' => 'group',
'broker' => 'broker',
'mobile_phones' => 'mobilePhones',
'land_line_phones' => 'landLinePhones',
'passwords' => 'passwords',
'skip_activation_email' => 'skipActivationEmail',
'addresses' => 'addresses',
'contact_infos' => 'contactInfos',
'images' => 'images',
'captcha' => 'captcha',
'accept_agreement' => 'acceptAgreement',
'as_member' => 'asMember',
'security_question' => 'securityQuestion',
'security_answer' => 'securityAnswer',
'nfc_token' => 'nfcToken'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'group' => 'setGroup',
'broker' => 'setBroker',
'mobile_phones' => 'setMobilePhones',
'land_line_phones' => 'setLandLinePhones',
'passwords' => 'setPasswords',
'skip_activation_email' => 'setSkipActivationEmail',
'addresses' => 'setAddresses',
'contact_infos' => 'setContactInfos',
'images' => 'setImages',
'captcha' => 'setCaptcha',
'accept_agreement' => 'setAcceptAgreement',
'as_member' => 'setAsMember',
'security_question' => 'setSecurityQuestion',
'security_answer' => 'setSecurityAnswer',
'nfc_token' => 'setNfcToken'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'group' => 'getGroup',
'broker' => 'getBroker',
'mobile_phones' => 'getMobilePhones',
'land_line_phones' => 'getLandLinePhones',
'passwords' => 'getPasswords',
'skip_activation_email' => 'getSkipActivationEmail',
'addresses' => 'getAddresses',
'contact_infos' => 'getContactInfos',
'images' => 'getImages',
'captcha' => 'getCaptcha',
'accept_agreement' => 'getAcceptAgreement',
'as_member' => 'getAsMember',
'security_question' => 'getSecurityQuestion',
'security_answer' => 'getSecurityAnswer',
'nfc_token' => 'getNfcToken'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['broker'] = isset($data['broker']) ? $data['broker'] : null;
        $this->container['mobile_phones'] = isset($data['mobile_phones']) ? $data['mobile_phones'] : null;
        $this->container['land_line_phones'] = isset($data['land_line_phones']) ? $data['land_line_phones'] : null;
        $this->container['passwords'] = isset($data['passwords']) ? $data['passwords'] : null;
        $this->container['skip_activation_email'] = isset($data['skip_activation_email']) ? $data['skip_activation_email'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['contact_infos'] = isset($data['contact_infos']) ? $data['contact_infos'] : null;
        $this->container['images'] = isset($data['images']) ? $data['images'] : null;
        $this->container['captcha'] = isset($data['captcha']) ? $data['captcha'] : null;
        $this->container['accept_agreement'] = isset($data['accept_agreement']) ? $data['accept_agreement'] : null;
        $this->container['as_member'] = isset($data['as_member']) ? $data['as_member'] : null;
        $this->container['security_question'] = isset($data['security_question']) ? $data['security_question'] : null;
        $this->container['security_answer'] = isset($data['security_answer']) ? $data['security_answer'] : null;
        $this->container['nfc_token'] = isset($data['nfc_token']) ? $data['nfc_token'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets group
     *
     * @return string
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param string $group The initial user group
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets broker
     *
     * @return string
     */
    public function getBroker()
    {
        return $this->container['broker'];
    }

    /**
     * Sets broker
     *
     * @param string $broker Either the identifier or other identification value (login name, e-mail, etc) of the broker for the new user. Only allowed if logged-in as administrator with permission.
     *
     * @return $this
     */
    public function setBroker($broker)
    {
        $this->container['broker'] = $broker;

        return $this;
    }

    /**
     * Gets mobile_phones
     *
     * @return \Cyclos\Api\Model\PhoneNew[]
     */
    public function getMobilePhones()
    {
        return $this->container['mobile_phones'];
    }

    /**
     * Sets mobile_phones
     *
     * @param \Cyclos\Api\Model\PhoneNew[] $mobile_phones Mobile phones to be registered together with the user
     *
     * @return $this
     */
    public function setMobilePhones($mobile_phones)
    {
        $this->container['mobile_phones'] = $mobile_phones;

        return $this;
    }

    /**
     * Gets land_line_phones
     *
     * @return \Cyclos\Api\Model\PhoneNew[]
     */
    public function getLandLinePhones()
    {
        return $this->container['land_line_phones'];
    }

    /**
     * Sets land_line_phones
     *
     * @param \Cyclos\Api\Model\PhoneNew[] $land_line_phones Land-line phones to be registered together with the user
     *
     * @return $this
     */
    public function setLandLinePhones($land_line_phones)
    {
        $this->container['land_line_phones'] = $land_line_phones;

        return $this;
    }

    /**
     * Gets passwords
     *
     * @return \Cyclos\Api\Model\PasswordRegistration[]
     */
    public function getPasswords()
    {
        return $this->container['passwords'];
    }

    /**
     * Sets passwords
     *
     * @param \Cyclos\Api\Model\PasswordRegistration[] $passwords The initial passwords of the user
     *
     * @return $this
     */
    public function setPasswords($passwords)
    {
        $this->container['passwords'] = $passwords;

        return $this;
    }

    /**
     * Gets skip_activation_email
     *
     * @return bool
     */
    public function getSkipActivationEmail()
    {
        return $this->container['skip_activation_email'];
    }

    /**
     * Sets skip_activation_email
     *
     * @param bool $skip_activation_email When set to true, the activation e-mail is not sent to the registered user. Can only be used when an administrator / broker is registering a user, and ignored on public registrations (the e-mail is always sent on public registrations).
     *
     * @return $this
     */
    public function setSkipActivationEmail($skip_activation_email)
    {
        $this->container['skip_activation_email'] = $skip_activation_email;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \Cyclos\Api\Model\AddressNew[]
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \Cyclos\Api\Model\AddressNew[] $addresses Addresses to be registered together with the user
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets contact_infos
     *
     * @return \Cyclos\Api\Model\ContactInfoNew[]
     */
    public function getContactInfos()
    {
        return $this->container['contact_infos'];
    }

    /**
     * Sets contact_infos
     *
     * @param \Cyclos\Api\Model\ContactInfoNew[] $contact_infos Additional contacts to be registered together with the user
     *
     * @return $this
     */
    public function setContactInfos($contact_infos)
    {
        $this->container['contact_infos'] = $contact_infos;

        return $this;
    }

    /**
     * Gets images
     *
     * @return string[]
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param string[] $images The ids of previously uploaded user temporary images to be initially used as profile images
     *
     * @return $this
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets captcha
     *
     * @return object
     */
    public function getCaptcha()
    {
        return $this->container['captcha'];
    }

    /**
     * Sets captcha
     *
     * @param object $captcha The captcha response is required on public registrations, and ignored when administrators / brokers register another user.
     *
     * @return $this
     */
    public function setCaptcha($captcha)
    {
        $this->container['captcha'] = $captcha;

        return $this;
    }

    /**
     * Gets accept_agreement
     *
     * @return bool
     */
    public function getAcceptAgreement()
    {
        return $this->container['accept_agreement'];
    }

    /**
     * Sets accept_agreement
     *
     * @param bool $accept_agreement When there are agreements that need to be accepted for registration, this property must be passed with the value true
     *
     * @return $this
     */
    public function setAcceptAgreement($accept_agreement)
    {
        $this->container['accept_agreement'] = $accept_agreement;

        return $this;
    }

    /**
     * Gets as_member
     *
     * @return bool
     */
    public function getAsMember()
    {
        return $this->container['as_member'];
    }

    /**
     * Sets as_member
     *
     * @param bool $as_member Flag required only when the authenticated user is a broker, in that case we need to distingish between registering as member or broker. If true then the new user will be registered without a brokering relationship. Otherwise the authenticated user will be set as the broker of the new user.
     *
     * @return $this
     */
    public function setAsMember($as_member)
    {
        $this->container['as_member'] = $as_member;

        return $this;
    }

    /**
     * Gets security_question
     *
     * @return string
     */
    public function getSecurityQuestion()
    {
        return $this->container['security_question'];
    }

    /**
     * Sets security_question
     *
     * @param string $security_question If the server is configured to use security question, is the `internalName` of the question present in the result of `data-for-new`, in the `securityQuestions` property. Is optional and only used in public registration.
     *
     * @return $this
     */
    public function setSecurityQuestion($security_question)
    {
        $this->container['security_question'] = $security_question;

        return $this;
    }

    /**
     * Gets security_answer
     *
     * @return string
     */
    public function getSecurityAnswer()
    {
        return $this->container['security_answer'];
    }

    /**
     * Sets security_answer
     *
     * @param string $security_answer If a `securityQuestion` is informed, this is the answer. Required in this case. Only used in public registration.
     *
     * @return $this
     */
    public function setSecurityAnswer($security_answer)
    {
        $this->container['security_answer'] = $security_answer;

        return $this;
    }

    /**
     * Gets nfc_token
     *
     * @return object
     */
    public function getNfcToken()
    {
        return $this->container['nfc_token'];
    }

    /**
     * Sets nfc_token
     *
     * @param object $nfc_token If not null then the given NFC token parameters will be used to personalize a tag for the user.
     *
     * @return $this
     */
    public function setNfcToken($nfc_token)
    {
        $this->container['nfc_token'] = $nfc_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
