<?php
/**
 * PasswordInputTest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the model.
 */

namespace Cyclos\Api;

/**
 * PasswordInputTest Class Doc Comment
 *
 * @category    Class
 * @description Contains all information for a password entry. Passwords in Cyclos may be entered as regular texts or as virtual keyboards. For &#x60;virtualKeyboard&#x60;, a number of information is sent, such as an unique id, the number of buttons to be displayed, the number of rows that should visually hold those buttons, the sequences of characters that should be displayed on each button. When sending the value of a password of type virtual keyboard, unique id should be sent, together with the entire sequence for each button, all separated by pipes. So, suppose a very simple (and weakly configured) example where the id is &#x60;987654321&#x60; and the sequences are: &#x60;[[\&quot;abc\&quot;, \&quot;def\&quot;, \&quot;fgh\&quot;], [\&quot;ijk\&quot;, \&quot;lmn\&quot;, \&quot;opq\&quot;]]&#x60;. This describes 2 sequences of 3 buttons each. First, the buttons with the options &#x60;abc&#x60;, &#x60;def&#x60; and &#x60;fgh&#x60; should be shown. Suppose the user chooses the second one. Then the button labels should be changed to &#x60;ijk&#x60;, &#x60;lmn&#x60; and &#x60;opq&#x60;. Now the user picks the first one. The value sent to the server should be &#x60;987654321|def|ijk&#x60;.
 * @package     Cyclos\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PasswordInputTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test "PasswordInput"
     */
    public function testPasswordInput()
    {
    }

    /**
     * Test attribute "has_active_password"
     */
    public function testPropertyHasActivePassword()
    {
    }

    /**
     * Test attribute "has_active_device"
     */
    public function testPropertyHasActiveDevice()
    {
    }

    /**
     * Test attribute "confirmation_password_once_per_session"
     */
    public function testPropertyConfirmationPasswordOncePerSession()
    {
    }

    /**
     * Test attribute "min_length"
     */
    public function testPropertyMinLength()
    {
    }

    /**
     * Test attribute "max_length"
     */
    public function testPropertyMaxLength()
    {
    }

    /**
     * Test attribute "number_of_buttons"
     */
    public function testPropertyNumberOfButtons()
    {
    }

    /**
     * Test attribute "buttons_per_row"
     */
    public function testPropertyButtonsPerRow()
    {
    }

    /**
     * Test attribute "buttons"
     */
    public function testPropertyButtons()
    {
    }

    /**
     * Test attribute "input_method"
     */
    public function testPropertyInputMethod()
    {
    }

    /**
     * Test attribute "mode"
     */
    public function testPropertyMode()
    {
    }

    /**
     * Test attribute "device_availability"
     */
    public function testPropertyDeviceAvailability()
    {
    }

    /**
     * Test attribute "pin_availability"
     */
    public function testPropertyPinAvailability()
    {
    }

    /**
     * Test attribute "pin_input"
     */
    public function testPropertyPinInput()
    {
    }

    /**
     * Test attribute "otp_send_mediums"
     */
    public function testPropertyOtpSendMediums()
    {
    }
}
