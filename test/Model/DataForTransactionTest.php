<?php
/**
 * DataForTransactionTest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the model.
 */

namespace Cyclos\Api;

/**
 * DataForTransactionTest Class Doc Comment
 *
 * @category    Class
 * @description Contains basic configuration data used when performing a transaction. The path that returns it will normally receive the main transaction owner (system or user), plus 2 other optional parameters: - The other subject (system or user) that will either receive or perform   the payment. - The payment type. There are 3 possibilities when returning: - When the other subject wasn&#x27;t selected. In this case, will contain very   few information, mostly the accounts. - The other subject is selected, but not a payment type. If so, the   payment types will be returned, but not information on how to pick   the subject user, or the accounts. - Both other subject and payment type are selected: In this case   only the payment type data will be returned
 * @package     Cyclos\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DataForTransactionTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test "DataForTransaction"
     */
    public function testDataForTransaction()
    {
    }

    /**
     * Test attribute "accounts"
     */
    public function testPropertyAccounts()
    {
    }

    /**
     * Test attribute "from_kind"
     */
    public function testPropertyFromKind()
    {
    }

    /**
     * Test attribute "from_user"
     */
    public function testPropertyFromUser()
    {
    }

    /**
     * Test attribute "to_kind"
     */
    public function testPropertyToKind()
    {
    }

    /**
     * Test attribute "to_user"
     */
    public function testPropertyToUser()
    {
    }

    /**
     * Test attribute "payment_type_data"
     */
    public function testPropertyPaymentTypeData()
    {
    }

    /**
     * Test attribute "payment_types"
     */
    public function testPropertyPaymentTypes()
    {
    }

    /**
     * Test attribute "allow_autocomplete"
     */
    public function testPropertyAllowAutocomplete()
    {
    }

    /**
     * Test attribute "allow_contacts"
     */
    public function testPropertyAllowContacts()
    {
    }

    /**
     * Test attribute "allowed_users"
     */
    public function testPropertyAllowedUsers()
    {
    }

    /**
     * Test attribute "principal_types"
     */
    public function testPropertyPrincipalTypes()
    {
    }

    /**
     * Test attribute "default_principal_type"
     */
    public function testPropertyDefaultPrincipalType()
    {
    }

    /**
     * Test attribute "default_id_method"
     */
    public function testPropertyDefaultIdMethod()
    {
    }
}
