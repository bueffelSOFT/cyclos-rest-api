<?php
/**
 * PaymentErrorCodeTest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the model.
 */

namespace Cyclos\Api;

/**
 * PaymentErrorCodeTest Class Doc Comment
 *
 * @category    Class
 * @description Application-specific error codes for a payment error Possible values are: - &#x60;dailyAmountExceeded&#x60;: The maximum amount allowed per day was exceeded. - &#x60;dailyPaymentsExceeded&#x60;: The maximum count of payments allowed per day was exceeded. - &#x60;destinationUpperLimitReached&#x60;: The upper balance limit of the destination account was exceeded. - &#x60;insufficientBalance&#x60;: The account selected for the payment does not have enough balance - &#x60;monthlyAmountExceeded&#x60;: The maximum amount allowed per month was exceeded. - &#x60;monthlyPaymentsExceeded&#x60;: The maximum count of payments allowed per month was exceeded. - &#x60;paymentAmountExceeded&#x60;: The maximum amount allowed in the payment type was exceeded. - &#x60;pos&#x60;: A POS exception has happened when performing this payment. See the &#x60;posError&#x60; field for more details. - &#x60;timeBetweenPaymentsNotMet&#x60;: The minimum time between payments was not met. - &#x60;unexpected&#x60;: An unexpected error has occurred. See the &#x60;exceptionType&#x60; and &#x60;exceptionMessage&#x60; fields for the internal information. - &#x60;weeklyAmountExceeded&#x60;: The maximum amount allowed per week was exceeded. - &#x60;weeklyPaymentsExceeded&#x60;: The maximum count of payments allowed per week was exceeded. - &#x60;yearlyAmountExceeded&#x60;: The maximum amount allowed per year was exceeded.
 * @package     Cyclos\Api
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PaymentErrorCodeTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test "PaymentErrorCode"
     */
    public function testPaymentErrorCode()
    {
    }
}
