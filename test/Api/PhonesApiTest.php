<?php
/**
 * PhonesApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Cyclos\Api;

use Cyclos\Api\Configuration;
use Cyclos\Api\ApiException;
use Cyclos\Api\ObjectSerializer;

/**
 * PhonesApiTest Class Doc Comment
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PhonesApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for createPhone
     *
     * Creates a new phone for the given user.
     *
     */
    public function testCreatePhone()
    {
    }

    /**
     * Test case for deletePhone
     *
     * Removes a phone.
     *
     */
    public function testDeletePhone()
    {
    }

    /**
     * Test case for disablePhoneForSms
     *
     * Marks a phone as disabled to receive SMS notifications and operate in the SMS channel.
     *
     */
    public function testDisablePhoneForSms()
    {
    }

    /**
     * Test case for enablePhoneForSms
     *
     * Marks a phone as enabled to receive SMS notifications and operate in the SMS channel.
     *
     */
    public function testEnablePhoneForSms()
    {
    }

    /**
     * Test case for getPasswordInputForDisablePhoneForSms
     *
     * Returns a confirmation `PasswordInput` for disabling SMS of a phone, if any.
     *
     */
    public function testGetPasswordInputForDisablePhoneForSms()
    {
    }

    /**
     * Test case for getPasswordInputForRemovePhone
     *
     * Returns a confirmation `PasswordInput` for removing a phone, if any.
     *
     */
    public function testGetPasswordInputForRemovePhone()
    {
    }

    /**
     * Test case for getPhoneDataForEdit
     *
     * Returns data to edit an existing phone.
     *
     */
    public function testGetPhoneDataForEdit()
    {
    }

    /**
     * Test case for getPhoneDataForNew
     *
     * Returns data to create a new phone.
     *
     */
    public function testGetPhoneDataForNew()
    {
    }

    /**
     * Test case for getUserPhonesListData
     *
     * Returns data for listing a user's phones.
     *
     */
    public function testGetUserPhonesListData()
    {
    }

    /**
     * Test case for listPhonesByUser
     *
     * Lists all (visible) user phones.
     *
     */
    public function testListPhonesByUser()
    {
    }

    /**
     * Test case for sendPhoneVerificationCode
     *
     * Sends the verification code for a user to verify the mobile phone.
     *
     */
    public function testSendPhoneVerificationCode()
    {
    }

    /**
     * Test case for updatePhone
     *
     * Updates an existing phone.
     *
     */
    public function testUpdatePhone()
    {
    }

    /**
     * Test case for verifyPhone
     *
     * Marks a phone as verified if the code matches.
     *
     */
    public function testVerifyPhone()
    {
    }

    /**
     * Test case for viewPhone
     *
     * Returns details of a specific phone.
     *
     */
    public function testViewPhone()
    {
    }
}
