<?php
/**
 * PasswordsApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Cyclos\Api;

use Cyclos\Api\Configuration;
use Cyclos\Api\ApiException;
use Cyclos\Api\ObjectSerializer;

/**
 * PasswordsApiTest Class Doc Comment
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PasswordsApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for allowGeneration
     *
     * Allows the given user to generate the password for the first time for the given type..
     *
     */
    public function testAllowGeneration()
    {
    }

    /**
     * Test case for changeGenerated
     *
     * Generates a new value for an active generated password..
     *
     */
    public function testChangeGenerated()
    {
    }

    /**
     * Test case for changePassword
     *
     * Changes a manual password.
     *
     */
    public function testChangePassword()
    {
    }

    /**
     * Test case for disablePassword
     *
     * Disables a password, making it unusable until manually re-enabled.
     *
     */
    public function testDisablePassword()
    {
    }

    /**
     * Test case for enablePassword
     *
     * Re-enables a disabled a password.
     *
     */
    public function testEnablePassword()
    {
    }

    /**
     * Test case for generatePassword
     *
     * Generates the value of a generated password for the first time or if expired..
     *
     */
    public function testGeneratePassword()
    {
    }

    /**
     * Test case for getUserPasswordsData
     *
     * Returns complete data of the given password the given user have..
     *
     */
    public function testGetUserPasswordsData()
    {
    }

    /**
     * Test case for getUserPasswordsListData
     *
     * Returns complete data for each passwords the given user have..
     *
     */
    public function testGetUserPasswordsListData()
    {
    }

    /**
     * Test case for listUserPasswords
     *
     * Returns the status for each passwords the given user have..
     *
     */
    public function testListUserPasswords()
    {
    }

    /**
     * Test case for resetAndSendPassword
     *
     * Generates a new value for a manual password and send it to the user via e-mail.
     *
     */
    public function testResetAndSendPassword()
    {
    }

    /**
     * Test case for resetGeneratedPassword
     *
     * Resets a generated password, allowing it to be generated again.
     *
     */
    public function testResetGeneratedPassword()
    {
    }

    /**
     * Test case for resetUserSecurityAnswer
     *
     * Resets a user security answer, allowing they to change it.
     *
     */
    public function testResetUserSecurityAnswer()
    {
    }

    /**
     * Test case for setSecurityAnswer
     *
     * Sets the security answer if the current authenticated user.
     *
     */
    public function testSetSecurityAnswer()
    {
    }

    /**
     * Test case for unblockPassword
     *
     * Unblocks a password that has been blocked by exceeding the wrong tries.
     *
     */
    public function testUnblockPassword()
    {
    }
}
