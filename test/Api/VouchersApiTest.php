<?php
/**
 * VouchersApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cyclos 4.12.6 API
 *
 * The Cyclos REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://kb1.cyclos-dev.info/api/cyclos-openapi.yaml) or [JSON](http://kb1.cyclos-dev.info/api/cyclos-openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [Swagger Generator](https://generator.swagger.io/).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  Most of the operations that return data allow selecting which fields to include in the response. This is useful for reducing the data to be download over the network. If nothing is set, all object fields are returned. Unprefixed field names will be handled like a whitelist (only listed fields will be included), while names starting with a minus (-) or exclamation mark (!) will be handled as blacklist (listed fields will not be included). This works for nesting as well. For example: `a,b.b1,c.-c1,c.-c2` will return the fields `a`, `b` (containing only the `b1` field) and `c` (containing all its fields except for `c1` or `c2`).  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.12.6/api-deprecation.html) for this version.
 *
 * OpenAPI spec version: 4.12.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Cyclos\Api;

use Cyclos\Api\Configuration;
use Cyclos\Api\ApiException;
use Cyclos\Api\ObjectSerializer;

/**
 * VouchersApiTest Class Doc Comment
 *
 * @category Class
 * @package  Cyclos\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VouchersApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for buyVouchers
     *
     * Buys one or more vouchers for the given user.
     *
     */
    public function testBuyVouchers()
    {
    }

    /**
     * Test case for buyVouchersWithStatus
     *
     * Buys one or more vouchers for the given user returning the status..
     *
     */
    public function testBuyVouchersWithStatus()
    {
    }

    /**
     * Test case for cancelVoucher
     *
     * Cancels the voucher.
     *
     */
    public function testCancelVoucher()
    {
    }

    /**
     * Test case for changeVoucherExpirationDate
     *
     * Changes the voucher expiration..
     *
     */
    public function testChangeVoucherExpirationDate()
    {
    }

    /**
     * Test case for getUserVouchersDataForSearch
     *
     * Returns data for searching vouchers a user has bought or redeemed.
     *
     */
    public function testGetUserVouchersDataForSearch()
    {
    }

    /**
     * Test case for getVoucherDataForBuy
     *
     * Returns data for buying a voucher of a specified type or the list of types to buy..
     *
     */
    public function testGetVoucherDataForBuy()
    {
    }

    /**
     * Test case for getVoucherDataForRedeem
     *
     * Returns data for redeeming a voucher by token.
     *
     */
    public function testGetVoucherDataForRedeem()
    {
    }

    /**
     * Test case for getVoucherInitialDataForRedeem
     *
     * Returns initial data for redeeming vouchers.
     *
     */
    public function testGetVoucherInitialDataForRedeem()
    {
    }

    /**
     * Test case for getVoucherQrCode
     *
     * Returns the QR-code image for the given voucher.
     *
     */
    public function testGetVoucherQrCode()
    {
    }

    /**
     * Test case for getVouchersDataForSearch
     *
     * Returns data for searching vouchers as admin.
     *
     */
    public function testGetVouchersDataForSearch()
    {
    }

    /**
     * Test case for listVoucherTypesForBuy
     *
     * Returns the voucher types the authenticated user can buy vouchers to the given user.
     *
     */
    public function testListVoucherTypesForBuy()
    {
    }

    /**
     * Test case for redeemVoucher
     *
     * Redeems a voucher for the given user.
     *
     */
    public function testRedeemVoucher()
    {
    }

    /**
     * Test case for searchUserVouchers
     *
     * Searches for vouchers a user has bought or redeemed.
     *
     */
    public function testSearchUserVouchers()
    {
    }

    /**
     * Test case for searchVouchers
     *
     * Searches for vouchers as admin.
     *
     */
    public function testSearchVouchers()
    {
    }

    /**
     * Test case for viewVoucher
     *
     * Returns data for a particular voucher.
     *
     */
    public function testViewVoucher()
    {
    }
}
